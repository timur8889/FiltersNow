import gspread
import pandas as pd
import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

class GoogleSheetsManager:
    def __init__(self, credentials_file: str = 'credentials.json'):
        self.credentials_file = credentials_file
        self.client = None
        self.spreadsheet = None
        self.worksheet = None
        self.drive_service = None
        self._setup_client()
    
    def _setup_client(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets –∏ Drive"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º scope
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/spreadsheets"
            ]
            
            # –°–æ–∑–¥–∞–µ–º credentials
            creds = Credentials.from_service_account_file(
                self.credentials_file, scopes=scope
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            self.client = gspread.authorize(creds)
            self.drive_service = build('drive', 'v3', credentials=creds)
            
            logging.info("‚úÖ Google Sheets –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets: {e}")
            raise
    
    def create_spreadsheet(self, title: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            self.spreadsheet = self.client.create(title)
            
            # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
            self.spreadsheet.share(None, perm_type='anyone', role='writer')
            
            logging.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {title}")
            return self.spreadsheet.url
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            raise
    
    def open_spreadsheet(self, spreadsheet_id: str):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            self.spreadsheet = self.client.open_by_key(spreadsheet_id)
            logging.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {self.spreadsheet.title}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            raise
    
    def setup_worksheet(self, sheet_name: str = "–§–∏–ª—å—Ç—Ä—ã"):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—Å—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            try:
                self.worksheet = self.spreadsheet.worksheet(sheet_name)
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if self.worksheet.row_count > 1:
                    self.worksheet.delete_rows(2, self.worksheet.row_count)
            except gspread.WorksheetNotFound:
                self.worksheet = self.spreadsheet.add_worksheet(
                    title=sheet_name, rows=1000, cols=15
                )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                "ID", "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞", "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", 
                "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã", "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞",
                "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π", "–°—Ç–∞—Ç—É—Å", "–ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞",
                "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                "User ID", "Telegram Username", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"
            ]
            
            self.worksheet.update('A1:O1', [headers])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            self._apply_header_formatting()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            self._auto_resize_columns()
            
            logging.info(f"üìù –õ–∏—Å—Ç '{sheet_name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–∞: {e}")
            raise
    
    def _apply_header_formatting(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
        try:
            header_format = {
                "backgroundColor": {
                    "red": 0.2, "green": 0.4, "blue": 0.6
                },
                "textFormat": {
                    "foregroundColor": {"red": 1.0, "green": 1.0, "blue": 1.0},
                    "bold": True,
                    "fontSize": 11
                },
                "horizontalAlignment": "CENTER"
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ batch_update
            requests = [
                {
                    "repeatCell": {
                        "range": {
                            "sheetId": self.worksheet.id,
                            "startRowIndex": 0,
                            "endRowIndex": 1
                        },
                        "cell": {
                            "userEnteredFormat": header_format
                        },
                        "fields": "userEnteredFormat(backgroundColor,textFormat,horizontalAlignment)"
                    }
                }
            ]
            
            self.spreadsheet.batch_update({"requests": requests})
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
    
    def _auto_resize_columns(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫"""
        try:
            requests = []
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
            column_widths = {
                0: 50,   # ID
                1: 120,  # –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
                2: 100,  # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                3: 110,  # –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã
                4: 110,  # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                5: 90,   # –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π
                6: 80,   # –°—Ç–∞—Ç—É—Å
                7: 80,   # –ò–∫–æ–Ω–∫–∞
                8: 90,   # –°—Ä–æ–∫ —Å–ª—É–∂–±—ã
                9: 110,  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                10: 110, # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                11: 80,  # User ID
                12: 100, # Username
                13: 100, # –¢–µ–ª–µ—Ñ–æ–Ω
                14: 120  # Email
            }
            
            for col_index, width in column_widths.items():
                requests.append({
                    "updateDimensionProperties": {
                        "range": {
                            "sheetId": self.worksheet.id,
                            "dimension": "COLUMNS",
                            "startIndex": col_index,
                            "endIndex": col_index + 1
                        },
                        "properties": {
                            "pixelSize": width
                        },
                        "fields": "pixelSize"
                    }
                })
            
            if requests:
                self.spreadsheet.batch_update({"requests": requests})
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫: {e}")
    
    def filters_to_sheets_data(self, filters: List[Dict], user_info: Dict = None) -> List[List]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        today = datetime.now().date()
        sheet_data = []
        
        for f in filters:
            try:
                expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
                last_change = datetime.strptime(str(f['last_change']), '%Y-%m-%d').date()
                days_until_expiry = (expiry_date - today).days
                
                icon, status = self.get_status_icon_and_text(days_until_expiry)
                
                row = [
                    f['id'],
                    f['filter_type'],
                    f['location'],
                    last_change.strftime('%d.%m.%Y'),
                    expiry_date.strftime('%d.%m.%Y'),
                    days_until_expiry,
                    status,
                    icon,
                    f['lifetime_days'],
                    f.get('created_at', '')[:10] if f.get('created_at') else '',
                    f.get('updated_at', '')[:10] if f.get('updated_at') else '',
                    f['user_id'],
                    user_info.get('username', '') if user_info else '',
                    user_info.get('phone', '') if user_info else '',
                    user_info.get('email', '') if user_info else ''
                ]
                sheet_data.append(row)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {f.get('id', 'N/A')}: {e}")
                continue
        
        return sheet_data
    
    def get_status_icon_and_text(self, days_until_expiry: int) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        if days_until_expiry <= 0:
            return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            return "üü°", "–°–ö–û–†–û –ò–°–¢–ï–ß–ï–¢"
        elif days_until_expiry <= 30:
            return "üü†", "–í–ù–ò–ú–ê–ù–ò–ï"
        else:
            return "üü¢", "–ù–û–†–ú–ê"
    
    async def sync_filters_to_sheets(self, filters: List[Dict], user_info: Dict = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å Google Sheets"""
        try:
            if not self.worksheet:
                await self.setup_worksheet()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            sheet_data = self.filters_to_sheets_data(filters, user_info)
            
            if not sheet_data:
                logging.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            if self.worksheet.row_count > 1:
                self.worksheet.delete_rows(2, self.worksheet.row_count)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if sheet_data:
                self.worksheet.update(f'A2:O{len(sheet_data) + 1}', sheet_data)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._apply_conditional_formatting(len(sheet_data))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            self._add_filters()
            
            logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(sheet_data)} —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å Google Sheets")
            
            return len(sheet_data)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
            raise
    
    def _apply_conditional_formatting(self, data_rows_count: int):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if data_rows_count == 0:
                return
            
            range_end = data_rows_count + 1
            
            requests = [
                # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö (–∫–æ–ª–æ–Ω–∫–∞ F - "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π")
                {
                    'addConditionalFormatRule': {
                        'rule': {
                            'ranges': [{
                                'sheetId': self.worksheet.id, 
                                'startRowIndex': 1, 
                                'endRowIndex': range_end, 
                                'startColumnIndex': 5, 
                                'endColumnIndex': 6
                            }],
                            'booleanRule': {
                                'condition': {
                                    'type': 'LESS_THAN',
                                    'values': [{'userEnteredValue': '0'}]
                                },
                                'format': {
                                    'backgroundColor': {'red': 1.0, 'green': 0.8, 'blue': 0.8},
                                    'textFormat': {'bold': True}
                                }
                            }
                        }
                    }
                },
                # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö (0-7 –¥–Ω–µ–π)
                {
                    'addConditionalFormatRule': {
                        'rule': {
                            'ranges': [{
                                'sheetId': self.worksheet.id, 
                                'startRowIndex': 1, 
                                'endRowIndex': range_end, 
                                'startColumnIndex': 5, 
                                'endColumnIndex': 6
                            }],
                            'booleanRule': {
                                'condition': {
                                    'type': 'BETWEEN',
                                    'values': [
                                        {'userEnteredValue': '0'},
                                        {'userEnteredValue': '7'}
                                    ]
                                },
                                'format': {
                                    'backgroundColor': {'red': 1.0, 'green': 0.95, 'blue': 0.8},
                                    'textFormat': {'bold': True}
                                }
                            }
                        }
                    }
                },
                # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (8-30 –¥–Ω–µ–π)
                {
                    'addConditionalFormatRule': {
                        'rule': {
                            'ranges': [{
                                'sheetId': self.worksheet.id, 
                                'startRowIndex': 1, 
                                'endRowIndex': range_end, 
                                'startColumnIndex': 5, 
                                'endColumnIndex': 6
                            }],
                            'booleanRule': {
                                'condition': {
                                    'type': 'BETWEEN', 
                                    'values': [
                                        {'userEnteredValue': '8'},
                                        {'userEnteredValue': '30'}
                                    ]
                                },
                                'format': {
                                    'backgroundColor': {'red': 1.0, 'green': 0.9, 'blue': 0.7},
                                    'textFormat': {'bold': True}
                                }
                            }
                        }
                    }
                }
            ]
            
            self.spreadsheet.batch_update({'requests': requests})
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def _add_filters(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º"""
        try:
            requests = [
                {
                    "setBasicFilter": {
                        "filter": {
                            "range": {
                                "sheetId": self.worksheet.id,
                                "startRowIndex": 0,
                                "endRowIndex": self.worksheet.row_count,
                                "startColumnIndex": 0,
                                "endColumnIndex": 15
                            }
                        }
                    }
                }
            ]
            
            self.spreadsheet.batch_update({"requests": requests})
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def get_spreadsheet_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ç–∞–±–ª–∏—Ü—ã"""
        return self.spreadsheet.url if self.spreadsheet else ""
    
    def get_spreadsheet_id(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã"""
        return self.spreadsheet.id if self.spreadsheet else ""
    
    async def create_summary_sheet(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            try:
                summary_sheet = self.spreadsheet.worksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            except gspread.WorksheetNotFound:
                summary_sheet = self.spreadsheet.add_worksheet(
                    title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", rows=50, cols=10
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            main_data = self.worksheet.get_all_records()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = datetime.now().date()
            total_filters = len(main_data)
            expired = 0
            expiring_soon = 0
            warning = 0
            normal = 0
            
            for row in main_data:
                days_left = row.get('–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π', 0)
                if days_left <= 0:
                    expired += 1
                elif days_left <= 7:
                    expiring_soon += 1
                elif days_left <= 30:
                    warning += 1
                else:
                    normal += 1
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_data = [
                ["üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í", ""],
                ["–û–±–Ω–æ–≤–ª–µ–Ω–æ", datetime.now().strftime('%d.%m.%Y %H:%M')],
                [""],
                ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                ["–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤", total_filters],
                ["üü¢ –ù–æ—Ä–º–∞", normal],
                ["üü† –í–Ω–∏–º–∞–Ω–∏–µ", warning],
                ["üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç", expiring_soon],
                ["üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", expired],
                [""],
                ["–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö", f"{(expired/total_filters*100):.1f}%" if total_filters > 0 else "0%"],
                ["–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö", f"{(expiring_soon/total_filters*100):.1f}%" if total_filters > 0 else "0%"]
            ]
            
            # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            summary_sheet.clear()
            summary_sheet.update('A1:B13', stats_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            summary_sheet.format('A1:B1', {
                "backgroundColor": {"red": 0.1, "green": 0.3, "blue": 0.5},
                "textFormat": {"foregroundColor": {"red": 1.0, "green": 1.0, "blue": 1.0}, "bold": True, "fontSize": 14},
                "horizontalAlignment": "CENTER"
            })
            
            logging.info("‚úÖ –õ–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
google_sheets_manager = None

async def init_google_sheets(credentials_file: str = 'credentials.json', 
                           spreadsheet_id: str = None,
                           create_new: bool = False) -> GoogleSheetsManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global google_sheets_manager
    
    try:
        google_sheets_manager = GoogleSheetsManager(credentials_file)
        
        if create_new:
            title = f"–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            url = google_sheets_manager.create_spreadsheet(title)
            logging.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {url}")
        elif spreadsheet_id:
            google_sheets_manager.open_spreadsheet(spreadsheet_id)
        
        google_sheets_manager.setup_worksheet()
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await google_sheets_manager.create_summary_sheet()
        
        return google_sheets_manager
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None
