import logging
import logging.config
import sqlite3
import os
import asyncio
import shutil
import traceback
import re
import sys
import aiosqlite
import json
import pandas as pd
import io
import time
from datetime import datetime, timedelta
from contextlib import asynccontextmanager
from typing import Dict, List, Optional, Callable, Any, Awaitable, Union
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram import BaseMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        self.ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))
        self.GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        self.GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.DB_PATH = 'filters.db'
        self.BACKUP_ENABLED = True
        self.BACKUP_PATH = 'backups'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
        self.RATE_LIMIT_MAX_REQUESTS = 10
        self.RATE_LIMIT_WINDOW = 30
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.REMINDER_CHECK_INTERVAL = 24 * 60 * 60  # 24 —á–∞—Å–∞
        self.EARLY_REMINDER_DAYS = 7
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç
        
    def validate(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.API_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        if self.BACKUP_ENABLED and not os.path.exists(self.BACKUP_PATH):
            os.makedirs(self.BACKUP_PATH)
            
        return True

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ==========
class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self._user_filters_cache = {}
        self._user_stats_cache = {}
        self._cache_ttl = config.CACHE_TTL
    
    async def get_user_filters(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"filters_{user_id}"
        
        if cache_key in self._user_filters_cache:
            data, timestamp = self._user_filters_cache[cache_key]
            if time.time() - timestamp < self._cache_ttl:
                return data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
        filters = await get_user_filters_db(user_id)
        self._user_filters_cache[cache_key] = (filters, time.time())
        return filters
    
    async def get_user_stats(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"stats_{user_id}"
        
        if cache_key in self._user_stats_cache:
            data, timestamp = self._user_stats_cache[cache_key]
            if time.time() - timestamp < self._cache_ttl:
                return data
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
        filters = await self.get_user_filters(user_id)
        stats = self._calculate_user_stats(filters)
        self._user_stats_cache[cache_key] = (stats, time.time())
        return stats
    
    def _calculate_user_stats(self, filters: List[Dict]) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = datetime.now().date()
        stats = {
            'total': len(filters),
            'expired': 0,
            'expiring_soon': 0,
            'normal': 0,
            'total_days_until_expiry': 0
        }
        
        for f in filters:
            expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
            days_until = (expiry_date - today).days
            stats['total_days_until_expiry'] += max(0, days_until)
            
            if days_until <= 0:
                stats['expired'] += 1
            elif days_until <= 7:
                stats['expiring_soon'] += 1
            else:
                stats['normal'] += 1
        
        if stats['total'] > 0:
            stats['avg_days_until_expiry'] = stats['total_days_until_expiry'] / stats['total']
            stats['health_percentage'] = (stats['normal'] / stats['total']) * 100
        else:
            stats['avg_days_until_expiry'] = 0
            stats['health_percentage'] = 0
            
        return stats
    
    def invalidate_user_cache(self, user_id: int):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key_filters = f"filters_{user_id}"
        cache_key_stats = f"stats_{user_id}"
        self._user_filters_cache.pop(cache_key_filters, None)
        self._user_stats_cache.pop(cache_key_stats, None)
    
    def clear_all_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞"""
        self._user_filters_cache.clear()
        self._user_stats_cache.clear()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞
cache_manager = CacheManager()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –†–ê–°–®–ò–†–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
def setup_logging():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.config.dictConfig({
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'detailed': {
                'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s - [%(filename)s:%(lineno)d]'
            },
            'simple': {
                'format': '%(levelname)s - %(message)s'
            }
        },
        'handlers': {
            'file': {
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': 'bot.log',
                'maxBytes': 10*1024*1024,  # 10MB
                'backupCount': 5,
                'formatter': 'detailed',
                'encoding': 'utf-8'
            },
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            }
        },
        'loggers': {
            '': {
                'handlers': ['file', 'console'],
                'level': 'INFO'
            }
        }
    })

setup_logging()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
    builder.button(text="‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.button(text="üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_add_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ûï –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_filter_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10")
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    builder.button(text="–ì–µ–π–∑–µ—Ä")
    builder.button(text="–ê–∫–≤–∞—Ñ–æ—Ä")
    builder.button(text="–ü—É—Ä–∏—Ñ–∞–π–µ—Ä")
    builder.button(text="–î—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ")
    builder.button(text="‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üìä –û–Ω–ª–∞–π–Ω Excel")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_import_export_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
    builder.button(text="üìã –®–∞–±–ª–æ–Ω Excel")
    builder.button(text="‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_sync_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    builder.button(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_sync_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã")
    builder.button(text="üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–ö–õ")
    builder.button(text="‚è∏Ô∏è –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–´–ö–õ")
    builder.button(text="üóëÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)

def get_edit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üíß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞")
    builder.button(text="üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    builder.button(text="üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã")
    builder.button(text="‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_recommended_lifetime_keyboard(default_lifetime: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º —Å—Ä–æ–∫–æ–º —Å–ª—É–∂–±—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text=f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π ({default_lifetime} –¥–Ω–µ–π)")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_filters_selection_keyboard(filters: List[Dict], action: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    for f in filters:
        builder.button(text=f"#{f['id']} - {f['filter_type']} ({f['location']})")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_reminder_keyboard(filter_id: int):
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ó–∞–º–µ–Ω–∏–ª", callback_data=f"replaced_{filter_id}")
    builder.button(text="üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"postpone_{filter_id}")
    builder.button(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"details_{filter_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_status_icon_and_text(days_until_expiry: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
    elif days_until_expiry <= 7:
        return "üü°", "–°–ö–û–†–û –ò–°–¢–ï–ß–ï–¢"
    elif days_until_expiry <= 30:
        return "üü†", "–í–ù–ò–ú–ê–ù–ò–ï"
    else:
        return "üü¢", "–ù–û–†–ú–ê"

def format_date_nice(date):
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    return date.strftime("%d.%m.%Y")

def create_progress_bar(percentage: float, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    filled = int(length * percentage / 100)
    empty = length - filled
    return f"[{'‚ñà' * filled}{'‚ñë' * empty}] {percentage:.1f}%"

def format_filter_status_with_progress(filter_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    expiry_date = datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date()
    last_change = datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d').date()
    days_total = filter_data['lifetime_days']
    days_passed = (datetime.now().date() - last_change).days
    percentage = min(100, max(0, (days_passed / days_total) * 100))
    
    progress_bar = create_progress_bar(percentage)
    days_until = (expiry_date - datetime.now().date()).days
    
    return f"{progress_bar} ({days_passed}/{days_total} –¥–Ω–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å: {days_until} –¥–Ω–µ–π)"

def create_expiry_infographic(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º"""
    today = datetime.now().date()
    expired = 0
    expiring_soon = 0
    normal = 0
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        
        if days_until <= 0:
            expired += 1
        elif days_until <= 7:
            expiring_soon += 1
        else:
            normal += 1
    
    total = len(filters)
    if total > 0:
        health_percentage = (normal / total) * 100
        progress_bar = create_progress_bar(health_percentage)
    else:
        progress_bar = create_progress_bar(0)
    
    return (
        f"üìä <b>–°–¢–ê–¢–£–° –§–ò–õ–¨–¢–†–û–í:</b>\n"
        f"{progress_bar}\n"
        f"üü¢ –ù–æ—Ä–º–∞: {normal}\n"
        f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {expiring_soon}\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired}"
    )

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID

def backup_database() -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if os.path.exists(config.DB_PATH):
            backup_name = f'filters_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            backup_path = os.path.join(config.BACKUP_PATH, backup_name)
            shutil.copy2(config.DB_PATH, backup_path)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            backup_files = [f for f in os.listdir(config.BACKUP_PATH) if f.startswith('filters_backup_')]
            backup_files.sort(reverse=True)
            for old_backup in backup_files[10:]:
                os.remove(os.path.join(config.BACKUP_PATH, old_backup))
                logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_backup}")
                
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    return False

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ==========
def sanitize_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return text
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = re.sub(r'[<>&\"\']', '', text)
    return sanitized.strip()

def validate_user_id(user_id: int) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return isinstance(user_id, int) and user_id > 0

async def check_user_permission(user_id: int, filter_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–∏–ª—å—Ç—Ä"""
    try:
        filter_data = await get_filter_by_id(filter_id, user_id)
        return filter_data is not None
    except Exception:
        return False

def validate_filter_type(filter_type: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_type = sanitize_input(filter_type)
    
    if not filter_type or len(filter_type.strip()) == 0:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(filter_type) > 100:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[<>{}[\]]', filter_type):
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, "OK"

def validate_location(location: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    location = sanitize_input(location)
    
    if not location or len(location.strip()) == 0:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(location) > 50:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if re.search(r'[<>{}[\]]', location):
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, "OK"

def validate_lifetime(lifetime: str) -> tuple[bool, str, int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(lifetime)
        if days <= 0:
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", 0
        if days > 3650:  # 10 –ª–µ—Ç
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ª–µ—Ç", 0
        return True, "OK", days
    except ValueError:
        return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–¥–Ω–∏)", 0

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –†–ï–¢–†–ò –ú–ï–•–ê–ù–ò–ó–ú–´ ==========
async def execute_with_retry(func: Callable, max_retries: int = 3, delay: float = 1.0, *args, **kwargs):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if attempt == max_retries - 1:
                raise e
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
            await asyncio.sleep(delay)

# ========== GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========
class GoogleSheetsSync:
    def __init__(self):
        self.credentials = None
        self.sheet_id = None
        self.auto_sync = False
        self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('sheets_settings.json'):
                with open('sheets_settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    self.sheet_id = settings.get('sheet_id')
                    self.auto_sync = settings.get('auto_sync', False)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            settings = {
                'sheet_id': self.sheet_id,
                'auto_sync': self.auto_sync
            }
            with open('sheets_settings.json', 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets: {e}")
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return bool(self.sheet_id and config.GOOGLE_SHEETS_CREDENTIALS)
    
    async def initialize_credentials(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google"""
        try:
            if not config.GOOGLE_SHEETS_CREDENTIALS:
                return False
            
            # –ü–∞—Ä—Å–∏–º JSON credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            credentials_info = json.loads(config.GOOGLE_SHEETS_CREDENTIALS)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            try:
                import gspread
                from google.oauth2.service_account import Credentials
            except ImportError:
                logging.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ gspread –∏–ª–∏ google-auth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            # –°–æ–∑–¥–∞–µ–º credentials
            scope = ['https://spreadsheets.google.com/feeds', 
                    'https://www.googleapis.com/auth/drive']
            self.credentials = Credentials.from_service_account_info(credentials_info, scopes=scope)
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            return False
    
    async def sync_to_sheets(self, user_id: int, user_filters: List[Dict]) -> tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
        try:
            if not self.is_configured():
                return False, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
            
            if not self.credentials:
                if not await self.initialize_credentials():
                    return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API"
            
            import gspread
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            gc = gspread.authorize(self.credentials)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = gc.open_by_key(self.sheet_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            worksheet_name = f"User_{user_id}"
            try:
                worksheet = sheet.worksheet(worksheet_name)
            except gspread.exceptions.WorksheetNotFound:
                worksheet = sheet.add_worksheet(title=worksheet_name, rows=100, cols=10)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ['ID', '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', 
                          '–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)', '–ì–æ–¥–µ–Ω –¥–æ', '–°—Ç–∞—Ç—É—Å', '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π']
                worksheet.append_row(headers)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            if len(worksheet.get_all_values()) > 1:
                worksheet.delete_rows(2, len(worksheet.get_all_values()))
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            today = datetime.now().date()
            rows = []
            
            for f in user_filters:
                expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
                last_change = datetime.strptime(str(f['last_change']), '%Y-%m-%d').date()
                days_until = (expiry_date - today).days
                
                icon, status = get_status_icon_and_text(days_until)
                
                row = [
                    f['id'],
                    f['filter_type'],
                    f['location'],
                    format_date_nice(last_change),
                    f['lifetime_days'],
                    format_date_nice(expiry_date),
                    status,
                    days_until
                ]
                rows.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if rows:
                worksheet.append_rows(rows)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            try:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
                worksheet.format('A1:H1', {'textFormat': {'bold': True}})
                
                # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                worksheet.columns_auto_resize(0, 7)
            except Exception as format_error:
                logging.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {format_error}")
            
            return True, f"–£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} —Ñ–∏–ª—å—Ç—Ä–æ–≤"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    async def sync_from_sheets(self, user_id: int) -> tuple[bool, str, int]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            if not self.is_configured():
                return False, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", 0
            
            if not self.credentials:
                if not await self.initialize_credentials():
                    return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API", 0
            
            import gspread
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            gc = gspread.authorize(self.credentials)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            sheet = gc.open_by_key(self.sheet_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            worksheet_name = f"User_{user_id}"
            try:
                worksheet = sheet.worksheet(worksheet_name)
            except gspread.exceptions.WorksheetNotFound:
                return False, "–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 0
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            data = worksheet.get_all_records()
            
            if not data:
                return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            imported_count = 0
            errors = []
            
            for index, row in enumerate(data, start=2):
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if not row.get('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞') or not row.get('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'):
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
                    filter_type = str(row['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞']).strip()
                    is_valid_type, error_msg = validate_filter_type(filter_type)
                    if not is_valid_type:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {error_msg}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    location = str(row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ']).strip()
                    is_valid_loc, error_msg = validate_location(location)
                    if not is_valid_loc:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {error_msg}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
                    date_str = str(row.get('–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', ''))
                    if not date_str:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã")
                        continue
                    
                    try:
                        change_date = validate_date(date_str)
                    except ValueError as e:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {str(e)}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
                    lifetime = row.get('–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)', 0)
                    is_valid_lt, error_msg, lifetime_days = validate_lifetime(str(lifetime))
                    if not is_valid_lt:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {error_msg}")
                        continue
                    
                    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    expiry_date = change_date + timedelta(days=lifetime_days)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                    success = await add_filter_to_db(
                        user_id=user_id,
                        filter_type=filter_type,
                        location=location,
                        last_change=change_date.strftime('%Y-%m-%d'),
                        expiry_date=expiry_date.strftime('%Y-%m-%d'),
                        lifetime_days=lifetime_days
                    )
                    
                    if success:
                        imported_count += 1
                    else:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                        
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
            
            message = f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤"
            if errors:
                message += f"\n–û—à–∏–±–∫–∏: {len(errors)}"
                if len(errors) <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    message += "\n" + "\n".join(errors[:5])
            
            return True, message, imported_count
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Google Sheets: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}", 0

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
google_sync = GoogleSheetsSync()

# ========== –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø ==========
class EnhancedHealthMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.message_count = 0
        self.error_count = 0
        self.user_actions = {}
        self.db_operations = 0
        self.sync_operations = 0
        self.user_sessions = {}
        self.cache_hits = 0
        self.cache_misses = 0
    
    def record_message(self, user_id: int):
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.message_count += 1
        if user_id not in self.user_actions:
            self.user_actions[user_id] = 0
        self.user_actions[user_id] += 1
    
    def record_error(self):
        """–ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏"""
        self.error_count += 1
    
    def record_db_operation(self):
        """–ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î"""
        self.db_operations += 1
    
    def record_sync_operation(self):
        """–ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.sync_operations += 1
    
    def record_cache_hit(self):
        """–ó–∞–ø–∏—Å—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"""
        self.cache_hits += 1
    
    def record_cache_miss(self):
        """–ó–∞–ø–∏—Å—å –ø—Ä–æ–º–∞—Ö–∞ –∫—ç—à–∞"""
        self.cache_misses += 1
    
    def get_cache_hit_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        total = self.cache_hits + self.cache_misses
        return (self.cache_hits / total * 100) if total > 0 else 0
    
    async def get_health_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time
        active_users = len([uid for uid, count in self.user_actions.items() if count > 0])
        
        health_score = (self.message_count - self.error_count) / max(1, self.message_count) * 100
        
        return {
            'uptime': str(uptime),
            'message_count': self.message_count,
            'error_count': self.error_count,
            'active_users': active_users,
            'health_score': health_score,
            'cache_hit_rate': self.get_cache_hit_rate()
        }
    
    async def get_detailed_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        basic_status = await self.get_health_status()
        basic_status.update({
            'db_operations': self.db_operations,
            'sync_operations': self.sync_operations,
            'active_sessions': len(self.user_sessions),
            'database_size': await self.get_database_size(),
            'memory_usage': self.get_memory_usage(),
            'cache_hits': self.cache_hits,
            'cache_misses': self.cache_misses
        })
        return basic_status
    
    async def get_database_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(config.DB_PATH):
                return os.path.getsize(config.DB_PATH)
            return 0
        except:
            return 0
    
    def get_memory_usage(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024  # MB
        except ImportError:
            return 0

health_monitor = EnhancedHealthMonitor()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: RATE LIMITING ==========
class RateLimiter:
    def __init__(self, max_requests: int = 5, window: int = 30):
        self.max_requests = max_requests
        self.window = window
        self.user_requests = {}
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        now = datetime.now()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if (now - req_time).seconds < self.window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.max_requests:
            return False
        
        self.user_requests[user_id].append(now)
        return True

rate_limiter = RateLimiter(max_requests=config.RATE_LIMIT_MAX_REQUESTS, window=config.RATE_LIMIT_WINDOW)

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: MIDDLEWARE –î–õ–Ø RATE LIMITING –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ==========
class EnhancedMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
            
            if not rate_limiter.is_allowed(user_id):
                if hasattr(event, 'answer'):
                    await event.answer("‚è≥ <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥.", parse_mode='HTML')
                return
            
            health_monitor.record_message(user_id)
        
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot = Bot(
    token=config.API_TOKEN,
    default=DefaultBotProperties(parse_mode='HTML')
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.update.outer_middleware(EnhancedMiddleware())

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
@asynccontextmanager
async def get_db_connection():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = await aiosqlite.connect(config.DB_PATH)
    conn.row_factory = aiosqlite.Row
    try:
        yield conn
        await conn.commit()
    except Exception as e:
        await conn.rollback()
        raise e
    finally:
        await conn.close()

async def get_user_filters_db(user_id: int) -> List[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", (user_id,))
            rows = await cur.fetchall()
            health_monitor.record_db_operation()
            health_monitor.record_cache_miss()  # –ü—Ä–æ–ø—É—Å–∫ –∫—ç—à–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ë–î
            return [dict(row) for row in rows]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        health_monitor.record_error()
        return []

async def get_user_filters(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
    return await cache_manager.get_user_filters(user_id)

async def get_filter_by_id(filter_id: int, user_id: int) -> Optional[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        filters = await get_user_filters(user_id)
        for f in filters:
            if f['id'] == filter_id:
                health_monitor.record_cache_hit()
                return f
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –ë–î
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("SELECT * FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
            result = await cur.fetchone()
            health_monitor.record_db_operation()
            health_monitor.record_cache_miss()
            return dict(result) if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}: {e}")
        health_monitor.record_error()
        return None

async def get_all_users_stats() -> Dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute('''SELECT COUNT(DISTINCT user_id) as total_users, 
                                  COUNT(*) as total_filters,
                                  SUM(CASE WHEN expiry_date <= date('now') THEN 1 ELSE 0 END) as expired_filters,
                                  SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as expiring_soon
                           FROM filters''')
            result = await cur.fetchone()
            health_monitor.record_db_operation()
            return dict(result) if result else {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        health_monitor.record_error()
        return {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}

async def add_filter_to_db(user_id: int, filter_type: str, location: str, last_change: str, expiry_date: str, lifetime_days: int) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute('''INSERT INTO filters 
                              (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                              VALUES (?, ?, ?, ?, ?, ?)''',
                              (user_id, filter_type, location, last_change, expiry_date, lifetime_days))
            
            health_monitor.record_db_operation()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache_manager.invalidate_user_cache(user_id)
            
            # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            if google_sync.auto_sync and google_sync.is_configured():
                filters = await get_user_filters(user_id)
                asyncio.create_task(google_sync.sync_to_sheets(user_id, filters))
            
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        health_monitor.record_error()
        return False

async def update_filter_in_db(filter_id: int, user_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    try:
        if not kwargs:
            return False
        
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            set_clause = ", ".join([f"{key} = ?" for key in kwargs.keys()])
            values = list(kwargs.values())
            values.extend([filter_id, user_id])
            
            await cur.execute(f"UPDATE filters SET {set_clause} WHERE id = ? AND user_id = ?", values)
            
            health_monitor.record_db_operation()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache_manager.invalidate_user_cache(user_id)
            
            # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if google_sync.auto_sync and google_sync.is_configured():
                filters = await get_user_filters(user_id)
                asyncio.create_task(google_sync.sync_to_sheets(user_id, filters))
            
            return cur.rowcount > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}: {e}")
        health_monitor.record_error()
        return False

async def delete_filter_from_db(filter_id: int, user_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –ë–î"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
            
            health_monitor.record_db_operation()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache_manager.invalidate_user_cache(user_id)
            
            # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            if google_sync.auto_sync and google_sync.is_configured():
                filters = await get_user_filters(user_id)
                asyncio.create_task(google_sync.sync_to_sheets(user_id, filters))
            
            return cur.rowcount > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}: {e}")
        health_monitor.record_error()
        return False

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–¢ ==========
def try_auto_correct_date(date_str: str) -> Optional[datetime.date]:
    """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã"""
    clean = re.sub(r'\D', '', date_str)
    
    if len(clean) == 6:  # –î–î–ú–ú–ì–ì
        try:
            day, month, year = int(clean[:2]), int(clean[2:4]), int(clean[4:])
            if year < 100:
                year += 2000 if year < 50 else 1900
            return datetime(year, month, day).date()
        except ValueError:
            pass
    elif len(clean) == 8:  # –î–î–ú–ú–ì–ì–ì–ì
        try:
            day, month, year = int(clean[:2]), int(clean[2:4]), int(clean[4:])
            return datetime(year, month, day).date()
        except ValueError:
            pass
    
    return None

def validate_date(date_str: str) -> datetime.date:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
    date_str = date_str.strip()
    
    # –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    date_str = re.sub(r'[/\-]', '.', date_str)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
    date_str = re.sub(r'[^\d\.]', '', date_str)
    
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d%m%y', '%d%m%Y', '%d.%m', '%d%m']
    
    for fmt in formats:
        try:
            if fmt in ['%d.%m', '%d%m']:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                date_obj = datetime.strptime(date_str, fmt).date()
                date_obj = date_obj.replace(year=datetime.now().year)
            elif fmt in ['%d%m%y', '%d%m%Y']:
                if len(date_str) in [6, 8]:
                    date_obj = datetime.strptime(date_str, fmt).date()
                else:
                    continue
            else:
                date_obj = datetime.strptime(date_str, fmt).date()
            
            today = datetime.now().date()
            max_past = today - timedelta(days=5*365)
            max_future = today + timedelta(days=1)
            
            if date_obj > max_future:
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            if date_obj < max_past:
                raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–±–æ–ª–µ–µ 5 –ª–µ—Ç)")
                
            return date_obj
        except ValueError:
            continue
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    corrected = try_auto_correct_date(date_str)
    if corrected:
        return corrected
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú")

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
async def check_and_update_schema():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_connection() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            cur = await conn.cursor()
            await cur.execute("PRAGMA table_info(filters)")
            columns = [row[1] for row in await cur.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'created_at' not in columns:
                await cur.execute("ALTER TABLE filters ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at")
            
            if 'updated_at' not in columns:
                await cur.execute("ALTER TABLE filters ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ updated_at")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
            await cur.execute("CREATE INDEX IF NOT EXISTS idx_user_expiry ON filters(user_id, expiry_date)")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –ë–î: {e}")

# ========== –≠–ö–°–ü–û–†–¢ –í EXCEL ==========
async def export_to_excel(user_id: int) -> io.BytesIO:
    """–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ Excel"""
    filters = await get_user_filters(user_id)
    
    if not filters:
        raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(filters)
    
    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    columns_to_drop = ['user_id', 'created_at', 'updated_at']
    for col in columns_to_drop:
        if col in df.columns:
            df = df.drop(columns=[col])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    today = datetime.now().date()
    df['last_change'] = pd.to_datetime(df['last_change']).dt.strftime('%d.%m.%Y')
    df['expiry_date'] = pd.to_datetime(df['expiry_date']).dt.strftime('%d.%m.%Y')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    def calculate_status(expiry_date_str):
        expiry_date = datetime.strptime(expiry_date_str, '%d.%m.%Y').date()
        days_until = (expiry_date - today).days
        icon, status = get_status_icon_and_text(days_until)
        return f"{icon} {status} ({days_until} –¥–Ω–µ–π)"
    
    df['–°—Ç–∞—Ç—É—Å'] = df['expiry_date'].apply(calculate_status)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    def calculate_progress(row):
        expiry_date = datetime.strptime(row['expiry_date'], '%d.%m.%Y').date()
        last_change = datetime.strptime(row['last_change'], '%d.%m.%Y').date()
        days_total = row['lifetime_days']
        days_passed = (datetime.now().date() - last_change).days
        percentage = min(100, max(0, (days_passed / days_total) * 100))
        return create_progress_bar(percentage)
    
    df['–ü—Ä–æ–≥—Ä–µ—Å—Å'] = df.apply(calculate_progress, axis=1)
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–§–∏–ª—å—Ç—Ä—ã', index=False)
        
        # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        workbook = writer.book
        worksheet = writer.sheets['–§–∏–ª—å—Ç—Ä—ã']
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width
    
    output.seek(0)
    return output

# ========== –û–°–¢–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ==========
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365,
    "–ø—É—Ä–∏—Ñ–∞–π–µ—Ä": 180
}

# –£–ë–†–ê–ù –õ–ò–ú–ò–¢ –ù–ê –§–ò–õ–¨–¢–†–´
MAX_FILTERS_PER_USER = 1000  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()
    waiting_confirmation = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()
    waiting_confirmation = State()

class DeleteFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_confirmation = State()

class ImportExportStates(StatesGroup):
    waiting_excel_file = State()

class GoogleSheetsStates(StatesGroup):
    waiting_sheet_id = State()
    waiting_sync_confirmation = State()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ==========
async def init_db():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await cur.execute('''
                CREATE TABLE IF NOT EXISTS filters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    filter_type TEXT,
                    location TEXT,
                    last_change DATE,
                    expiry_date DATE,
                    lifetime_days INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            await cur.execute('''CREATE INDEX IF NOT EXISTS idx_user_id ON filters(user_id)''')
            await cur.execute('''CREATE INDEX IF NOT EXISTS idx_expiry_date ON filters(expiry_date)''')
            await cur.execute('''CREATE INDEX IF NOT EXISTS idx_user_expiry ON filters(user_id, expiry_date)''')
            
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        if os.path.exists(config.DB_PATH):
            backup_name = f'filters_backup_critical_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            try:
                shutil.copy2(config.DB_PATH, backup_name)
                logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏–µ: {backup_name}")
            except Exception as backup_error:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {backup_error}")
        raise

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
async def error_handler(update: types.Update, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update {update}: {exception}")
        health_monitor.record_error()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if config.ADMIN_ID:
            error_traceback = "".join(traceback.format_exception(None, exception, exception.__traceback__))
            short_error = str(exception)[:1000]
            
            await bot.send_message(
                config.ADMIN_ID,
                f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n"
                f"üí• <b>–û—à–∏–±–∫–∞:</b> {short_error}\n"
                f"üì± <b>Update:</b> {update}\n\n"
                f"üîß <i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞–∑</i>",
                parse_mode='HTML'
            )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await update.message.answer(
                "üòï <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
            
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# ========== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========
async def send_personalized_reminders():
    """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            current_hour = datetime.now().hour
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" if 5 <= current_hour < 12 else "–î–æ–±—Ä—ã–π –¥–µ–Ω—å" if 12 <= current_hour < 18 else "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            
            async with get_db_connection() as conn:
                cur = await conn.cursor()
                await cur.execute('''
                    SELECT DISTINCT user_id FROM filters 
                    WHERE expiry_date BETWEEN date('now') AND date('now', '+7 days')
                    OR expiry_date <= date('now')
                ''')
                users_to_notify = await cur.fetchall()
                
                for user_row in users_to_notify:
                    user_id = user_row['user_id']
                    filters = await get_user_filters(user_id)
                    
                    expiring_filters = []
                    expired_filters = []
                    
                    for f in filters:
                        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
                        days_until = (expiry_date - datetime.now().date()).days
                        
                        if days_until <= 0:
                            expired_filters.append((f, days_until))
                        elif days_until <= 7:
                            expiring_filters.append((f, days_until))
                    
                    if expired_filters or expiring_filters:
                        message = f"{greeting}! üîî\n\n"
                        
                        if expired_filters:
                            message += "üî¥ <b>–ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´:</b>\n"
                            for f, days in expired_filters:
                                message += f"‚Ä¢ {f['filter_type']} ({f['location']}) - –ü–†–û–°–†–û–ß–ï–ù\n"
                            message += "\n"
                        
                        if expiring_filters:
                            message += "üü° <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n"
                            for f, days in expiring_filters:
                                message += f"‚Ä¢ {f['filter_type']} ({f['location']}) - {days} –¥–Ω–µ–π\n"
                        
                        message += f"\nüí´ –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(filters)}"
                        
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                            if expired_filters:
                                first_expired_id = expired_filters[0][0]['id']
                                await bot.send_message(
                                    user_id, 
                                    message, 
                                    parse_mode='HTML',
                                    reply_markup=get_reminder_keyboard(first_expired_id)
                                )
                            else:
                                await bot.send_message(user_id, message, parse_mode='HTML')
                                
                            await asyncio.sleep(0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await asyncio.sleep(23 * 60 * 60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 23 —á–∞—Å–∞
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(60 * 60)

# ========== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø ==========
async def health_monitoring_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    while True:
        try:
            health_status = await health_monitor.get_detailed_status()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            if health_status['message_count'] % 30 == 0:
                logging.info(f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health_status}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º health score
            if health_status['health_score'] < 80 and config.ADMIN_ID:
                await bot.send_message(
                    config.ADMIN_ID,
                    f"‚ö†Ô∏è <b>–ù–ò–ó–ö–ò–ô HEALTH SCORE</b>\n\n"
                    f"üìä –¢–µ–∫—É—â–∏–π score: {health_status['health_score']:.1f}%\n"
                    f"üí• –û—à–∏–±–æ–∫: {health_status['error_count']}\n"
                    f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {health_status['message_count']}\n"
                    f"üíæ Hit Rate –∫—ç—à–∞: {health_status['cache_hit_rate']:.1f}%",
                    parse_mode='HTML'
                )
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            if datetime.now().hour % 6 == 0 and datetime.now().minute < 5:
                cache_manager.clear_all_cache()
                logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞")
            
            await asyncio.sleep(60 * 30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60 * 5)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø ==========
async def show_filters_for_selection(message: types.Message, filters: List[Dict], action: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
        return
    
    text = f"üìã <b>–í–´–ë–ï–†–ò–¢–ï –§–ò–õ–¨–¢–† –î–õ–Ø {action.upper()}:</b>\n\n"
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - datetime.now().date()).days
        icon, status = get_status_icon_and_text(days_until)
        
        text += (
            f"{icon} <b>#{f['id']}</b> - {f['filter_type']}\n"
            f"üìç {f['location']} | üìÖ {format_date_nice(expiry_date)} | {status}\n\n"
        )
    
    await message.answer(
        text,
        reply_markup=get_filters_selection_keyboard(filters, action),
        parse_mode='HTML'
    )

# ========== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ==========
async def safe_sync_to_sheets(user_id: int, filters: List[Dict]) -> tuple[bool, str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        health_monitor.record_sync_operation()
        return await google_sync.sync_to_sheets(user_id, filters)
    except ImportError:
        return False, "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gspread google-auth"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ==========
@dp.callback_query(lambda c: c.data.startswith('replaced_'))
async def process_replaced_filter(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–º–µ–Ω–∏–ª'"""
    try:
        filter_id = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        success = await update_filter_in_db(
            filter_id, 
            user_id, 
            last_change=today.strftime('%Y-%m-%d'),
            expiry_date=(today + timedelta(days=180)).strftime('%Y-%m-%d')  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ 180 –¥–Ω–µ–π
        )
        
        if success:
            await callback_query.message.edit_text(
                f"‚úÖ <b>–§–ò–õ–¨–¢–† –û–ë–ù–û–í–õ–ï–ù!</b>\n\n"
                f"–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
                f"–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 180 –¥–Ω–µ–π.",
                parse_mode='HTML'
            )
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞", show_alert=True)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ replaced: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith('postpone_'))
async def process_postpone_filter(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é'"""
    try:
        filter_id = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id
        
        filter_data = await get_filter_by_id(filter_id, user_id)
        if not filter_data:
            await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        current_expiry = datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date()
        new_expiry = current_expiry + timedelta(days=7)
        
        success = await update_filter_in_db(
            filter_id, 
            user_id, 
            expiry_date=new_expiry.strftime('%Y-%m-%d')
        )
        
        if success:
            await callback_query.message.edit_text(
                f"üîÑ <b>–°–†–û–ö –ü–ï–†–ï–ù–ï–°–ï–ù!</b>\n\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {format_date_nice(new_expiry)}",
                parse_mode='HTML'
            )
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ä–æ–∫–∞", show_alert=True)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ postpone: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith('details_'))
async def process_details_filter(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏'"""
    try:
        filter_id = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id
        
        filter_data = await get_filter_by_id(filter_id, user_id)
        if not filter_data:
            await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        expiry_date = datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date()
        last_change = datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d').date()
        days_until = (expiry_date - datetime.now().date()).days
        icon, status = get_status_icon_and_text(days_until)
        
        details_text = (
            f"üîç <b>–î–ï–¢–ê–õ–ò –§–ò–õ–¨–¢–†–ê #{filter_id}</b>\n\n"
            f"{icon} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"üíß <b>–¢–∏–ø:</b> {filter_data['filter_type']}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {filter_data['location']}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞:</b> {format_date_nice(last_change)}\n"
            f"‚è∞ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data['lifetime_days']} –¥–Ω–µ–π\n"
            f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {format_filter_status_with_progress(filter_data)}"
        )
        
        await callback_query.message.edit_text(details_text, parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ details: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å rate limiting"""
    health_monitor.record_message(message.from_user.id)
    
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üì§ –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç Excel\n"
        "‚Ä¢ ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ÑπÔ∏è –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å", reply_markup=get_main_keyboard())
        return
    
    await state.clear()
    await message.answer(
        "‚ùå <b>–û–ü–ï–†–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê</b>",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
    
    await message.answer(
        "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    health_status = await health_monitor.get_detailed_status()
    stats = await get_all_users_stats()
    
    admin_text = (
        "üëë <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ üíß –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
        f"‚Ä¢ üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired_filters']}\n"
        f"‚Ä¢ üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {stats['expiring_soon']}\n\n"
        f"üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n"
        f"‚Ä¢ ‚è± –ê–ø—Ç–∞–π–º: {health_status['uptime']}\n"
        f"‚Ä¢ üì® –°–æ–æ–±—â–µ–Ω–∏–π: {health_status['message_count']}\n"
        f"‚Ä¢ üí• –û—à–∏–±–æ–∫: {health_status['error_count']}\n"
        f"‚Ä¢ üß† –ü–∞–º—è—Ç—å: {health_status['memory_usage']:.1f} MB\n"
        f"‚Ä¢ üíæ –†–∞–∑–º–µ—Ä –ë–î: {health_status['database_size'] / 1024 / 1024:.2f} MB\n"
        f"‚Ä¢ üè• Health: {health_status['health_score']:.1f}%\n"
        f"‚Ä¢ üí∞ Hit Rate –∫—ç—à–∞: {health_status['cache_hit_rate']:.1f}%\n\n"
        f"üîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
        f"/clear_cache - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à\n"
        f"/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    await message.answer(admin_text, parse_mode='HTML')

@dp.message(Command("backup"))
async def cmd_backup(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    if backup_database():
        await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

@dp.message(Command("clear_cache"))
async def cmd_clear_cache(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    if not is_admin(message.from_user.id):
        return
    
    cache_manager.clear_all_cache()
    await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")

@dp.message(F.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def cmd_my_filters(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    health_monitor.record_message(message.from_user.id)
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    today = datetime.now().date()
    response = ["üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´:</b>\n"]
    
    for i, f in enumerate(filters, 1):
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        icon, status = get_status_icon_and_text(days_until)
        
        response.append(
            f"{icon} <b>–§–∏–ª—å—Ç—Ä #{f['id']}</b>\n"
            f"üíß –¢–∏–ø: {f['filter_type']}\n"
            f"üìç –ú–µ—Å—Ç–æ: {f['location']}\n"
            f"üìÖ –ó–∞–º–µ–Ω–∞: {format_date_nice(datetime.strptime(str(f['last_change']), '%Y-%m-%d'))}\n"
            f"‚è∞ –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status} ({days_until} –¥–Ω–µ–π)\n"
            f"üìà {format_filter_status_with_progress(f)}\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
    response.append("\n" + create_expiry_infographic(filters))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    full_text = "\n".join(response)
    if len(full_text) > 4000:
        parts = [full_text[i:i+4000] for i in range(0, len(full_text), 4000)]
        for part in parts:
            await message.answer(part, parse_mode='HTML')
            await asyncio.sleep(0.1)
    else:
        await message.answer(full_text, parse_mode='HTML')

@dp.message(F.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    health_monitor.record_message(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = await get_user_filters(message.from_user.id)
    if len(filters) >= MAX_FILTERS_PER_USER:
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {MAX_FILTERS_PER_USER}\n"
            f"–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await state.set_state(FilterStates.waiting_filter_type)
    await message.answer(
        "üíß <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –§–ò–õ–¨–¢–†–ê</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π:",
        reply_markup=get_filter_type_keyboard(),
        parse_mode='HTML'
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô –î–û–ë–ê–í–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–ê ==========
@dp.message(FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    try:
        filter_type = sanitize_input(message.text)
        
        if filter_type == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        is_valid, error_msg = validate_filter_type(filter_type)
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:")
            return
        
        await state.update_data(filter_type=filter_type)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
        filter_type_lower = filter_type.lower()
        recommended_lifetime = DEFAULT_LIFETIMES.get(filter_type_lower, 180)
        await state.update_data(recommended_lifetime=recommended_lifetime)
        
        await state.set_state(FilterStates.waiting_location)
        await message.answer(
            f"üìç <b>–í–í–ï–î–ò–¢–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
            f"üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –û—Ñ–∏—Å –∏ —Ç.–¥.</i>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message(FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    try:
        location = sanitize_input(message.text)
        
        if location == "üîô –ù–∞–∑–∞–¥":
            await state.set_state(FilterStates.waiting_filter_type)
            await message.answer(
                "üíß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
                reply_markup=get_filter_type_keyboard()
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        is_valid, error_msg = validate_location(location)
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
            return
        
        await state.update_data(location=location)
        await state.set_state(FilterStates.waiting_change_date)
        
        await message.answer(
            "üìÖ <b>–í–í–ï–î–ò–¢–ï –î–ê–¢–£ –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–ú–ï–ù–´</b>\n\n"
            "üí° <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)</i>\n"
            "üìå <i>–ü—Ä–∏–º–µ—Ä: 15.01.2024 –∏–ª–∏ 15.01</i>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message(FilterStates.waiting_change_date)
async def process_change_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã"""
    try:
        date_str = message.text.strip()
        
        if date_str == "üîô –ù–∞–∑–∞–¥":
            await state.set_state(FilterStates.waiting_location)
            await message.answer(
                "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:",
                reply_markup=get_back_keyboard()
            )
            return
        
        try:
            change_date = validate_date(date_str)
        except ValueError as e:
            await message.answer(f"‚ùå {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:")
            return
        
        data = await state.get_data()
        recommended_lifetime = data.get('recommended_lifetime', 180)
        
        await state.update_data(
            last_change=change_date.strftime('%Y-%m-%d'),
            change_date_display=format_date_nice(change_date)
        )
        
        await state.set_state(FilterStates.waiting_lifetime)
        
        await message.answer(
            f"‚è±Ô∏è <b>–í–í–ï–î–ò–¢–ï –°–†–û–ö –°–õ–£–ñ–ë–´ (–í –î–ù–Ø–•)</b>\n\n"
            f"üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫ –¥–ª—è {data['filter_type']}: {recommended_lifetime} –¥–Ω–µ–π</i>\n"
            f"üìå <i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</i>",
            reply_markup=get_recommended_lifetime_keyboard(recommended_lifetime),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message(FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        lifetime_input = message.text.strip()
        data = await state.get_data()
        recommended_lifetime = data.get('recommended_lifetime', 180)
        
        if lifetime_input == "üîô –ù–∞–∑–∞–¥":
            await state.set_state(FilterStates.waiting_change_date)
            await message.answer(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π ({recommended_lifetime} –¥–Ω–µ–π)" in lifetime_input:
            lifetime_days = recommended_lifetime
        else:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            is_valid, error_msg, lifetime_days = validate_lifetime(lifetime_input)
            if not is_valid:
                await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:")
                return
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
        last_change = datetime.strptime(data['last_change'], '%Y-%m-%d').date()
        expiry_date = last_change + timedelta(days=lifetime_days)
        
        await state.update_data(
            lifetime_days=lifetime_days,
            expiry_date=expiry_date.strftime('%Y-%m-%d'),
            expiry_date_display=format_date_nice(expiry_date)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            "‚úÖ <b>–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï:</b>\n\n"
            f"üíß <b>–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b> {data['filter_type']}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data['location']}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {data['change_date_display']}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime_days} –¥–Ω–µ–π\n"
            f"‚è∞ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n\n"
            f"<i>–í—Å–µ –≤–µ—Ä–Ω–æ?</i>"
        )
        
        await state.set_state(FilterStates.waiting_confirmation)
        await message.answer(confirmation_text, 
                           reply_markup=get_confirmation_keyboard(),
                           parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.message(FilterStates.waiting_confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        response = message.text
        
        if response == "üîô –ù–∞–∑–∞–¥":
            await state.set_state(FilterStates.waiting_lifetime)
            data = await state.get_data()
            recommended_lifetime = data.get('recommended_lifetime', 180)
            
            await message.answer(
                f"‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:",
                reply_markup=get_recommended_lifetime_keyboard(recommended_lifetime)
            )
            return
        
        if response == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
            data = await state.get_data()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –ë–î
            success = await add_filter_to_db(
                user_id=message.from_user.id,
                filter_type=data['filter_type'],
                location=data['location'],
                last_change=data['last_change'],
                expiry_date=data['expiry_date'],
                lifetime_days=data['lifetime_days']
            )
            
            if success:
                await message.answer(
                    f"üéâ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
                    f"üíß {data['filter_type']}\n"
                    f"üìç {data['location']}\n"
                    f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {data['expiry_date_display']}",
                    reply_markup=get_main_keyboard(),
                    parse_mode='HTML'
                )
            else:
                await message.answer(
                    "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_main_keyboard(),
                    parse_mode='HTML'
                )
            
            await state.clear()
            
        elif response == "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
            await state.set_state(FilterStates.waiting_filter_type)
            await message.answer(
                "üíß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
                reply_markup=get_filter_type_keyboard()
            )
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=get_confirmation_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_main_keyboard())
        await state.clear()

@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def cmd_management(message: types.Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    health_monitor.record_message(message.from_user.id)
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</b>\n\n"
        "üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üìä –û–Ω–ª–∞–π–Ω Excel - —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏\n\n"
        "üìã <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>",
        reply_markup=get_management_keyboard(),
        parse_mode='HTML'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    today = datetime.now().date()
    filters_text = []
    
    for f in filters[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        icon, status = get_status_icon_and_text(days_until)
        
        filters_text.append(f"{icon} #{f['id']} - {f['filter_type']} ({f['location']})")
    
    if filters_text:
        await message.answer("\n".join(filters_text))
    
    if len(filters) > 10:
        await message.answer(f"üìù ... –∏ –µ—â–µ {len(filters) - 10} —Ñ–∏–ª—å—Ç—Ä–æ–≤")

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_edit_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    await state.set_state(EditFilterStates.waiting_filter_selection)
    await show_filters_for_selection(message, filters, "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_delete_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    await state.set_state(DeleteFilterStates.waiting_filter_selection)
    await show_filters_for_selection(message, filters, "—É–¥–∞–ª–µ–Ω–∏—è")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    health_monitor.record_message(message.from_user.id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = await cache_manager.get_user_stats(message.from_user.id)
    
    if user_stats['total'] == 0:
        await message.answer(
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    if is_admin(message.from_user.id):
        global_stats = await get_all_users_stats()
        stats_text = (
            f"üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {global_stats['total_users']}\n"
            f"üíß <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {global_stats['total_filters']}\n"
            f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {global_stats['expired_filters']}\n"
            f"üü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {global_stats['expiring_soon']}\n\n"
        )
    else:
        stats_text = ""
    
    progress_bar = create_progress_bar(user_stats['health_percentage'])
    
    stats_text += (
        f"üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        f"{progress_bar}\n"
        f"üíß <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {user_stats['total']}\n"
        f"üü¢ <b>–í –Ω–æ—Ä–º–µ:</b> {user_stats['normal']}\n"
        f"üü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {user_stats['expiring_soon']}\n"
        f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {user_stats['expired']}\n"
        f"üìà <b>–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –¥–æ –∑–∞–º–µ–Ω—ã:</b> {user_stats['avg_days_until_expiry']:.1f} –¥–Ω–µ–π\n"
        f"üí´ <b>–ò—Å–ø—Ä–∞–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {user_stats['health_percentage']:.1f}%"
    )
    
    await message.answer(stats_text, reply_markup=get_main_keyboard(), parse_mode='HTML')

@dp.message(F.text == "üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
async def cmd_import_export(message: types.Message):
    """–ú–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await message.answer(
        "üì§ <b>–ò–ú–ü–û–†–¢/–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>\n\n"
        "üíæ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ üìã –®–∞–±–ª–æ–Ω Excel - —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n"
        "‚Ä¢ ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets\n\n"
        "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:</i>",
        reply_markup=get_import_export_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def cmd_export_excel(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
    try:
        await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
        
        excel_file = await export_to_excel(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            types.BufferedInputFile(
                excel_file.getvalue(),
                filename=f"—Ñ–∏–ª—å—Ç—Ä—ã_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
            ),
            caption="üìä <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel</b>",
            parse_mode='HTML'
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞")

@dp.message(F.text == "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
async def cmd_import_excel(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Excel"""
    await state.set_state(ImportExportStates.waiting_excel_file)
    await message.answer(
        "üì• <b>–ò–ú–ü–û–†–¢ –ò–ó EXCEL</b>\n\n"
        "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª</b> —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n"
        "‚Ä¢ –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "‚Ä¢ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)\n\n"
        "üí° <i>–ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é</i>",
        reply_markup=get_cancel_keyboard(),
        parse_mode='HTML'
    )

@dp.message(ImportExportStates.waiting_excel_file, F.document)
async def process_excel_import(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        if not message.document:
            await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_name = message.document.file_name.lower()
        if not file_name.endswith(('.xlsx', '.xls')):
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)")
            return
        
        await message.answer("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"temp_import_{message.from_user.id}_{int(time.time())}.xlsx"
        await bot.download_file(file_path, temp_file)
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(temp_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', '–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                await message.answer(
                    f"‚ùå <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏:</b> {', '.join(missing_columns)}\n\n"
                    f"–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫.",
                    parse_mode='HTML'
                )
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            imported_count = 0
            errors = []
            
            for index, row in df.iterrows():
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    filter_type = str(row['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞']).strip()
                    location = str(row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ']).strip()
                    
                    if not filter_type or not location:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: –ü—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
                    try:
                        change_date = validate_date(str(row['–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã']))
                    except ValueError as e:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: {str(e)}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
                    try:
                        lifetime_days = int(row['–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)'])
                        if lifetime_days <= 0:
                            errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: –°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                            continue
                    except (ValueError, TypeError):
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã")
                        continue
                    
                    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    expiry_date = change_date + timedelta(days=lifetime_days)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                    success = await add_filter_to_db(
                        user_id=message.from_user.id,
                        filter_type=filter_type,
                        location=location,
                        last_change=change_date.strftime('%Y-%m-%d'),
                        expiry_date=expiry_date.strftime('%Y-%m-%d'),
                        lifetime_days=lifetime_days
                    )
                    
                    if success:
                        imported_count += 1
                    else:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                        
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index+2}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"‚úÖ <b>–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù</b>\n\n–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤"
            
            if errors:
                result_text += f"\n\n‚ùå –û—à–∏–±–∫–∏: {len(errors)}"
                if len(errors) <= 5:
                    result_text += "\n" + "\n".join(errors[:5])
                else:
                    result_text += f"\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∏–∑ {len(errors)} –æ—à–∏–±–æ–∫:\n" + "\n".join(errors[:5])
            
            await message.answer(result_text, parse_mode='HTML')
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file):
                os.remove(temp_file)
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        await state.clear()

@dp.message(F.text == "üìã –®–∞–±–ª–æ–Ω Excel")
async def cmd_excel_template(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ Excel"""
    try:
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω Excel
        df = pd.DataFrame(columns=['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', '–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        examples = [
            ['–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10', '–ö—É—Ö–Ω—è', '15.01.2024', 180],
            ['–ì–µ–π–∑–µ—Ä', '–í–∞–Ω–Ω–∞—è', '20.02.2024', 365],
            ['–ê–∫–≤–∞—Ñ–æ—Ä', '–û—Ñ–∏—Å', '10.03.2024', 365]
        ]
        
        for example in examples:
            df.loc[len(df)] = example
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–®–∞–±–ª–æ–Ω', index=False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            workbook = writer.book
            worksheet = writer.sheets['–®–∞–±–ª–æ–Ω']
            
            # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        output.seek(0)
        
        await message.answer_document(
            types.BufferedInputFile(
                output.getvalue(),
                filename="—à–∞–±–ª–æ–Ω_–∏–º–ø–æ—Ä—Ç–∞_—Ñ–∏–ª—å—Ç—Ä–æ–≤.xlsx"
            ),
            caption="üìã <b>–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
                   "üí° <i>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é</i>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")

@dp.message(F.text == "‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
async def cmd_google_sheets(message: types.Message):
    """–ú–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets"""
    sync_status = "üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞" if google_sync.is_configured() else "üî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    auto_sync_status = "üü¢ –í–ö–õ" if google_sync.auto_sync else "üî¥ –í–´–ö–õ"
    
    await message.answer(
        f"‚òÅÔ∏è <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {sync_status}\n"
        f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {auto_sync_status}\n\n"
        f"üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É\n"
        f"‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n"
        f"‚Ä¢ üìä –°—Ç–∞—Ç—É—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        reply_markup=get_sync_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets")
async def cmd_sync_to_sheets(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    if not google_sync.is_configured():
        await message.answer(
            "‚ùå <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.",
            parse_mode='HTML'
        )
        return
    
    await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...")
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return
    
    success, result_message = await safe_sync_to_sheets(message.from_user.id, filters)
    
    if success:
        await message.answer(f"‚úÖ {result_message}")
    else:
        await message.answer(f"‚ùå {result_message}")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô ==========
@dp.message(FilterStates)
async def handle_filter_states_errors(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Ñ–∏–ª—å—Ç—Ä–∞"""
    current_state = await state.get_state()
    state_name = current_state.split(':')[-1] if current_state else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ"
    
    await message.answer(
        f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state_name}</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        parse_mode='HTML'
    )

@dp.message(EditFilterStates)
async def handle_edit_states_errors(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await message.answer(
        "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –ù–∞–∑–∞–¥'",
        parse_mode='HTML'
    )

@dp.message(DeleteFilterStates)
async def handle_delete_states_errors(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —É–¥–∞–ª–µ–Ω–∏—è"""
    await message.answer(
        "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –ù–∞–∑–∞–¥'",
        parse_mode='HTML'
    )

@dp.message(ImportExportStates)
async def handle_import_export_states_errors(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await message.answer(
        "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∞'",
        parse_mode='HTML'
    )

# ========== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        await check_and_update_schema()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(send_personalized_reminders())
        asyncio.create_task(health_monitoring_task())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        dp.errors.register(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if config.ADMIN_ID:
            try:
                await bot.send_message(config.ADMIN_ID, f"üö® –ë–æ—Ç —É–ø–∞–ª: {e}")
            except:
                pass
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
