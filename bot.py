import logging
import logging.config
import os
import asyncio
import shutil
import re
import aiosqlite
import pandas as pd
import io
from datetime import datetime, timedelta
from contextlib import asynccontextmanager
from typing import Dict, List, Optional, Callable, Any, Awaitable, Union
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram import BaseMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
    exit(1)

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
    builder.button(text="‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.button(text="üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_add_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ûï –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_filter_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10")
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    builder.button(text="–ì–µ–π–∑–µ—Ä")
    builder.button(text="–ê–∫–≤–∞—Ñ–æ—Ä")
    builder.button(text="–ü—É—Ä–∏—Ñ–∞–π–µ—Ä")
    builder.button(text="–î—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ")
    builder.button(text="‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üìä –û–Ω–ª–∞–π–Ω Excel")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_import_export_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
    builder.button(text="üìã –®–∞–±–ª–æ–Ω Excel")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)

def get_edit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üíß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞")
    builder.button(text="üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    builder.button(text="üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã")
    builder.button(text="‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_status_icon_and_text(days_until_expiry: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
    elif days_until_expiry <= 7:
        return "üü°", "–°–ö–û–†–û –ò–°–¢–ï–ß–ï–¢"
    elif days_until_expiry <= 30:
        return "üü†", "–í–ù–ò–ú–ê–ù–ò–ï"
    else:
        return "üü¢", "–ù–û–†–ú–ê"

def format_date_nice(date):
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    return date.strftime("%d.%m.%Y")

def create_expiry_infographic(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º"""
    today = datetime.now().date()
    expired = 0
    expiring_soon = 0
    normal = 0
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        
        if days_until <= 0:
            expired += 1
        elif days_until <= 7:
            expiring_soon += 1
        else:
            normal += 1
    
    return (
        f"üìä <b>–°–¢–ê–¢–£–° –§–ò–õ–¨–¢–†–û–í:</b>\n"
        f"üü¢ –ù–æ—Ä–º–∞: {normal}\n"
        f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {expiring_soon}\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired}"
    )

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == ADMIN_ID

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
@asynccontextmanager
async def get_db_connection():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = await aiosqlite.connect('filters.db')
    conn.row_factory = aiosqlite.Row
    try:
        yield conn
        await conn.commit()
    except Exception as e:
        await conn.rollback()
        raise e
    finally:
        await conn.close()

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_connection() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS filters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    filter_type TEXT,
                    location TEXT,
                    last_change DATE,
                    expiry_date DATE,
                    lifetime_days INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

async def get_user_filters(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_db_connection() as conn:
            cursor = await conn.execute(
                "SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", 
                (user_id,)
            )
            rows = await cursor.fetchall()
            return [dict(row) for row in rows]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return []

async def add_filter_to_db(user_id: int, filter_type: str, location: str, last_change: str, expiry_date: str, lifetime_days: int) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    try:
        async with get_db_connection() as conn:
            await conn.execute('''
                INSERT INTO filters (user_id, filter_type, location, last_change, expiry_date, lifetime_days)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, filter_type, location, last_change, expiry_date, lifetime_days))
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        return False

async def get_all_users_stats() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        async with get_db_connection() as conn:
            cursor = await conn.execute('''
                SELECT 
                    COUNT(DISTINCT user_id) as total_users,
                    COUNT(*) as total_filters,
                    SUM(CASE WHEN expiry_date <= date('now') THEN 1 ELSE 0 END) as expired_filters,
                    SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as expiring_soon
                FROM filters
            ''')
            result = await cursor.fetchone()
            return dict(result) if result else {
                'total_users': 0, 
                'total_filters': 0, 
                'expired_filters': 0, 
                'expiring_soon': 0
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}

# ========== –í–ê–õ–ò–î–ê–¶–ò–Ø ==========
def validate_filter_type(filter_type: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    if not filter_type or len(filter_type.strip()) == 0:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(filter_type) > 100:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
    return True, "OK"

def validate_location(location: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    if not location or len(location.strip()) == 0:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(location) > 50:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
    return True, "OK"

def validate_lifetime(lifetime: str) -> tuple[bool, str, int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(lifetime)
        if days <= 0:
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", 0
        if days > 3650:
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ª–µ—Ç", 0
        return True, "OK", days
    except ValueError:
        return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", 0

def validate_date(date_str: str) -> datetime.date:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
    date_str = date_str.strip()
    date_str = re.sub(r'[/\-]', '.', date_str)
    
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d.%m']
    
    for fmt in formats:
        try:
            if fmt == '%d.%m':
                date_obj = datetime.strptime(date_str, fmt).date()
                date_obj = date_obj.replace(year=datetime.now().year)
            else:
                date_obj = datetime.strptime(date_str, fmt).date()
            
            today = datetime.now().date()
            if date_obj > today:
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            if date_obj < today - timedelta(days=365*5):
                raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
                
            return date_obj
        except ValueError:
            continue
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú")

# ========== STATES ==========
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()
    waiting_confirmation = State()

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==========
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üì§ –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç Excel\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä - –ü–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "2. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ä–æ–∫–∞–º–∏ –∑–∞–º–µ–Ω—ã\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ==========
@dp.message(F.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def cmd_my_filters(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∏–ª—å—Ç—Ä—ã")
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    today = datetime.now().date()
    response = "üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        last_change = datetime.strptime(str(f['last_change']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        icon, status = get_status_icon_and_text(days_until_expiry)
        
        response += (
            f"{icon} <b>#{f['id']} {f['filter_type']}</b>\n"
            f"üìç {f['location']}\n"
            f"üìÖ –ó–∞–º–µ–Ω–µ–Ω: {format_date_nice(last_change)}\n"
            f"üóìÔ∏è –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n"
            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_until_expiry}</b>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        )
    
    infographic = create_expiry_infographic(filters)
    await message.answer(response, parse_mode='HTML')
    await message.answer(infographic, parse_mode='HTML', reply_markup=get_main_keyboard())

@dp.message(F.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add_filter(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –º–µ–Ω—é"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞")
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –≤ —Å–∏—Å—Ç–µ–º—É</i>",
        reply_markup=get_add_filter_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚ûï –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add_single_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
    await state.set_state(FilterStates.waiting_filter_type)
    await message.answer(
        "üíß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</i>",
        reply_markup=get_filter_type_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def cmd_manage_filters(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_management_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    stats = await get_all_users_stats()
    user_filters = await get_user_filters(message.from_user.id)
    
    response = (
        "üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        f"üì¶ <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(user_filters)}\n\n"
    )
    
    if is_admin(message.from_user.id):
        global_stats = (
            f"üëë <b>–ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üì¶ –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
            f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired_filters']}\n"
            f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {stats['expiring_soon']}"
        )
        response += global_stats
    
    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

@dp.message(F.text == "üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
async def cmd_import_export(message: types.Message):
    """–ú–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await message.answer(
        "üì§ <b>–ò–ú–ü–û–†–¢/–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>\n\n"
        "üíæ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ üìã –®–∞–±–ª–æ–Ω Excel - —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n\n"
        "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å Excel —Ñ–∞–π–ª–∞–º–∏</i>",
        reply_markup=get_import_export_keyboard(),
        parse_mode='HTML'
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–ê ==========
@dp.message(FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>", reply_markup=get_add_filter_keyboard(), parse_mode='HTML')
        return
    
    filter_type = message.text.strip()
    
    if filter_type == "–î—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞":
        await message.answer(
            "üíß <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—å–µ—Ä, –ê—Ç–æ–ª–ª, –ë—Ä–∏—Ç–∞ –∏ —Ç.–¥.</i>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        return
    
    is_valid, error_msg = validate_filter_type(filter_type)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –µ—â–µ —Ä–∞–∑:", reply_markup=get_filter_type_keyboard())
        return
    
    await state.update_data(filter_type=filter_type)
    await state.set_state(FilterStates.waiting_location)
    
    await message.answer(
        "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π –∏ —Ç.–¥.</i>",
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_filter_type)
        await message.answer(
            "üíß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            reply_markup=get_filter_type_keyboard(),
            parse_mode='HTML'
        )
        return
    
    location = message.text.strip()
    
    is_valid, error_msg = validate_location(location)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑:", reply_markup=get_back_keyboard())
        return
    
    await state.update_data(location=location)
    await state.set_state(FilterStates.waiting_change_date)
    
    await message.answer(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã:</b>\n\n"
        "üí° <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)</i>\n"
        "üìù <i>–ü—Ä–∏–º–µ—Ä: 15.09.23 –∏–ª–∏ 15.09</i>",
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_change_date)
async def process_change_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_location)
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        return
    
    try:
        change_date = validate_date(message.text)
        await state.update_data(change_date=change_date)
        await state.set_state(FilterStates.waiting_lifetime)
        
        await message.answer(
            "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞ (–≤ –¥–Ω—è—Ö):</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 180 (6 –º–µ—Å—è—Ü–µ–≤) –∏–ª–∏ 365 (1 –≥–æ–¥)</i>\n"
            "üìù <i>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏: –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–µ - 180 –¥–Ω–µ–π, –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ - 365 –¥–Ω–µ–π</i>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:", reply_markup=get_back_keyboard())

@dp.message(FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_change_date)
        await message.answer(
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã:</b>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        return
    
    user_data = await state.get_data()
    
    is_valid, error_msg, lifetime = validate_lifetime(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
        return
    
    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
    change_date = user_data['change_date']
    expiry_date = change_date + timedelta(days=lifetime)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        lifetime=lifetime,
        expiry_date=expiry_date
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(FilterStates.waiting_confirmation)
    
    await message.answer(
        f"üîç <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–ê–ù–ù–´–•</b>\n\n"
        f"üíß <b>–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b> {user_data['filter_type']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {user_data['location']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(change_date)}\n"
        f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
        f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n\n"
        f"‚úÖ <b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b>",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    if message.text == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        user_data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        success = await add_filter_to_db(
            user_id=message.from_user.id,
            filter_type=user_data['filter_type'],
            location=user_data['location'],
            last_change=user_data['change_date'].strftime('%Y-%m-%d'),
            expiry_date=user_data['expiry_date'].strftime('%Y-%m-%d'),
            lifetime_days=user_data['lifetime']
        )
        
        if success:
            await message.answer(
                f"‚úÖ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
                f"üíß <b>–¢–∏–ø:</b> {user_data['filter_type']}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ:</b> {user_data['location']}\n"
                f"üìÖ <b>–ó–∞–º–µ–Ω–∞:</b> {format_date_nice(user_data['change_date'])}\n"
                f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(user_data['expiry_date'])}\n"
                f"‚è±Ô∏è <b>–°—Ä–æ–∫:</b> {user_data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üí´ <i>–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ä–æ–∫–æ–º –∑–∞–º–µ–Ω—ã —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞</i>",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
        
    elif message.text == "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
        await state.set_state(FilterStates.waiting_filter_type)
        await message.answer(
            "üîÑ <b>–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ</b>\n\n"
            "üíß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            reply_markup=get_filter_type_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>",
            reply_markup=get_confirmation_keyboard(),
            parse_mode='HTML'
        )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ù–ê–ó–ê–î ==========
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    
    await message.answer(
        "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not API_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
