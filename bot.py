import logging
import logging.config
import sqlite3
import os
import asyncio
import shutil
import traceback
import re
import sys
import aiosqlite
import json
import pandas as pd
import io
from datetime import datetime, timedelta
from contextlib import asynccontextmanager
from typing import Dict, List, Optional, Callable, Any, Awaitable, Union
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram import BaseMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        self.ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))
        self.GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        self.GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.DB_PATH = 'filters.db'
        self.BACKUP_ENABLED = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
        self.RATE_LIMIT_MAX_REQUESTS = 10
        self.RATE_LIMIT_WINDOW = 30
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.REMINDER_CHECK_INTERVAL = 24 * 60 * 60  # 24 —á–∞—Å–∞
        self.EARLY_REMINDER_DAYS = 7
        
    def validate(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.API_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –†–ê–°–®–ò–†–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
def setup_logging():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.config.dictConfig({
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'detailed': {
                'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s - [%(filename)s:%(lineno)d]'
            },
            'simple': {
                'format': '%(levelname)s - %(message)s'
            }
        },
        'handlers': {
            'file': {
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': 'bot.log',
                'maxBytes': 10*1024*1024,  # 10MB
                'backupCount': 5,
                'formatter': 'detailed',
                'encoding': 'utf-8'
            },
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            }
        },
        'loggers': {
            '': {
                'handlers': ['file', 'console'],
                'level': 'INFO'
            }
        }
    })

setup_logging()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
    builder.button(text="‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.button(text="üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_add_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ûï –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_filter_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10")
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    builder.button(text="–ì–µ–π–∑–µ—Ä")
    builder.button(text="–ê–∫–≤–∞—Ñ–æ—Ä")
    builder.button(text="–ü—É—Ä–∏—Ñ–∞–π–µ—Ä")
    builder.button(text="–î—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ")
    builder.button(text="‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üìä –û–Ω–ª–∞–π–Ω Excel")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_import_export_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
    builder.button(text="üìã –®–∞–±–ª–æ–Ω Excel")
    builder.button(text="‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_sync_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    builder.button(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_sync_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã")
    builder.button(text="üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–ö–õ")
    builder.button(text="‚è∏Ô∏è –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–´–ö–õ")
    builder.button(text="üóëÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)

def get_edit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üíß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞")
    builder.button(text="üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    builder.button(text="üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã")
    builder.button(text="‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_recommended_lifetime_keyboard(default_lifetime: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º —Å—Ä–æ–∫–æ–º —Å–ª—É–∂–±—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text=f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π ({default_lifetime} –¥–Ω–µ–π)")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_filters_selection_keyboard(filters: List[Dict], action: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    for f in filters:
        builder.button(text=f"#{f['id']} - {f['filter_type']} ({f['location']})")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_status_icon_and_text(days_until_expiry: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
    elif days_until_expiry <= 7:
        return "üü°", "–°–ö–û–†–û –ò–°–¢–ï–ß–ï–¢"
    elif days_until_expiry <= 30:
        return "üü†", "–í–ù–ò–ú–ê–ù–ò–ï"
    else:
        return "üü¢", "–ù–û–†–ú–ê"

def format_date_nice(date):
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    return date.strftime("%d.%m.%Y")

def create_expiry_infographic(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º"""
    today = datetime.now().date()
    expired = 0
    expiring_soon = 0
    normal = 0
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        
        if days_until <= 0:
            expired += 1
        elif days_until <= 7:
            expiring_soon += 1
        else:
            normal += 1
    
    return (
        f"üìä <b>–°–¢–ê–¢–£–° –§–ò–õ–¨–¢–†–û–í:</b>\n"
        f"üü¢ –ù–æ—Ä–º–∞: {normal}\n"
        f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {expiring_soon}\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired}"
    )

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_ID

def backup_database() -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if os.path.exists(config.DB_PATH):
            backup_name = f'filters_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            shutil.copy2(config.DB_PATH, backup_name)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    return False

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ==========
def sanitize_input(text: str) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return text
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = re.sub(r'[<>&\"\']', '', text)
    return sanitized.strip()

def validate_user_id(user_id: int) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return isinstance(user_id, int) and user_id > 0

async def check_user_permission(user_id: int, filter_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–∏–ª—å—Ç—Ä"""
    try:
        filter_data = await get_filter_by_id(filter_id, user_id)
        return filter_data is not None
    except Exception:
        return False

def validate_filter_type(filter_type: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_type = sanitize_input(filter_type)
    
    if not filter_type or len(filter_type.strip()) == 0:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(filter_type) > 100:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[<>{}[\]]', filter_type):
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, "OK"

def validate_location(location: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    location = sanitize_input(location)
    
    if not location or len(location.strip()) == 0:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(location) > 50:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if re.search(r'[<>{}[\]]', location):
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, "OK"

def validate_lifetime(lifetime: str) -> tuple[bool, str, int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(lifetime)
        if days <= 0:
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", 0
        if days > 3650:  # 10 –ª–µ—Ç
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ª–µ—Ç", 0
        return True, "OK", days
    except ValueError:
        return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–¥–Ω–∏)", 0

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –†–ï–¢–†–ò –ú–ï–•–ê–ù–ò–ó–ú–´ ==========
async def execute_with_retry(func: Callable, max_retries: int = 3, delay: float = 1.0, *args, **kwargs):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if attempt == max_retries - 1:
                raise e
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
            await asyncio.sleep(delay)

# ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ==========
class GoogleSheetsSync:
    def __init__(self):
        self.credentials = None
        self.sheet_id = None
        self.auto_sync = False
        self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('sheets_settings.json'):
                with open('sheets_settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    self.sheet_id = settings.get('sheet_id')
                    self.auto_sync = settings.get('auto_sync', False)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            settings = {
                'sheet_id': self.sheet_id,
                'auto_sync': self.auto_sync
            }
            with open('sheets_settings.json', 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Sheets: {e}")
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return bool(self.sheet_id and config.GOOGLE_SHEETS_CREDENTIALS)
    
    async def initialize_credentials(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google"""
        try:
            if not config.GOOGLE_SHEETS_CREDENTIALS:
                return False
            
            # –ü–∞—Ä—Å–∏–º JSON credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            credentials_info = json.loads(config.GOOGLE_SHEETS_CREDENTIALS)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            try:
                import gspread
                from google.oauth2.service_account import Credentials
            except ImportError:
                logging.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ gspread –∏–ª–∏ google-auth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            # –°–æ–∑–¥–∞–µ–º credentials —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ scope
            scope = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive.file'
            ]
            self.credentials = Credentials.from_service_account_info(credentials_info, scopes=scope)
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            return False
    
    async def create_new_spreadsheet(self, gc, title: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            spreadsheet = gc.create(title)
            
            # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
            spreadsheet.share(None, perm_type='anyone', role='writer')
            
            return spreadsheet
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None
    
    async def sync_to_sheets(self, user_id: int, user_filters: List[Dict]) -> tuple[bool, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
        try:
            if not self.is_configured():
                return False, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            
            if not self.credentials:
                if not await self.initialize_credentials():
                    return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            
            import gspread
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            gc = gspread.authorize(self.credentials)
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É
                sheet = gc.open_by_key(self.sheet_id)
            except gspread.exceptions.SpreadsheetNotFound:
                return False, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã."
            except gspread.exceptions.APIError as e:
                error_msg = str(e)
                if "PERMISSION_DENIED" in error_msg:
                    return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ."
                elif "NOT_FOUND" in error_msg:
                    return False, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã."
                else:
                    return False, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: {error_msg}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            worksheet_name = f"User_{user_id}"
            try:
                worksheet = sheet.worksheet(worksheet_name)
            except gspread.exceptions.WorksheetNotFound:
                try:
                    worksheet = sheet.add_worksheet(title=worksheet_name, rows=100, cols=10)
                except Exception as e:
                    return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {str(e)}"
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ['ID', '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', 
                          '–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)', '–ì–æ–¥–µ–Ω –¥–æ', '–°—Ç–∞—Ç—É—Å', '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π']
                try:
                    worksheet.append_row(headers)
                except Exception as e:
                    return False, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {str(e)}"
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            try:
                if worksheet.row_count > 1:
                    worksheet.delete_rows(2, worksheet.row_count)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            today = datetime.now().date()
            rows = []
            
            for f in user_filters:
                try:
                    expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
                    last_change = datetime.strptime(str(f['last_change']), '%Y-%m-%d').date()
                    days_until = (expiry_date - today).days
                    
                    icon, status = get_status_icon_and_text(days_until)
                    
                    row = [
                        f['id'],
                        f['filter_type'],
                        f['location'],
                        format_date_nice(last_change),
                        f['lifetime_days'],
                        format_date_nice(expiry_date),
                        status,
                        days_until
                    ]
                    rows.append(row)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞ {f['id']}: {e}")
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if rows:
                try:
                    worksheet.append_rows(rows)
                except Exception as e:
                    return False, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            try:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
                worksheet.format('A1:H1', {'textFormat': {'bold': True}})
                
                # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                worksheet.columns_auto_resize(0, 7)
            except Exception as format_error:
                logging.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {format_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            return True, f"–£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} —Ñ–∏–ª—å—Ç—Ä–æ–≤"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    async def sync_from_sheets(self, user_id: int) -> tuple[bool, str, int]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            if not self.is_configured():
                return False, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", 0
            
            if not self.credentials:
                if not await self.initialize_credentials():
                    return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API", 0
            
            import gspread
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            gc = gspread.authorize(self.credentials)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            try:
                sheet = gc.open_by_key(self.sheet_id)
            except gspread.exceptions.SpreadsheetNotFound:
                return False, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 0
            except gspread.exceptions.APIError as e:
                return False, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: {str(e)}", 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            worksheet_name = f"User_{user_id}"
            try:
                worksheet = sheet.worksheet(worksheet_name)
            except gspread.exceptions.WorksheetNotFound:
                return False, "–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 0
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                data = worksheet.get_all_records()
            except Exception as e:
                return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 0
            
            if not data:
                return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            imported_count = 0
            errors = []
            
            for index, row in enumerate(data, start=2):
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if not row.get('–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞') or not row.get('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'):
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
                    filter_type = str(row['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞']).strip()
                    is_valid_type, error_msg = validate_filter_type(filter_type)
                    if not is_valid_type:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {error_msg}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    location = str(row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ']).strip()
                    is_valid_loc, error_msg = validate_location(location)
                    if not is_valid_loc:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {error_msg}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
                    date_str = str(row.get('–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', ''))
                    if not date_str:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã")
                        continue
                    
                    try:
                        change_date = validate_date(date_str)
                    except ValueError as e:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {str(e)}")
                        continue
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
                    lifetime = row.get('–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)', 0)
                    is_valid_lt, error_msg, lifetime_days = validate_lifetime(str(lifetime))
                    if not is_valid_lt:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: {error_msg}")
                        continue
                    
                    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    expiry_date = change_date + timedelta(days=lifetime_days)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                    success = await add_filter_to_db(
                        user_id=user_id,
                        filter_type=filter_type,
                        location=location,
                        last_change=change_date.strftime('%Y-%m-%d'),
                        expiry_date=expiry_date.strftime('%Y-%m-%d'),
                        lifetime_days=lifetime_days
                    )
                    
                    if success:
                        imported_count += 1
                    else:
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                        
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
            
            message = f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤"
            if errors:
                message += f"\n–û—à–∏–±–∫–∏: {len(errors)}"
            
            return True, message, imported_count
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Google Sheets: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}", 0

    async def test_connection(self) -> tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if not self.is_configured():
                return False, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
            
            if not self.credentials:
                if not await self.initialize_credentials():
                    return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API"
            
            import gspread
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            gc = gspread.authorize(self.credentials)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É
            try:
                sheet = gc.open_by_key(self.sheet_id)
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤
                worksheets = sheet.worksheets()
                return True, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(worksheets)}"
            except gspread.exceptions.SpreadsheetNotFound:
                return False, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã."
            except gspread.exceptions.APIError as e:
                error_msg = str(e)
                if "PERMISSION_DENIED" in error_msg:
                    return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ."
                else:
                    return False, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {error_msg}"
                    
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
google_sync = GoogleSheetsSync()

# ========== –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø ==========
class EnhancedHealthMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.message_count = 0
        self.error_count = 0
        self.user_actions = {}
        self.db_operations = 0
        self.sync_operations = 0
        self.user_sessions = {}
    
    def record_message(self, user_id: int):
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.message_count += 1
        if user_id not in self.user_actions:
            self.user_actions[user_id] = 0
        self.user_actions[user_id] += 1
    
    def record_error(self):
        """–ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏"""
        self.error_count += 1
    
    def record_db_operation(self):
        """–ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î"""
        self.db_operations += 1
    
    def record_sync_operation(self):
        """–ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.sync_operations += 1
    
    async def get_health_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time
        active_users = len([uid for uid, count in self.user_actions.items() if count > 0])
        
        health_score = (self.message_count - self.error_count) / max(1, self.message_count) * 100
        
        return {
            'uptime': str(uptime),
            'message_count': self.message_count,
            'error_count': self.error_count,
            'active_users': active_users,
            'health_score': health_score
        }
    
    async def get_detailed_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        basic_status = await self.get_health_status()
        basic_status.update({
            'db_operations': self.db_operations,
            'sync_operations': self.sync_operations,
            'active_sessions': len(self.user_sessions),
            'database_size': await self.get_database_size(),
            'memory_usage': self.get_memory_usage()
        })
        return basic_status
    
    async def get_database_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(config.DB_PATH):
                return os.path.getsize(config.DB_PATH)
            return 0
        except:
            return 0
    
    def get_memory_usage(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024  # MB
        except ImportError:
            return 0

health_monitor = EnhancedHealthMonitor()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: RATE LIMITING ==========
class RateLimiter:
    def __init__(self, max_requests: int = 5, window: int = 30):
        self.max_requests = max_requests
        self.window = window
        self.user_requests = {}
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        now = datetime.now()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if (now - req_time).seconds < self.window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.max_requests:
            return False
        
        self.user_requests[user_id].append(now)
        return True

rate_limiter = RateLimiter(max_requests=config.RATE_LIMIT_MAX_REQUESTS, window=config.RATE_LIMIT_WINDOW)

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: MIDDLEWARE –î–õ–Ø RATE LIMITING ==========
class RateLimitMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
            
            if not rate_limiter.is_allowed(user_id):
                if hasattr(event, 'answer'):
                    await event.answer("‚è≥ <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥.", parse_mode='HTML')
                return
            
            health_monitor.record_message(user_id)
        
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot = Bot(
    token=config.API_TOKEN,
    default=DefaultBotProperties(parse_mode='HTML')
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.update.outer_middleware(RateLimitMiddleware())

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
@asynccontextmanager
async def get_db_connection():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = await aiosqlite.connect(config.DB_PATH)
    conn.row_factory = aiosqlite.Row
    try:
        yield conn
        await conn.commit()
    except Exception as e:
        await conn.rollback()
        raise e
    finally:
        await conn.close()

async def get_user_filters(user_id: int) -> List[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", (user_id,))
            rows = await cur.fetchall()
            health_monitor.record_db_operation()
            return [dict(row) for row in rows]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        health_monitor.record_error()
        return []

async def get_filter_by_id(filter_id: int, user_id: int) -> Optional[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("SELECT * FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
            result = await cur.fetchone()
            health_monitor.record_db_operation()
            return dict(result) if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}: {e}")
        health_monitor.record_error()
        return None

async def get_all_users_stats() -> Dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute('''SELECT COUNT(DISTINCT user_id) as total_users, 
                                  COUNT(*) as total_filters,
                                  SUM(CASE WHEN expiry_date <= date('now') THEN 1 ELSE 0 END) as expired_filters,
                                  SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as expiring_soon
                           FROM filters''')
            result = await cur.fetchone()
            health_monitor.record_db_operation()
            return dict(result) if result else {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        health_monitor.record_error()
        return {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}

async def add_filter_to_db(user_id: int, filter_type: str, location: str, last_change: str, expiry_date: str, lifetime_days: int) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute('''INSERT INTO filters 
                              (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                              VALUES (?, ?, ?, ?, ?, ?)''',
                              (user_id, filter_type, location, last_change, expiry_date, lifetime_days))
            
            health_monitor.record_db_operation()
            
            # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            if google_sync.auto_sync and google_sync.is_configured():
                filters = await get_user_filters(user_id)
                asyncio.create_task(google_sync.sync_to_sheets(user_id, filters))
            
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        health_monitor.record_error()
        return False

async def update_filter_in_db(filter_id: int, user_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    try:
        if not kwargs:
            return False
        
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            set_clause = ", ".join([f"{key} = ?" for key in kwargs.keys()])
            values = list(kwargs.values())
            values.extend([filter_id, user_id])
            
            await cur.execute(f"UPDATE filters SET {set_clause} WHERE id = ? AND user_id = ?", values)
            
            health_monitor.record_db_operation()
            
            # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if google_sync.auto_sync and google_sync.is_configured():
                filters = await get_user_filters(user_id)
                asyncio.create_task(google_sync.sync_to_sheets(user_id, filters))
            
            return cur.rowcount > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}: {e}")
        health_monitor.record_error()
        return False

async def delete_filter_from_db(filter_id: int, user_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –ë–î"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
            
            health_monitor.record_db_operation()
            
            # –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            if google_sync.auto_sync and google_sync.is_configured():
                filters = await get_user_filters(user_id)
                asyncio.create_task(google_sync.sync_to_sheets(user_id, filters))
            
            return cur.rowcount > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_id}: {e}")
        health_monitor.record_error()
        return False

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–¢ ==========
def try_auto_correct_date(date_str: str) -> Optional[datetime.date]:
    """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã"""
    clean = re.sub(r'\D', '', date_str)
    
    if len(clean) == 6:  # –î–î–ú–ú–ì–ì
        try:
            day, month, year = int(clean[:2]), int(clean[2:4]), int(clean[4:])
            if year < 100:
                year += 2000 if year < 50 else 1900
            return datetime(year, month, day).date()
        except ValueError:
            pass
    elif len(clean) == 8:  # –î–î–ú–ú–ì–ì–ì–ì
        try:
            day, month, year = int(clean[:2]), int(clean[2:4]), int(clean[4:])
            return datetime(year, month, day).date()
        except ValueError:
            pass
    
    return None

def validate_date(date_str: str) -> datetime.date:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
    date_str = date_str.strip()
    
    # –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    date_str = re.sub(r'[/\-]', '.', date_str)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
    date_str = re.sub(r'[^\d\.]', '', date_str)
    
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d%m%y', '%d%m%Y', '%d.%m', '%d%m']
    
    for fmt in formats:
        try:
            if fmt in ['%d.%m', '%d%m']:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                date_obj = datetime.strptime(date_str, fmt).date()
                date_obj = date_obj.replace(year=datetime.now().year)
            elif fmt in ['%d%m%y', '%d%m%Y']:
                if len(date_str) in [6, 8]:
                    date_obj = datetime.strptime(date_str, fmt).date()
                else:
                    continue
            else:
                date_obj = datetime.strptime(date_str, fmt).date()
            
            today = datetime.now().date()
            max_past = today - timedelta(days=5*365)
            max_future = today + timedelta(days=1)
            
            if date_obj > max_future:
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            if date_obj < max_past:
                raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–±–æ–ª–µ–µ 5 –ª–µ—Ç)")
                
            return date_obj
        except ValueError:
            continue
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    corrected = try_auto_correct_date(date_str)
    if corrected:
        return corrected
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú")

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
async def check_and_update_schema():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_connection() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            cur = await conn.cursor()
            await cur.execute("PRAGMA table_info(filters)")
            columns = [row[1] for row in await cur.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'created_at' not in columns:
                await cur.execute("ALTER TABLE filters ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at")
            
            if 'updated_at' not in columns:
                await cur.execute("ALTER TABLE filters ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ updated_at")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
            await cur.execute("CREATE INDEX IF NOT EXISTS idx_user_expiry ON filters(user_id, expiry_date)")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –ë–î: {e}")

# ========== –≠–ö–°–ü–û–†–¢ –í EXCEL ==========
async def export_to_excel(user_id: int) -> io.BytesIO:
    """–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ Excel"""
    filters = await get_user_filters(user_id)
    
    if not filters:
        raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(filters)
    
    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    columns_to_drop = ['user_id', 'created_at', 'updated_at']
    for col in columns_to_drop:
        if col in df.columns:
            df = df.drop(columns=[col])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    today = datetime.now().date()
    df['last_change'] = pd.to_datetime(df['last_change']).dt.strftime('%d.%m.%Y')
    df['expiry_date'] = pd.to_datetime(df['expiry_date']).dt.strftime('%d.%m.%Y')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    def calculate_status(expiry_date_str):
        expiry_date = datetime.strptime(expiry_date_str, '%d.%m.%Y').date()
        days_until = (expiry_date - today).days
        icon, status = get_status_icon_and_text(days_until)
        return f"{icon} {status} ({days_until} –¥–Ω–µ–π)"
    
    df['–°—Ç–∞—Ç—É—Å'] = df['expiry_date'].apply(calculate_status)
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–§–∏–ª—å—Ç—Ä—ã', index=False)
    
    output.seek(0)
    return output

# ========== –û–°–¢–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ==========
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365,
    "–ø—É—Ä–∏—Ñ–∞–π–µ—Ä": 180
}

# –£–ë–†–ê–ù –õ–ò–ú–ò–¢ –ù–ê –§–ò–õ–¨–¢–†–´
MAX_FILTERS_PER_USER = 1000  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()
    waiting_confirmation = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()
    waiting_confirmation = State()

class DeleteFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_confirmation = State()

class ImportExportStates(StatesGroup):
    waiting_excel_file = State()

class GoogleSheetsStates(StatesGroup):
    waiting_sheet_id = State()
    waiting_sync_confirmation = State()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ==========
async def init_db():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await cur.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='filters'
            """)
            table_exists = await cur.fetchone()
            
            if not table_exists:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                await cur.execute('''
                    CREATE TABLE filters (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        filter_type TEXT,
                        location TEXT,
                        last_change DATE,
                        expiry_date DATE,
                        lifetime_days INTEGER,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                await cur.execute('''CREATE INDEX idx_user_id ON filters(user_id)''')
                await cur.execute('''CREATE INDEX idx_expiry_date ON filters(expiry_date)''')
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        if os.path.exists(config.DB_PATH):
            backup_name = f'filters_backup_critical_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            try:
                shutil.copy2(config.DB_PATH, backup_name)
                logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏–µ: {backup_name}")
            except Exception as backup_error:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {backup_error}")
        raise

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
async def error_handler(update: types.Update, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update {update}: {exception}")
        health_monitor.record_error()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if config.ADMIN_ID:
            error_traceback = "".join(traceback.format_exception(None, exception, exception.__traceback__))
            short_error = str(exception)[:1000]
            
            await bot.send_message(
                config.ADMIN_ID,
                f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n"
                f"üí• <b>–û—à–∏–±–∫–∞:</b> {short_error}\n"
                f"üì± <b>Update:</b> {update}\n\n"
                f"üîß <i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞–∑</i>",
                parse_mode='HTML'
            )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await update.message.answer(
                "üòï <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
            
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# ========== –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========
async def send_personalized_reminders():
    """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            current_hour = datetime.now().hour
            greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" if 5 <= current_hour < 12 else "–î–æ–±—Ä—ã–π –¥–µ–Ω—å" if 12 <= current_hour < 18 else "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            
            async with get_db_connection() as conn:
                cur = await conn.cursor()
                await cur.execute('''
                    SELECT DISTINCT user_id FROM filters 
                    WHERE expiry_date BETWEEN date('now') AND date('now', '+7 days')
                    OR expiry_date <= date('now')
                ''')
                users_to_notify = await cur.fetchall()
                
                for user_row in users_to_notify:
                    user_id = user_row['user_id']
                    filters = await get_user_filters(user_id)
                    
                    expiring_filters = []
                    expired_filters = []
                    
                    for f in filters:
                        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
                        days_until = (expiry_date - datetime.now().date()).days
                        
                        if days_until <= 0:
                            expired_filters.append((f, days_until))
                        elif days_until <= 7:
                            expiring_filters.append((f, days_until))
                    
                    if expired_filters or expiring_filters:
                        message = f"{greeting}! üîî\n\n"
                        
                        if expired_filters:
                            message += "üî¥ <b>–ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´:</b>\n"
                            for f, days in expired_filters:
                                message += f"‚Ä¢ {f['filter_type']} ({f['location']}) - –ü–†–û–°–†–û–ß–ï–ù\n"
                            message += "\n"
                        
                        if expiring_filters:
                            message += "üü° <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n"
                            for f, days in expiring_filters:
                                message += f"‚Ä¢ {f['filter_type']} ({f['location']}) - {days} –¥–Ω–µ–π\n"
                        
                        message += f"\nüí´ –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(filters)}"
                        
                        try:
                            await bot.send_message(user_id, message, parse_mode='HTML')
                            await asyncio.sleep(0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await asyncio.sleep(23 * 60 * 60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 23 —á–∞—Å–∞
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(60 * 60)

# ========== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø ==========
async def health_monitoring_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    while True:
        try:
            health_status = await health_monitor.get_detailed_status()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            if health_status['message_count'] % 30 == 0:
                logging.info(f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health_status}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º health score
            if health_status['health_score'] < 80 and config.ADMIN_ID:
                await bot.send_message(
                    config.ADMIN_ID,
                    f"‚ö†Ô∏è <b>–ù–ò–ó–ö–ò–ô HEALTH SCORE</b>\n\n"
                    f"üìä –¢–µ–∫—É—â–∏–π score: {health_status['health_score']:.1f}%\n"
                    f"üí• –û—à–∏–±–æ–∫: {health_status['error_count']}\n"
                    f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {health_status['message_count']}",
                    parse_mode='HTML'
                )
            
            await asyncio.sleep(60 * 30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60 * 5)

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø ==========
async def show_filters_for_selection(message: types.Message, filters: List[Dict], action: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
        return
    
    text = f"üìã <b>–í–´–ë–ï–†–ò–¢–ï –§–ò–õ–¨–¢–† –î–õ–Ø {action.upper()}:</b>\n\n"
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - datetime.now().date()).days
        icon, status = get_status_icon_and_text(days_until)
        
        text += (
            f"{icon} <b>#{f['id']}</b> - {f['filter_type']}\n"
            f"üìç {f['location']} | üìÖ {format_date_nice(expiry_date)} | {status}\n\n"
        )
    
    await message.answer(
        text,
        reply_markup=get_filters_selection_keyboard(filters, action),
        parse_mode='HTML'
    )

# ========== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ==========
async def safe_sync_to_sheets(user_id: int, filters: List[Dict]) -> tuple[bool, str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return await google_sync.sync_to_sheets(user_id, filters)
    except ImportError:
        return False, "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gspread google-auth"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å rate limiting"""
    health_monitor.record_message(message.from_user.id)
    
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üì§ –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç Excel\n"
        "‚Ä¢ ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
    
    await message.answer(
        "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    health_status = await health_monitor.get_detailed_status()
    stats = await get_all_users_stats()
    
    admin_text = (
        "üëë <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ üíß –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
        f"‚Ä¢ üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired_filters']}\n"
        f"‚Ä¢ üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {stats['expiring_soon']}\n\n"
        f"üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n"
        f"‚Ä¢ ‚è± –ê–ø—Ç–∞–π–º: {health_status['uptime']}\n"
        f"‚Ä¢ üì® –°–æ–æ–±—â–µ–Ω–∏–π: {health_status['message_count']}\n"
        f"‚Ä¢ üí• –û—à–∏–±–æ–∫: {health_status['error_count']}\n"
        f"‚Ä¢ üß† –ü–∞–º—è—Ç—å: {health_status['memory_usage']:.1f} MB\n"
        f"‚Ä¢ üíæ –†–∞–∑–º–µ—Ä –ë–î: {health_status['database_size'] / 1024 / 1024:.2f} MB\n"
        f"‚Ä¢ üè• Health: {health_status['health_score']:.1f}%\n\n"
        f"üîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"/backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
        f"/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    await message.answer(admin_text, parse_mode='HTML')

@dp.message(Command("backup"))
async def cmd_backup(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    if backup_database():
        await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

@dp.message(F.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def cmd_my_filters(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    health_monitor.record_message(message.from_user.id)
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    today = datetime.now().date()
    response = ["üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´:</b>\n"]
    
    for i, f in enumerate(filters, 1):
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        icon, status = get_status_icon_and_text(days_until)
        
        response.append(
            f"{icon} <b>–§–∏–ª—å—Ç—Ä #{f['id']}</b>\n"
            f"üíß –¢–∏–ø: {f['filter_type']}\n"
            f"üìç –ú–µ—Å—Ç–æ: {f['location']}\n"
            f"üìÖ –ó–∞–º–µ–Ω–∞: {format_date_nice(datetime.strptime(str(f['last_change']), '%Y-%m-%d'))}\n"
            f"‚è∞ –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status} ({days_until} –¥–Ω–µ–π)\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
    response.append("\n" + create_expiry_infographic(filters))
    
    await message.answer("\n".join(response), parse_mode='HTML')

@dp.message(F.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    health_monitor.record_message(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health_monitor.record_message(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = await get_user_filters(message.from_user.id)
    if len(filters) >= MAX_FILTERS_PER_USER:
        –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = await get_user_filters(message.from_user.id)
    if len(filters) >= MAX_FILTERS_PER_USER await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å:
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç—Ç—Ä–æ–≤</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {MAX_FILTERS_PER_USER}\n"
            f" —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {MAX_FILTERS_PER_USER}\n"
            f"–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
            reply–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.",
            reply_markup=get_main_keyboard(),
            parse_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await state.set_state(FilterStates.waiting_filter_type)
    await message.answer(
        "üíß <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –§–ò–õ–¨–¢–†–ê</b>\_mode='HTML'
        )
        return
    
    await state.set_state(FilterStates.waiting_filter_type)
    await message.answer(
        "üíß <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –§–ò–õ–¨–¢–†–ê</b>\n\n"
        "n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π:",
        reply_mark –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π:",
        reply_markup=get_filter_type_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</up=get_filter_type_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
           b>",
            reply_markup=get_main_keyboard(),
 reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    filter_type = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
            parse_mode='HTML'
        )
        return
    
    filter_type = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is    is_valid, error_msg = validate_filter_type(filter_type)
    if not is_valid:
        await message_valid, error_msg = validate_filter_type(filter_type)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–∂–∞.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –µ—â–µ —Ä–∞–∑:",
            reply–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_markup=get_filter_type_keyboard()
        )
        return
    
    await state.update_data(filter_type=filter_type)
    await state.set_state(Filter_filter_type_keyboard()
        )
        return
    
    await state.update_data(filter_type=filter_type)
    await state.set_state(FilterStates.waiting_location)
    
    await message.answer(
        "üìç <b>–£–ö–ê–ñ–ò–¢–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢States.waiting_location)
    
    await message.answer(
        "üìç <b>–£–ö–ê–ñ–ò–¢–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ö—É—Ö–Ω—è\n"
        "‚Ä¢ –û—Ñ–∏—Å –∫–∞–±–∏–Ω–µ—Ç 101\n"
        "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö\n"
        "‚Ä¢ –ì–æ—Å—Ç–∏–Ω–∞—è\n\n"
        " –ö—É—Ö–Ω—è\n"
        "‚Ä¢ –û—Ñ–∏—Å –∫–∞–±–∏–Ω–µ—Ç 101\n"
        "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö\n"
        "‚Ä¢ –ì–æ—Å—Ç–∏–Ω–∞—è\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>",
        reply_markup=get_back_keyboard(),
       ",
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.wait parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
ing_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_filter_type)
        await message.answer(
            "üíß    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_filter_type)
        await message.answer(
            " <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –§–òüíß <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –§–ò–õ–¨–¢–†–ê</b>",
            reply_markup=get_filter_type_keyboard(),
            parse_mode='–õ–¨–¢–†–ê</b>",
            reply_markup=get_filter_type_keyboard(),
            parse_mode='HTML'
        )
        return
    
    location = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_location(location)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n\n–üHTML'
        )
        return
    
    location = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_location(location)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑:",
–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(l            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(location=location)
    await state.set_stateocation=location)
    await state.set_state(FilterStates.waiting_change_date)
    
    await message(FilterStates.waiting_change_date)
    
    await message.answer.answer(
        "üìÖ <b>–£–ö–ê–ñ–ò–¢(
        "üìÖ <b–ï –î–ê–¢–£ –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–ú–ï–ù–´</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> –∏–ª–∏ <b>–î–î.–ú–ú</b>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 15.12.2023\n"
        "‚Ä¢ 15.12 (—Ç–µ>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–ú–ï–ù–´</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> –∏–ª–∏ <b>–î–î.–ú–ú</b>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 15.12.2023\n"
        "‚Ä¢ 15.12 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)\n"
        "‚Ä¢ 15122023–∫—É—â–∏–π –≥–æ–¥)\n"
        "‚Ä¢ 15122023\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã:</b>",
        reply_markup=get_back_keyboard\n\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã:</b>",
        reply_markup=get_back_keyboard(),
(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_change_date        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_change_date)
async def process_change_date(message)
async def process_change_date(message: types.Message, state:: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_location)
        await message.answer(
            "üìç <b>–£ FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_location)
        await message.answer(
            "üìç <b>–£–ö–ê–ñ–ò–¢–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï–ö–ê–ñ–ò–¢–ï –ú–ï–°–¢–û–ü–û–õ</b>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        return–û–ñ–ï–ù–ò–ï</b>",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        return
    
    try:

    
    try:
        change_date = validate_date(message.text)
        await state.update_data(last_change        change_date = validate_date(message.text)
        await state.update_data(last_change==change_date.strftime('%Y-%m-%d'))
        
        data = await state.get_data()
        filter_type = data.get('change_date.strftime('%Y-%m-%d'))
        
        data = await state.get_data()
        filter_type = data.get('filter_type', ''filter_type', '').lower()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–æ —É–º–æ–ª—á–∞).lower()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_lifetime = DEFAULT_LIFETIMES.get(filter_type, 180)
        
        await state.update_data(lifetime_days=default_lifetime)
        await state.set_state(Filter–Ω–∏—é
        default_lifetime = DEFAULT_LIFETIMES.get(filter_type, 180)
        
        await state.update_data(lifetime_days=default_lifetime)
        await state.set_state(FilterStates.waiting_lifetime)
        
        await message.answer(
            f"‚è±Ô∏è <b>–£–ö–ê–ñ–ò–¢–ï –°–†–û–ö –°–õ–£States.waiting_lifetime)
        
        await message.answer(
            f"‚è±Ô∏è <b>–£–ö–ê–ñ–ò–¢–ï –°–†–û–ö –°–õ–£–ñ–ë–´</b>\n\n"
            f"–ñ–ë–´</b>\n\n"
            f"–î–ª—è —Ç–∏–ø–∞ '{data.get('filter_type', '')}' —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫–î–ª—è —Ç–∏–ø–∞ '{data.get('filter_type', '')}' —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: <b>{ —Å—Ä–æ–∫: <b>{default_lifetime} –¥–Ω–µ–π</b>\n\n"
            f"‚úèÔ∏è <bdefault_lifetime} –¥–Ω–µ–π</b>\n\n"
            f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>\n"
            f"<i>>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>\n"
            f"<–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π'</i>i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π'</",
            reply_markup=get_recommended_lifetime_keyboard(default_lifetime),
            parse_mode='HTML'
        )
        
    except ValueError as e:
        await messagei>",
            reply_markup=get_recommended_lifetime_keyboard(default_lifetime),
            parse_mode='HTML'
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º.answer(
            f"‚ùå {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–µ:",
            reply_markup=get_back_keyboard()
        )

@dp.message(FilterStates.waiting_lifetime)
async def –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:",
            reply_markup=get_back_keyboard()
        )

@dp.message(FilterStates.waiting_lifetime)
async def process_lifetime(message: process_lifetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(FilterStates.waiting_change_date)
        await message.answer(
            "üìÖ.waiting_change_date)
        await message.answer(
            "üìÖ <b>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–ú–ï–ù <b>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–ú–ï–ù–´</b>",
–´</b>",
            reply_markup=get_back_keyboard(),
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )
        return
    
    data = await state.get_data()
    default_lifetime =            parse_mode='HTML'
        )
        return
    
    data = await state.get_data()
    default_lifetime = data data.get('lifetime_days', 180)
    
    if "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π" in message.text:
        lifetime_days = default_lifetime
    else:
        is_valid, error_msg, lifetime_d.get('lifetime_days', 180)
    
    if "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π" in message.text:
        lifetime_days = default_lifetime
    else:
        is_valid, error_msg, lifetime_days = validate_lifetime(message.text)
        if not is_valid:
ays = validate_lifetime(message.text)
        if not is_valid:
            await            await message.answer(
                f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:",
 message.answer(
                f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã                reply_markup=get_recommended_lifetime_keyboard(default_lifetime)
            )
            return
    
    await state.update:",
                reply_markup=get_recommended_lifetime_keyboard(default_lifetime)
            )
            return
    
    await state.update_data(lifetime_days=lifetime_days)
_data(lifetime_days=lifetime_days)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    last_change = datetime.strptime    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    last_change = datetime.strptime(data['(data['last_change'], '%Y-%m-%d')
    expiry_date = last_change + timedelta(days=lifetime_days)
    await state.updatelast_change'], '%Y-%m-%d')
    expiry_date = last_change + timedelta(days=lifetime_days)
    await state.update_data(expiry_date=expiry_date.strftime('%Y-%_data(expiry_date=expiry_date.strftime('%Y-%m-%d'))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    datam-%d'))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    await show_filter_confirmation(message, data)
 = await state.get_data()
    await show_filter_confirmation(message, data)
    await state.set_state(FilterStates.waiting    await state.set_state(FilterStates.waiting_confirmation)

async def show_filter_confirmation(message: types.Message, data: Dict):
_confirmation)

async def show_filter_confirmation(message: types.Message, data: Dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    last_change =    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
 datetime.strptime(data['last_change'], '%Y-%m-%d')
    expiry_date = datetime.strptime    last_change = datetime.strptime(data['last_change'], '%Y-%m-%d')
    expiry_date = datetime.strptime(data['expiry_date'], '%Y-%m-%d')
   (data['expiry_date'], '%Y-%m-%d')
    days_until = (exp days_until = (expiry_date.date() - datetime.now().date()).days
    icon, status = get_status_icon_and_text(days_until)
    
    confirmation_text = (
iry_date.date() - datetime.now().date()).days
    icon, status = get_status_icon_and_text(days_until)
    
    confirmation_text = (
        f"‚úÖ <b>–ü–û–î–¢–í–ï–†        f"‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–ê–ù–ù–´–•–ñ–î–ï–ù–ò–ï –î–ê–ù–ù–´–•</b>\n</b>\n\n"
        f"{icon} <b>–ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:</b\n"
        f"{icon} <b>–ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:</b>\n"
        f"üíß <b>–¢–∏–ø:</b> {>\n"
        f"üíß <b>–¢–∏–ø:</b> {data['filter_type']}\n"
        f"üìç <bdata['filter_type']}\n"
        f"üìç <>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data['location']}\n"
        f"üìÖ <b>b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data['location']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(last_change)}\n"
        f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {data['lifetime_d–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(last_change)}\n"
        f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {data['lifetime_days']} –¥–Ω–µ–π\n"
        f"‚è∞ <b>ays']} –¥–Ω–µ–π\n"
        f"‚è∞ <b>–ì–æ–¥–µ–Ω–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b –¥–æ:</b> {format_date_nice(expiry_date)}\n"
        f"üìä> {status} ({days_until} –¥–Ω–µ–π)\n\n"
        f"<i>–í—Å—ë –≤–µ—Ä <b>–°—Ç–∞—Ç—É—Å:</b> {status} ({days_until} –¥–Ω–µ–π)\n\n"
        f"<i>–í—Å—ë –≤–µ—Ä–Ω–æ?</i>"
    )
    
    await message.answer(confirmation_text, reply_markup=get_confirmation_key–Ω–æ?</i>"
    )
    
    await message.answer(confirmation_text, reply_markup=get_confirmation_keyboard(), parse_mode='HTML')

@dp.message(FilterStates.waiting_confirmation)
async defboard(), parse_mode='HTML')

@dp.message(FilterStates.waiting_confirmation)
async def process process_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    if message.text == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        data = await –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    if message.text == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        data = await state.get_data()
        
        success = state.get_data()
        
        success = await add_filter_to_db(
            user_id=message.from_user.id,
            filter_type=data['filter_type'],
            location=data['location'],
            await add_filter_to_db(
            user_id=message.from_user.id,
            filter_type=data['filter_type'],
            location=data['location'],
            last_change=data[' last_change=data['last_change'],
            expiry_date=data['expiry_date'],
            lifetime_days=data['lifetime_days']
        )
        
last_change'],
            expiry_date=data['expiry_date'],
            lifetime_days=data['lifetime_days']
        )
        if success:
            await message.answer(
                "üéâ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ        
        if success:
            await message.answer(
                "üéâ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–ï–ù!</b>\n\n"
                "üí´ <i>–¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ–õ–ï–ù!</b>\n\n"
                "üí´ <i>–¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –≤</i>",
                reply_markup=get_main_keyboard(),
                parse_mode=' —Å–∏—Å—Ç–µ–º–µ</i>",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
        else:
           HTML'
            )
        else:
            await message.answer(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –§–ò–õ–¨–¢–†–ê</b>\n await message.answer(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –§–ò–õ–¨–¢–†–ê</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_mark–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
up=get_main_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
        
    elif message.text == "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
               
    elif message.text == "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
        await state.set_state(FilterStates.waiting_filter_type)
        await message await state.set_state(FilterStates.waiting_filter_type)
        await message.answer(
            "üíß <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò.answer(
            "üíß <b>–í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –§–ò–õ–¨–¢–†–ê</b>",
            reply_markup=get_filter_type_keyboard(),
            parse_mode='HTML–ü –§–ò–õ–¨–¢–†–ê</b>",
            reply_markup=get_filter_type_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "'
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_confirmation_keyboard()
        )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_confirmation_keyboard()
        )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    health_monitor.record_message(message.from_user.id)
    
 def cmd_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    health_monitor.record_message(message.from_user.id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_filters = await get_user_filters(message.from_user.id)
    
       # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_filters = await get_user_filters(message.from_user.id)
    
    if not user_filters:
        await message.answer(
            " if not user_filters:
        await message.answer(
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
       –∫—É.",
            reply_mark )
        return
    
    today = datetime.now().date()
    user_stats = {
        'total': len(user_filters),
        'expired': 0,
        'expiring_soonup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    today = datetime.now().date()
    user_stats = {
        'total': len(user_filters),
        'expired': 0,
        'expiring_soon': 0,
       ': 0,
        'normal': 0 'normal': 0
    }
    
    for f in user_filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%
    }
    
    for f in user_filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date -m-%d').date()
        days_until = (expiry_date - today).days
        
        if days_until <= today).days
        
        if days_until <= 0:
            user_stats['expired'] += 1
        elif days_until <= 7:
 0:
            user_stats['expired'] += 1
        elif days_until <= 7:
            user_stats['expiring_soon'] +=            user_stats['expiring_soon'] += 1
        else:
            user_stats['normal'] += 1
    
    # 1
        else:
            user_stats['normal'] += 1
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    if is_admin –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    if is_admin(message.from_user.id):
        global_stats = await get_all_users_stats()
        stats(message.from_user.id):
        global_stats = await get_all_users_stats()
        stats_text = (
            f"üìä <b_text = (
            f"üìä <b>–û–ë–©–ê>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"üë• <b> –°–ò–°–¢–ï–ú–´</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {global_stats['total_users']}\n"
            f"üíß <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {global_stats['total_users']}\n"
            f"üíß <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {global_stats['total_filters']}\n"
            f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æglobal_stats['total_filters']}\n"
            f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {global_stats['expired_filters']}\n"
            f":</b> {global_stats['expired_filters']}\n"
            f"üü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µüü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {global_stats['expiring_soon']}\n\n"
–∫–∞–µ—Ç:</b> {global_stats['expiring_soon']}\n\n"
        )
    else:
        stats_text = ""
    
    stats_text        )
    else:
        stats_text = ""
    
    stats_text += (
        f" += (
        f"üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–êüìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        f"</b>\n\n"
        f"üíß <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {user_stats['total']}\n"
        f"üü¢üíß <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {user_stats['total']}\n"
        f"üü¢ <b>–í –Ω–æ—Ä–º–µ:</b> {user_stats['normal']}\n"
        f"üü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç:</ <b>–í –Ω–æ—Ä–º–µ:</b> {user_stats['normal']}\n"
        f"üü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {user_stats['expiring_soon']}\n"
        f"üî¥b> {user_stats['expiring_soon']}\n"
        f"üî¥ <b <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {user_stats['expired']}\n\n"
        f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {user_stats['expired']}\n\n"
        f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–Ω—ã—Ö:</b> {((user_stats['normal –∏—Å–ø—Ä–∞–≤–Ω—ã—Ö:</b> {((user_stats['normal'] / user_stats['total']) * 100):.1f}%"
    )
    
    await message.answer(stats_text, reply_mark'] / user_stats['total']) * 100):.1f}%"
    )
    
    await message.answer(stats_text, reply_markup=get_main_keyboard(), parse_mode='HTML')

# ==========up=get_main_keyboard(), parse_mode='HTML')

# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò ==========
@dp.message –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò ==========
@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def cmd_management(message: types.Message):
    """(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def cmd_management(message: types.Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    health_monitor.record–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    health_monitor.record_message(message.from_user.id)
    
    filters = await get_user_filters(message.from_user.id)
_message(message.from_user.id)
    
    filters = await get_user_filters(message.from_user.id    
    if not filters:
        await message.)
    
    if not filters:
        await message.answeranswer(
            "‚öôÔ∏è <(
            "‚öôÔ∏è <b>–£–ü–†–ê–íb>–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</b>\n\n"
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</b>\n\n"
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</=get_main_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</b>\n\n"
        "üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\b>\n\n"
        "üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µn"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "‚Ä¢ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "‚Ä¢ üóë üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üìä –û–Ω–ª–∞–π–Ω Excel - —Ä–∞–±–æ—Ç–∞ —ÅÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üìä –û–Ω–ª–∞–π–Ω Excel - —Ä–∞–±–æ—Ç–∞ —Å Excel —Ñ–∞–π–ª–∞–º–∏\n\n"
        f"üìä <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ Excel —Ñ–∞–π–ª–∞–º–∏\n\n"
        f"üìä <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(filters)}",
        reply_markup=get_management_keyboard:</b> {len(filters)}",
        reply_markup=get_management_keyboard(),
        parse_mode='HTML'
(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def    )

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_edit_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = cmd_edit_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await await get_user_filters(message.from_user.id)
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
 get_user_filters(message.from_user.id)
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
               return
    
    await show_filters_for_selection(message, filters, "edit")
    await state.set_state(EditFilterStates.waiting_filter_selection)

@ return
    
    await show_filters_for_selection(message, filters, "edit")
    await state.set_state(EditFilterStates.waiting_filter_selection)

dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_delete_filter(message: types.Message, state: F@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_delete_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await get_user_fSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await get_user_filters(message.from_user.id)
    if not filters:
        await message.answer("‚ùå –ùilters(message.from_user.id)
    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    await show_filters_for_selection(message, filters, "delete")
    await state.set_state(DeleteFilterStates.waiting_filter_selection)

#–ª–µ–Ω–∏—è")
        return
    
    await show_filters_for_selection(message, filters, "delete")
    await state.set_state(DeleteFilterStates.waiting_filter_selection)

 ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –§–ò–õ–¨–¢–†–û–í ==========
@dp.message(EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    """–ò–†–û–í–ê–ù–ò–Ø –§–ò–õ–¨–¢–†–û–í ==========
@dp.message(EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
   –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message. if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await messageanswer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_management_keyboard())
        return
    
    # –ò–∑–≤–ª–µ–∫–∞.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_management_keyboard())
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    match = re.search(r'#(\d+)',–µ–º ID —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    match = re.search(r'#(\d+)', message.text)
    if not match:
        await message.answer("‚ùå –ù–µ message.text)
    if not match:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    filter_id = int(match.group(1))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    filter_data = await get_filter_by_id(filter_id, message    filter_id = int(match.group(1))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    filter_data = await get_filter_by_id(filter_id, message.from_user.id)
    if not filter_data:
        await message.answer("‚ùå –§–∏.from_user.id)
    if not filter_data:
        await message.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    await state.update_data(editing_filter_id=filter_id, editing_filter_data=filter_data)
    await state.set_state(–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    await state.update_data(editing_filter_id=filter_id, editing_filter_data=filter_data)
    await state.set_state(EditFilterStates.waiting_field_selection)
    
    await message.answer(
EditFilterStates.waiting_field_selection)
    
    await message.answer(
        f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨        f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê #{filter_id}</b>\n\n"
        f"–¢–†–ê #{filter_id}</b>\n\n"
        f"üíß –¢–∏–ø: {filter_data['filter_type']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {filter_data['location']}\n"
üíß –¢–∏–ø: {filter_data['filter_type']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {filter_data['location']}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {format_date_nice(datetime.strptime        f"üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {format_date_nice(datetime.strptime(str(str(filter_data['last_change']), '%Y(filter_data['last_change']), '%Y-%m-%d'))}\n\n"
        f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è-%m-%d'))}\n\n"
        f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=get_edit_keyboard(),
        parse_mode='HTML'
    )

@dp:</b>",
        reply_markup=get_edit_keyboard(),
        parse_mode='HTML'
    )

@dp.message(EditFilterStates.waiting_field_selection)
async def process_edit_field_selection(message.message(EditFilterStates.waiting_field_selection)
async def process_edit_field_selection: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await cmd_managementüîô –ù–∞–∑–∞–¥":
        await state.clear()
        await(message)
        return
    
    field_mapping = {
        "üíß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞": "filter_type",
        "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": cmd_management(message)
        return
    
    field_mapping = {
        "üíß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞": "filter_type",
        "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": "location "location", 
        "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": "last_change",
        "‚è±Ô∏è –°—Ä–æ–∫", 
        "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": "last_change",
        "‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã": "lifetime_days"
    }
    
    if message.text not in field_mapping:
        await —Å–ª—É–∂–±—ã": "lifetime_days"
    }
    
    if message.text not in field_mapping:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_m message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_edit_keyboard())
        return
    
    field_name = field_mappingarkup=get_edit_keyboard())
        return
    
    field_name = field_mapping[message.text]
    await state.update_data(editing_field=field_name[message.text]
    await state.update_data(editing_field=field_name)
    await state.set_state(EditFilterStates.waiting_new_value)
    
    prompts)
    await state.set_state(EditFilterStates.waiting_new_value)
    
    prompts = {
        "filter_type": " = {
        "filter_type": "üíß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞üíß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
        "location": "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        "last_change": "üìÖ –í:",
        "location": "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        "last_change": "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì):",
        "lifetime_days–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì):",
        "lifetime_days": "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö):": "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö):"
    }
    
    await message.answer(prompts[field_name],"
    }
    
    await message.answer(prompts[field_name], reply_m reply_markup=get_back_keyboard())

@dp.message(EditFilterStates.waiting_new_value)
async def process_edit_new_value(message:arkup=get_back_keyboard())

@dp.message(EditFilterStates.waiting_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(EditFilterStates.waiting_field_selection)
        data–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(EditFilterStates.waiting_field_selection)
        data = await state.get_data()
        filter_data = data['editing = await state.get_data()
        filter_data = data['editing_filter_data']
        
        await message.answer(
            f"‚úèÔ∏è <b>_filter_data']
        
        await message.–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê #{data['editing_filter_id']}</b>\answer(
            f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê #{data['editing_filter_id']}</b>\n\n"
            f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</n\n"
            f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=get_edit_keyboard(),
            parse_mode='HTML'
        )
        return
    
    data =b>",
            reply_markup=get_edit_keyboard(),
            parse_mode='HTML'
        )
        return
    
    data = await state.get_data()
    field_name = data['editing_field']
    filter_id = data['editing_filter_id']
    user_id = await state.get_data()
    field_name = data['editing_field']
    filter_id = data['editing_filter_id']
    user_id = message.from_user.id
    
    try:
        update_data = {}
        
        message.from_user.id
    
    try:
        update_data = {}
        
        if field_name == "filter_type":
            is_valid, error_msg = validate_filter_type if field_name == "filter_type":
            is_valid, error_msg(message.text)
            if not is_valid:
                await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å = validate_filter_type(message.text)
            if not is_valid:
                await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:")
                return
            update_data['filter_type'] = message.text
            
—Ç—Ä–∞:")
                return
            update_data['filter_type'] = message.text
            
        elif field_name == "location":
            is_valid, error_msg = validate_location(message.text)
        elif field_name == "location":
            is_valid, error_msg = validate_location(message.text)
            if not is_valid:
                await message.answer(f"‚ùå {error_msg}\n            if not is_valid:
\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
                return
            update_data['location'] = message.text
            
                await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
                return
            update_data['location'] = message.text
            
        elif field_name == "last_change":
            try:
                change_date = validate_date(message.text)
                update        elif field_name == "last_change":
            try:
                change_date = validate_date(message.text)
                update_data['last_change'] = change_date.strftime('%Y-%m-%d')
_data['last_change'] = change_date.strftime('%Y-%m-%d')
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                filter_data = await get_filter_by_id(filter_id, user_id)
                if filter_data
                filter_data = await get_filter_by_id(filter_id, user_id)
                if filter_data:
                    expiry_date = change_date + timedelta(days=filter:
                    expiry_date = change_date + timedelta(days=filter_data['lifetime_days'])
                    update_data['expiry_date'] =_data['lifetime_days'])
                    update_data['expiry_date'] = expiry_date.strftime('%Y-%m-%d')
                    
            except ValueError as e:
                await message.answer(f"‚ùå {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ expiry_date.strftime('%Y-%m-%d')
                    
            except ValueError as e:
                await message.answer(f"‚ùå {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                return
                
        elif field_name–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
                return
                
        elif field_name == "lifetime_days":
            is_valid, error_msg, lifetime_days = validate_lifetime(message.text)
            == "lifetime_days":
            is_valid, error_msg, lifetime_days = validate_lifetime(message.text)
            if not is_valid:
                await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:")
                return
            
            if not is_valid:
                await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:")
                return
            
            update update_data['lifetime_days'] = lifetime_days
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            filter_data = await get_filter_by_id(filter_id,_data['lifetime_days'] = lifetime_days
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            filter_data = await get user_id)
            if filter_data:
                last_change = datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d')
                expiry_date_filter_by_id(filter_id, user_id)
            if filter_data:
                last_change = datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d')
                expiry_date = last_change + timedelta(days=lifetime_days)
                update_data['expiry_date = last_change + timedelta(days=lifetime_days)
                update_data['expiry_date'] = expiry_date.strftime('%Y-%m-%d')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –ë–î
        success = await update_filter_in_db'] = expiry_date.strftime('%Y-%m-%d')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –ë–î
        success = await update_filter_in(filter_id, user_id, **update_data)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–§–ò–õ–¨–¢–†_db(filter_id, user_id, **update_data)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù!</b>\n\n"
 –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù!</b>\n\n"
                f"üí´ <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</i>",
                reply_markup=get_management_keyboard(),
                               f"üí´ <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</i>",
                reply_markup=get_management_keyboard(),
                parse_mode='HTML'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º parse_mode='HTML'
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            updated_filter = await get_filter_by_id(filter_id, user_id)
            if updated_filter:
                expiry_date = datetime.strptime(str(updated_filter['expiry_date']), '%Y-%m-%d').date()
–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            updated_filter = await get_filter_by_id(filter_id, user_id)
            if updated_filter:
                expiry_date = datetime.strptime(str(updated_filter['expiry_date']), '%Y-%m-%d').date()
                days_until = (expiry_date - datetime.now().date()).days
                icon, status = get_status_icon_and_text(days_until)
                
                await message.answer(
                days_until = (expiry_date - datetime.now().date()).days
                icon, status = get_status_icon_and_text(days_until)
                
                await message.answer                    f"üìã <b>–û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:</b>\n\n"
                    f(
                    f"üìã <b>–û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:</b>\n\n"
                    f"{icon} <b>–§–∏–ª—å—Ç—Ä #{filter_id}</b>\n"
                    f"üíß –¢–∏–ø: {updated_filter"{icon} <b>–§–∏–ª—å—Ç—Ä #{filter_id}</b>\n"
                    f"üíß –¢–∏–ø: {updated_filter['filter_type']}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {updated['filter_type']}\n"
                    f"üìç –ú–µ—Å—Ç–æ: {updated_filter['location']}\n"
                    f"üìÖ –ó–∞–º–µ–Ω–∞: {format_date_nice(d_filter['location']}\n"
                    f"üìÖ –ó–∞–º–µ–Ω–∞: {format_date_nice(datetime.strptime(str(updated_filter['last_change']), '%Y-%atetime.strptime(str(updated_filter['last_change']), '%Y-%m-%d'))}\n"
                    f"‚è∞ –ì–æ–¥–µ–Ωm-%d'))}\n"
                    f"‚è∞ –ì–æ–¥–µ–Ω –¥–æ: –¥–æ: {format_date_nice(expiry_date)}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status} ({days_until} –¥–Ω–µ–π)",
                    parse_mode='HTML'
                {format_date_nice(expiry_date)}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status} ({days_until} –¥–Ω–µ–π)",
                    parse_mode='HTML'
                )
        else )
        else:
            await message.answer(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –§:
            await message.answer(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –§–ò–õ–¨–ò–õ–¨–¢–†–ê</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_management_keyboard(),
                parse_mode='HTML'
           –¢–†–ê</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_management_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
        
    except Exception as e )
        
        await state.clear()
        
    except Exception:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_m–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_management_keyboard(),
            parse_mode='HTML'
        )
        await state.clear()

# =========arkup=get_management_keyboard(),
            parse_mode='HTML'
        )
        await state.clear()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–î–ê–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–û–í == –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–î–ê–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–û–í=========
@dp.message(DeleteFilterStates.waiting_filter_selection)
async def process_delete_filter_selection(message: types.Message, state: FSMContext):
    ==========
@dp.message(DeleteFilterStates.waiting_filter_selection)
async def process_delete_filter_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥ """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω":
        await state.clear()
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_management_keyboard())
        return
    
    match = re.search(r'#(\d+)', message.text)
    if not match—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=get_management_keyboard())
        return
    
    match = re.search(r'#(\d+)', message.text)
    if not match:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    filter_id = int(match.group(1))
    filter_data =—Å–∫–∞:")
        return
    
    filter_id = int(match.group(1))
    filter_data = await get_filter_by_id(filter_id, message.from_user.id)
    
    if not filter_data:
        await await get_filter_by_id(filter_id, message.from_user.id)
    
    if not filter_data:
        await message.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã message.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    await state.update_data(deleting_filter_id=filter_id–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    
    await state.update_data(deleting_filter_id=filter, deleting_filter_data=filter_data)
    await state.set_state(DeleteFilterStates.waiting_confirmation)
    
    expiry_date = datetime.strptime(str(filter_data_id, deleting_filter_data=filter_data)
    await state.set_state(DeleteFilterStates.waiting_confirmation)
    
    expiry_date = datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date['expiry_date']), '%Y-%m-%d').()
    
    await message.answer(
        f"üóëÔ∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
        f"‚ùå –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏date()
    
    await message.answer(
        f"üóëÔ∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
        f"‚ùå –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä?\n\n"
        f"—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä?\n\n"
        f"üíß –¢–∏–ø: {filter_data['filter_type']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {üíß –¢–∏–ø: {filter_data['filter_type']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {filter_data['location']}\n"
        f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n\n"
        f"filter_data['location']}\n"
        f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n\n"
        f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_mark<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_markup=get_confirmation_keyboard(),
        parse_mode='HTMLup=get_confirmation_keyboard(),
        parse_mode='HTML'
    )

@dp.message(DeleteFilterStates.waiting_confirmation)
async def process_delete_confirmation(message: types.Message, state: FSM'
    )

@dp.message(DeleteFilterStates.waiting_confirmation)
async def process_delete_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    data = await state.get_data()
Context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    filter_id = data['deleting_filter_id']
    filter_id = data['deleting_filter_id']
    user_id    user_id = message.from_user.id
    
    if message.text == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        success = await delete_filter_from_db(filter_id, user_id)
        
        if success:
            await = message.from_user.id
    
    if message.text == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        success = await delete_filter_from_db(filter_id, user_id)
        
        if success:
            await message.answer(
                message.answer(
                "üóëÔ∏è <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù!</b>\n\n"
                "üí´ <i>–§–∏–ª—å "üóëÔ∏è <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù!</b>\n\n"
                "üí´ <i>–§–∏–ª—å—Ç—Ä –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ</i>",
                reply_markup=get—Ç—Ä –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ</i>",
                reply_markup=get_management_key_management_keyboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –£–î–êboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò–õ–ï–ù–ò–ò –§–ò–õ–¨–¢–†–ê</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_management_keyboard(),
                parse_mode='HTML'
            –§–ò–õ–¨–¢–†–ê</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_management_keyboard(),
                parse_mode='HTML'
            )
        
        await state.clear()
        
    elif message.text == " )
        
        await state.clear()
        
    elif message.text == "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
            reply_markup=get_‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
            reply_markup=get_management_keyboard(),
            parse_mode='HTML'
        )
   management_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:",
            reply else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:",
            reply_markup=get_confirmation_keyboard()
        )

# ========== –ò–ú–ü–û–†–¢/–≠–ö–°–ü–û–†–¢_markup=get_confirmation_keyboard()
        )

# ========== –ò–ú–ü–û–†–¢/ ==========
@dp.message(F.text == "üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
async def cmd_import_export(message: types.Message):
   –≠–ö–°–ü–û–†–¢ ==========
@dp.message(F.text == "üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")
async def cmd_import_export(message: types.Message):
    """–ú–µ–Ω """–ú–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    health_monitor.record_message(message.from_user.id)
    
    await message.answer(
        "üì§ <b>–ò–ú–ü–û–†–¢/—é –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞"""
    health_monitor.record_message(message.from_user.id)
    
    await message.answer(
        "üì§ <b>–ò–ú–ü–û–†–¢/–≠–ö–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>\n\n"
        "üíæ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>\n\n"
        "üíæ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ üì•"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ –ò–º–ø–æ—Ä—Ç –∏–∑ Excel - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ üìã –®–∞–±–ª–æ–Ω Excel - —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n"
        " üìã –®–∞–±–ª–æ–Ω Excel - —Å–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n"
        "‚Ä¢ ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets\n\n"
        "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å Excel –∏ Google Sheets</i>",
        reply_markup‚Ä¢ ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets\n\n"
        "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å Excel –∏ Google Sheets</i>",
        reply_markup=get_import_export_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F=get_import_export_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def cmd_export_excel(message: types.Message):
    """–≠–∫—Å–ø.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def cmd_export_excel(message: types.Message):
   –æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        excel_file = await export_to_excel(message.from_user.id)
        
        await message.answer_document(
            types.Buffered """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        excel_file = await export_to_excel(message.from_user.id)
        
        await message.answer_document(
            types.BufferedInputFile(
InputFile(
                excel_file.getvalue(),
                filename=f"—Ñ–∏–ª—å—Ç—Ä—ã_{datetime.now().strftime('%Y%m%d_%H%M                excel_file.getvalue(),
                filename=f"—Ñ–∏–ª—å—Ç—Ä—ã_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx')}.xlsx"
            ),
            caption="üìä <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel</b>",
            parse_mode='HTML'
        )
    except ValueError as e:
        await message.answer(f"
            ),
            caption="üìä <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel</b>",
            parse_mode='HTML'
        )
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
"‚ùå {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
        await message.answer("‚ùå        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

# ========== GOOGLE SHEETS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ==========
@dp.message(F.text == " –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

# ========== GOOGLE SHEETS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ==========
@dp.message(F‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
async def cmd_google_sheets_sync(message: types.Message):
    """–ú–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets"""
    health.text == "‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
async def cmd_google_sheets_sync(message: types.Message):
    """–ú–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets"""
    health_monitor.record_message(message.from_user.id)
    
    status_text = "_monitor.record_message(message.from_user.id)
    
    status_text = "‚òÅÔ∏è <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS</‚òÅÔ∏è <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS</b>\n\n"
    
    if not config.GOOGLE_SHEETS_CREDENTIALS:
        status_text +=b>\n\n"
    
    if not config.GOOGLE_SHEETS_CR "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        status_text += "üí° <i>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_SHEETS_CREDENTIALEDENTIALS:
        status_text += "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        status_text += "üí° <i>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_SHEETS_CREDENTIALS</i>\n\n"
    elif not google_sync.sheet_id:
        status_text += "üü°S</i>\n\n"
    elif not google_sync.sheet_id:
 <b>–°—Ç–∞—Ç—É—Å:</b> –ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n"
        status_text += "üìù <i>–£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets</i>\n        status_text += "üü° <b>–°—Ç–∞—Ç—É—Å:</b> –ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n"
        status_text += "üìù <i>–£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets</i>\n\n"
    else:
        status_text += "üü¢ <b>–°—Ç–∞—Ç—É\n"
    else:
        status_text += "üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        status_text += f"üìä <b>—Å:</b> –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        status_text += f"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> {google_sync.sheet_id}\n"
        statusID —Ç–∞–±–ª–∏—Ü—ã:</b> {google_sync.sheet_id}\n"
        status_text +=_text += f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {'–í–ö–õ' if google_sync.auto_sync else '–í–´–ö–õ'}\n f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {'–í–ö–õ' if google_sync.auto_sync else '–í–´–ö–õ'}\n\n"
    
    status_text += "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã:</b>\n\n"
    
    status_text += "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã:</b>\n"
    status_text += "1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets\n"
    status_text += "1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets\n"
    status_text += "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL: https://docs"
    status_text += "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL: https://docs.google.google.com/spreadsheets/d/<b>[ID]</b>/edit\n"
    status_text += "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù.com/spreadsheets/d/<b>[ID]</b>/edit\n"
    status_text += "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –£ –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã'"
    
    await message.answer(
       –∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã'"
    
    await message.answer(
        status_text,
        reply_markup=get_sync_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets")
async def cmd_sync status_text,
        reply_markup=get_sync_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets")
async def cmd_sync_to_sheets(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
    if not google_sync.is_configured():
       _to_sheets(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
    if not google_sync.is_configured():
        await message.answer(
            "‚ùå <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ await message.answer(
            "‚ùå <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets.",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "üîÑ <b>–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏—á–µ–Ω–∏–µ –∫ Google Sheets.",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "üîÑ <b>–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...</b>\n\n"
        "‚è≥–∑–∞—Ü–∏—é...</b>\n\n"
        "‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>",
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters = await get_user_filters(message.from_user...</i>",
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters = await get_user_filters(message.from.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤.",
            reply_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤.",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    success, result_message = await safe_sync_to_s_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    success, result_message = await safe_sync_to_sheets(message.from_user.id, filters)
    
    if success:
        await message.answer(
            f"‚úÖ <b>heets(message.from_user.id, filters)
    
    if success:
        await message.answer(
            f"‚úÖ <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!</b>\n\n"
            f"{result_message}\n\n"
            f"üí´–®–ù–ê!</b>\n\n"
            f"{result_message}\n\n"
            f"üí´ <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Google Sheets</i>",
            reply <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Google Sheets</i>",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            f"_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            f"‚ùå <b>–û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò‚ùå <b>–û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò–ò</b>\n\n"
            f"{result_message}\n\n"
            f"üîß <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</i>",
</b>\n\n"
            f"{result_message}\n\n"
            f"üîß <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</i>",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )

@dp.message(F.text == "üìä –°—Ç–∞            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
async def cmd_sync_status(message: types.Message):
    """–ü—Ä–æ–≤—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
async def cmd_sync_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
   –µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    health_monitor.record_message(message.from_user.id)
    
    if not config.GOOGLE_SHEETS_CREDENTIALS:
        await message health_monitor.record_message(message.from_user.id)
    
    if not config.GOOGLE_SHEETS_CREDENTIALS:
.answer(
            "‚ùå <b>–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GOOGLE_SHEETS        await message.answer(
            "‚ùå <b>–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GOOGLE_SHEETS_CREDENTIALS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
            reply_markup=get_sync_CREDENTIALS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
            reply_markup=get_sync_keyboard_keyboard(),
            parse_mode='HTML'
        )
        return
    
    if not google_sync.sheet_id:
        await message.answer(
            "üü° <b>ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ(),
            parse_mode='HTML'
        )
        return
    
    if not google_sync.sheet_id:
        await message.answer(
            "üü° <b>ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω —É–∫–∞–∑–∞–Ω</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=get_sync_keyboard(),
</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...</b>",
        reply_markup=get_back=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...</b>",
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    success, result_message = await google_keyboard(),
        parse_mode='HTML'
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    success, result_message = await google_sync.test_connection()
    
    if success:
        status_icon = "üü¢"
       _sync.test_connection()
    
    if success:
        status_icon = "üü¢ status_text = "–ü–û–î–ö–õ"
        status_text = "–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û"
    else:
        status_icon = "üî¥" 
        status_text = "–û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø"
    
    status_info = (
        f"{status_icon} <b>–°–¢–ê–¢–£–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:</–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û"
    else:
        status_icon = "üî¥" 
        status_text = "–û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø"
    
    status_info = (
        f"{status_icon} <b>–°–¢–ê–¢–£–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:</b> {status_text}\n\n"
        f"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b>b> {status_text}\n\n"
        f"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> {google_sync.sheet_id}\n"
        f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {google_sync.sheet_id}\n"
        f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {'‚úÖ –í–ö–õ' if google_sync.auto_sync else '‚ùå –í–´–ö–õ {'‚úÖ –í–ö–õ' if google_sync.auto_sync else '‚ùå –í–´–ö'}\n\n"
        f"üí° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n{result_message}"
    )
    
    await message.answer(
        status_info,
        reply_mark–õ'}\n\n"
        f"üí° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n{result_message}"
    )
    
    await message.answer(
        status_info,
        reply_markup=get_sync_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.textup=get_sync_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
async def cmd_sync_settings(message: types.Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    if not config.GOOGLE_SHEETS_CREDENTIAL")
async def cmd_sync_settings(message: types.Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    if not config.GOOGLE_SHEETSS:
        await message.answer(
            "‚ùå <b>–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google_CREDENTIALS:
        await message.answer(
            "‚ùå <b>–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
            "1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ Google Cloud Console Sheets –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
            "1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ Google Cloud Console\n"
           \n"
            "2. –°–∫–∞—á–∞—Ç—å JSON —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏\n"
            "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_SHEETS_CREDENTIALS\n\n"
            " "2. –°–∫–∞—á–∞—Ç—å JSON —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏\n"
            "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_SHEETS_CREDENTIALS\n\n"
            "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—èüí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>",
            reply_markup=get_sync_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    connection_status = "üî¥ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
    if google_sync.sheet_id:
        success, result = await google_sync.test_connection –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    connection_status = "üî¥ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
    if google_sync.sheet_id:
        success, result = await google_sync.test()
        connection_status = f"üü¢ –£—Å–ø–µ—à–Ω–æ" if success else f"üî¥ –û—à–∏–±–∫–∞: {result}"
    
    status_text = "‚öôÔ∏è_connection()
        connection_status = f"üü¢ –£—Å–ø–µ—à–Ω–æ" if success else f"üî¥ –û—à–∏–±–∫–∞: {result}"
    
    status_text = "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø</b>\n\n"
    
    if google_sync.sheet_id:
        status <b>–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø</b>\n\n"
    
    if google_sync.sheet_id:
        status_text += f"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> {google_sync.sheet_id}\n"
        status_text += f"üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> {connection_status}\n"
    else:
        status_text += "üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
    
    status_text += f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {'‚úÖ –í–ö–õ' if google_sync.auto_sync else '‚ùå –í–´–ö–õ'}\n\n"
    
    status_text += (
        "üí° <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n"
        "1. –°–æ–∑_text += f"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> {google_sync.sheet_id}\n"
        status_text += f"üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> {connection_status}\n"
    else:
        status_text += "üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
    
    status_text += f"üîÑ <b>–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b> {'‚úÖ –í–ö–õ' if google_sync.auto_sync else '‚ùå –í–´–ö–õ'}\n\n"
    
    status_text += (
        "üí° <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL: docs.google.com/spread–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL: docs.google.com/spreadsheets/d/<b>[ID]</b>/edit\n"
        "3. –ù–∞–∂–º–∏—Ç–µ 'üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã'\n"
        "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 'üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'"
    )
    
    await message.answer(
        status_text,
        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã")
async def cmd_set_sheet_id(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets"""
    await state.set_state(GoogleSheetssheets/d/<b>[ID]</b>/edit\n"
        "3. –ù–∞–∂–º–∏—Ç–µ 'üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã'\n"
        "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 'üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'"
    )
    
    await message.answer(
        status_text,
        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üìù –£–∫–∞–∑–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã")
async def cmd_set_sheet_id(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets"""
    await state.set_state(GoogleSheetsStatesStates.waiting_sheet_id)
    
    await message.answer(
        "üìù <b>–£–ö–ê–ñ–ò–¢–ï ID –¢–ê–ë–õ–ò–¶–´ GOOGLE SHEETS</b>\n\n"
        "üîó <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É.waiting_sheet_id)
    
    await message.answer(
        "üìù <b>–£–ö–ê–ñ–ò–¢–ï ID –¢–ê–ë–õ–ò–¶–´ GOOGLE SHEETS</b>\n\n"
        "üîó <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL –∞–¥—Ä–µ—Å–∞:\n"
        "   <code>https://docs.google.com/spreadsheets/d/[–í–ê–®_ID_–¢–£–¢]/edit</code>\n\n"
        "üìé <b>–ü—Ä–∏–º–µ—Ä ID:</b> <code —Ç–∞–±–ª–∏—Ü—É –≤ Google Sheets\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL –∞–¥—Ä–µ—Å–∞:\n"
        "   <code>https://docs.google.com/spreadsheets/d/[–í–ê–®_ID_–¢–£–¢]/edit</code>\n\n"
        "üìé <b>–ü—Ä–∏–º–µ—Ä ID:</b> <code>1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms</code>\>1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms</code>\n\nn\n"
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã:</b>",
        reply_markup=get_cancel_keyboard(),
        parse_mode='HTML'
    )

@dp.message(GoogleSheetsStates.waiting_sheet_id)
async def process_sheet_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–∞–±–ª–∏—Ü—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
       "
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã:</b>",
        reply_markup=get_cancel_keyboard(),
        parse_mode='HTML'
    )

@dp.message(GoogleSheetsStates.waiting_sheet_id)
async def process_sheet_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–∞–±–ª–∏—Ü—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            reply_markup=get_sync_settings_keyboard(),
            parse_mode='HTML'
        )
        return
    
    sheet_id = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ID
    if len(sheet_id) < 10 or not await state.clear()
        await message.answer(
            "‚ùå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            reply_markup=get_sync_settings_keyboard(),
            parse_mode='HTML'
        )
        return
    
    sheet_id = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ID
    if len(sheet_id) < 10 or not re.match(r'^[a-zA-Z0-9-_]+$', sheet_id):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>\n\n"
            "ID —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:",
            reply_markup=get_cancel_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
    google_sync.sheet_id = sheet_id
    google_sync.save_settings()
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>ID –¢–ê–ë–õ–ò–¶–´ –°–û–•–†–ê–ù–ï–ù!</b>\n\n"
        f"üìä <b>ID:</b> {sheet_id}\n re.match(r'^[a-zA-Z0-9-_]+$', sheet_id):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>\n\n"
            "ID —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:",
            reply_markup=get_cancel_keyboard(),
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
    google_sync.sheet_id = sheet_id
    google_sync.save_settings()
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ <b>ID –¢–ê–ë–õ–ò–¶–´ –°–û–•–†–ê–ù–ï–ù!</b>\n\n"
        f"üìä <b>ID:</b> {sheet_id}\n\n"
        f"üí´ <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∏–Ω—Ö\n"
        f"üí´ <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</i>",
—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</i>",
        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–ö–õ")
async def cmd_auto_sync_on(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    if not google_sync.sheet_id:
        await message.answer(
            "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã</b>",
            reply_markup=get_sync_settings_keyboard(),
            parse_mode='HTML'
        )
        return
    
    google_sync.auto_sync = True
    google_sync.save_settings()
    
    await message.answer(
        "‚úÖ <b>–ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–ö–õ–Æ–ß–ï–ù–ê</b>\n\n"
        "üí´        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–ö–õ")
async def cmd_auto_sync_on(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    if not google_sync.sheet_id:
        await message.answer(
            "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã</b>",
            reply_markup=get_sync_settings_keyboard(),
            parse_mode='HTML'
        )
        return
    
    google_sync.auto_sync = True
    google_sync.save_settings()
    
    await message.answer(
        "‚úÖ <b>–ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–ö–õ–Æ–ß–ï–ù–ê</b>\n\n"
        "üí´ <i>–¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ Google Sheets –ø—Ä–∏ <i>–¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ Google Sheets –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>",
        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚è∏Ô∏è –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–´–ö–õ")
async def cmd_auto_sync_off(message: types.Message):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    google_sync.auto_sync = False
    google_s –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>",
        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚è∏Ô∏è –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–´–ö–õ")
async def cmd_auto_sync_off(message: types.Message):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    google_sync.auto_sync = Falseync.save_settings()
    
    await message.answer(
        "‚è∏Ô∏è <b>–ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–´–ö–õ–Æ–ß–ï–ù–ê</b>\n\n"
        "üí´ <i>
    google_sync.save_settings()
    
    await message.answer(
        "‚è∏Ô∏è <b>–ê–í–¢–û–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–´–ö–õ–Æ–ß–ï–ù–ê</b>\n\n"
        "üí´ <i–î–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ Google Sheets</i>",
        reply_markup=get_sync_settings_keyboard(),
        parse_mode='HTML'
>–î–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ Google Sheets</i>",
        reply_markup=get_sync_settings_keyboard(),
        parse    )

@dp.message(F.text == "üóëÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
async def cmd_disable_sync(message: types.Message):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    google_sync.sheet_id = None
_mode='HTML'
    )

@dp.message(F.text == "üóëÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
async def cmd_disable_sync(message: types.Message):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    google_sync.sheet_id = None
    google_s    google_sync.auto_sync = False
    google_sync.save_settings()
    
    await message.answer(
        "üóëÔ∏è <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ûync.auto_sync = False
    google_sync.save_settings()
    
    await message.answer(
        "üóëÔ∏è <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¢–ö–õ–Æ–ß–ï–ù–ê</b>\n\n"
        "üí´ <i>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã</i–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê</b>\n\n"
        "üí´ <i>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã</i>",
        reply_markup=get_sync>",
        reply_markup=get_sync_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("sync_test"))
async def cmd_sync_test(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("sync_test"))
async def cmd_sync_test(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–∑–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
    
    success, result_message = await google_sync.test_connection()
 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
    
    success, result_message = await google_sync.test_connection()
    
    if success:
        await message.answer(f"‚úÖ {result_message}")
    else:
        await message.answer(f"‚ùå {result_message}")

@dp.message(Command("create_s    
    if success:
        await message.answer(f"‚úÖ {result_message}")
    else:
        await message.answer(f"‚ùå {result_message}")

@dp.message(Command("create_sheet"))
async def cmd_create_sheet(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ãheet"))
async def cmd_create_sheet(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã ( (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        import gspread
        from google.oauth2.service_account import Credentials
        
        if not config.GO–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        import gspread
        from google.oauth2.service_account import Credentials
        
        if not config.GOOGLE_SHEETS_CREDOGLE_SHEETS_CREDENTIALS:
            await message.answer("‚ùå GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        credentials_info = json.loads(config.GOOGENTIALS:
            await message.answer("‚ùå GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        credentials_info = json.loads(config.GOOGLE_SHEETS_CREDENTIALS)
        scope = [
            'https://www.googleapis.com/auth/spreadLE_SHEETS_CREDENTIALS)
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
sheets',
            'https://www.googleapis.com/auth/drive'
        ]
        credentials = Credentials.from_service_account_info(credentials_info, scopes=scope)
        gc = gspread.authorize(credentials)
        
            'https://www.googleapis.com/auth/drive'
        ]
        credentials = Credentials.from_service_account_info(credentials_info, scopes=scope)
        gc = gspread.author        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = gc.create('–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä –î–∞–Ω–Ω—ã–µ')
        
        # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
ize(credentials)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = gc.create('–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä –î–∞–Ω–Ω—ã–µ')
        
        # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏
        spreadsheet.share(None, perm_type='anyone', role='writer')
        
        spreadsheet.share(None, perm_type='anyone', role='writer        sheet_id = spreadsheet.id
        sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/edit"
        
        await message.answer(
            f"‚úÖ <b>–ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê –°–û–ó–î–ê–ù–ê</b')
        
        sheet_id = spreadsheet.id
        sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/edit"
        
        await message.answer(
            f"‚úÖ <b>–ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê –°–û–ó–î–ê–ù–ê</b>\n\n"
            f>\n\n"
            f"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> <code>{sheet_id}</code>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {"üìä <b>ID —Ç–∞–±–ª–∏—Ü—ã:</b> <code>{sheet_id}</code>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</bsheet_url}\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</i>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await message.> {sheet_url}\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</i>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")

# ========== –ó–ê–ü–£answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")

# ========== –ó–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate()
        
       ()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        await check_and_update_schema()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤ # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        await check_and_update_schema()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(send_personalized_reminders())
        asyncio.create_task(health_monitoring—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(send_personalized_reminders())
        asyncio.create_task(health_task())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        dp.errors.register(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("–ë–æ—Ç –∑–∞–ø—É_monitoring_task())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        dp.errors.register(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
        
    except Exception as—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if config.ADMIN_ID:
            try e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if config.ADMIN_ID:
            try:
                await bot.send_message(config.ADMIN_ID, f"üö® –ë–æ—Ç —É–ø–∞:
                await bot.send_message(config.ADMIN_ID, f"üö® –ë–æ—Ç–ª: {e}")
            except:
                pass
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info —É–ø–∞–ª: {e}")
            except:
                pass
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
