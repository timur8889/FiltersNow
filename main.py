import logging
import sqlite3
import schedule
import time
import asyncio
from datetime import datetime, timedelta
from threading import Thread
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, ReplyKeyboardMarkup, KeyboardButton
import os
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME"
CHANNEL_ID = "@timur_onion"
ADMIN_IDS = [5024165375]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.conn = sqlite3.connect('channel_bot.db', check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scheduled_posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                message_text TEXT,
                media_path TEXT,
                scheduled_time DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()

    def add_scheduled_post(self, chat_id: int, message_text: str, scheduled_time: datetime, media_path: str = None):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO scheduled_posts (chat_id, message_text, media_path, scheduled_time)
            VALUES (?, ?, ?, ?)
        ''', (chat_id, message_text, media_path, scheduled_time))
        self.conn.commit()
        return cursor.lastrowid

    def get_pending_posts(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT * FROM scheduled_posts 
            WHERE scheduled_time <= datetime('now') 
            ORDER BY scheduled_time ASC
        ''')
        return cursor.fetchall()

    def delete_scheduled_post(self, post_id: int):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM scheduled_posts WHERE id = ?', (post_id,))
        self.conn.commit()

    def get_all_scheduled_posts(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM scheduled_posts ORDER BY scheduled_time ASC')
        return cursor.fetchall()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è PTB v13.x
class ChannelBot:
    def __init__(self, token: str):
        self.updater = Updater(token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        self.db = Database()
        self.setup_handlers()
        self.setup_scheduler()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è PTB v13"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("start", self.start))
        self.dispatcher.add_handler(CommandHandler("help", self.help_command))
        self.dispatcher.add_handler(CommandHandler("post", self.post_to_channel))
        self.dispatcher.add_handler(CommandHandler("schedule", self.schedule_post))
        self.dispatcher.add_handler(CommandHandler("posts_list", self.list_scheduled_posts))
        self.dispatcher.add_handler(CommandHandler("stats", self.show_stats))
        self.dispatcher.add_handler(CommandHandler("menu", self.show_main_menu))
        self.dispatcher.add_handler(CommandHandler("cancel", self.cancel_action))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.dispatcher.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dispatcher.add_handler(
            MessageHandler(Filters.text & ~Filters.command, self.handle_message)
        )
        self.dispatcher.add_handler(
            MessageHandler(Filters.photo, self.handle_photo)
        )
        self.dispatcher.add_handler(
            MessageHandler(Filters.document, self.handle_document)
        )

    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        def check_pending_posts():
            try:
                pending_posts = self.db.get_pending_posts()
                for post in pending_posts:
                    try:
                        self.send_scheduled_post(post)
                        self.db.delete_scheduled_post(post[0])
                        logger.info(f"Scheduled post {post[0]} sent to channel")
                    except Exception as e:
                        logger.error(f"Error sending scheduled post {post[0]}: {e}")
            except Exception as e:
                logger.error(f"Error in scheduler: {e}")

        schedule.every(1).minutes.do(check_pending_posts)
        
        def run_scheduler():
            while True:
                schedule.run_pending()
                time.sleep(1)
        
        scheduler_thread = Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()

    def send_scheduled_post(self, post):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            bot = self.updater.bot
            if post[3]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
                if post[3].endswith(('.jpg', '.jpeg', '.png')):
                    bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=open(post[3], 'rb'),
                        caption=post[2],
                        parse_mode="HTML"
                    )
                else:
                    bot.send_document(
                        chat_id=CHANNEL_ID,
                        document=open(post[3], 'rb'),
                        caption=post[2],
                        parse_mode="HTML"
                    )
            else:
                bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=post[2],
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"Error sending scheduled post: {e}")

    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"""
        keyboard = [
            [
                KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"), 
                KeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")
            ],
            [
                KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"), 
                KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), 
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

    def get_admin_keyboard(self):
        """–ê–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)"""
        keyboard = [
            [
                KeyboardButton("üìù –ë—ã—Å—Ç—Ä—ã–π –ø–æ—Å—Ç"), 
                KeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
            ],
            [
                KeyboardButton("üìã –í—Å–µ –ø–æ—Å—Ç—ã"), 
                KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton("üñºÔ∏è –ú–µ–¥–∏–∞ –º–µ–Ω—é"), 
                KeyboardButton("‚ö° –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            ],
            [
                KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), 
                KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

    def get_media_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞"""
        keyboard = [
            [
                KeyboardButton("üì∏ –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç"), 
                KeyboardButton("üìé –î–æ–∫—É–º–µ–Ω—Ç + —Ç–µ–∫—Å—Ç")
            ],
            [
                KeyboardButton("üñºÔ∏è –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ"), 
                KeyboardButton("üìÑ –¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç")
            ],
            [
                KeyboardButton("üîô –ù–∞–∑–∞–¥"), 
                KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞")
            ]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

    def get_tools_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        keyboard = [
            [
                KeyboardButton("üïê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç—ã"), 
                KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ")
            ],
            [
                KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), 
                KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            ],
            [
                KeyboardButton("üîô –ù–∞–∑–∞–¥"), 
                KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

    def get_inline_post_keyboard(self):
        """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now"),
                InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_this")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_post"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_post")
            ],
            [
                InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="add_media"),
                InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="set_time")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_inline_schedule_keyboard(self):
        """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        keyboard = [
            [
                InlineKeyboardButton("‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="schedule_1h"),
                InlineKeyboardButton("‚è∞ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data="schedule_3h")
            ],
            [
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ", callback_data="schedule_tomorrow_morning"),
                InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä", callback_data="schedule_tomorrow_evening")
            ],
            [
                InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="schedule_custom"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_schedule")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    def start(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü§ñ –Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–º {CHANNEL_ID}

‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
‚Ä¢ üñºÔ∏è –†–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
        """
        
        if self.is_admin(update):
            update.message.reply_text(
                welcome_text,
                reply_markup=self.get_admin_keyboard(),
                parse_mode="HTML"
            )
        else:
            update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞.",
                reply_markup=self.get_main_keyboard()
            )

    def show_main_menu(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if self.is_admin(update):
            update.message.reply_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_admin_keyboard(),
                parse_mode="HTML"
            )
        else:
            update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=self.get_main_keyboard()
            )

    def cancel_action(self, update: Update, context):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        context.user_data.clear()
        update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=self.get_admin_keyboard() if self.is_admin(update) else self.get_main_keyboard()
        )

    def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /post [—Ç–µ–∫—Å—Ç]

üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ ¬´üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª - —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
‚Ä¢ –§–æ—Ä–º–∞—Ç: ¬´—Ç–µ–∫—Å—Ç¬ª HH:MM DD.MM.YYYY

üñºÔ∏è <b>–ú–µ–¥–∏–∞:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–¥–∏–∞-–º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ ¬´üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤¬ª - –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
‚Ä¢ ¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞

‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/post - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/posts_list - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
        """
        update.message.reply_text(help_text, parse_mode="HTML")

    def post_to_channel(self, update: Update, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        if not self.is_admin(update):
            update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if context.args:
            message_text = " ".join(context.args)
        else:
            if update.message.reply_to_message:
                message_text = update.message.reply_to_message.text or update.message.reply_to_message.caption
            else:
                update.message.reply_text(
                    "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /post\n"
                    "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /post"
                )
                return

        try:
            context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=message_text,
                parse_mode="HTML"
            )
            update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
            logger.info(f"Post sent to channel by {update.effective_user.id}")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"
            update.message.reply_text(error_msg)
            logger.error(f"Error posting to channel: {e}")

    def schedule_post(self, update: Update, context):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
        if not self.is_admin(update):
            update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if not context.args:
            update.message.reply_text(
                "‚è∞ –§–æ—Ä–º–∞—Ç: /schedule \"—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\" HH:MM DD.MM.YYYY\n"
                "–ü—Ä–∏–º–µ—Ä: /schedule \"–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\" 14:30 25.12.2024"
            )
            return

        try:
            message_parts = " ".join(context.args).split('"')
            if len(message_parts) < 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            message_text = message_parts[1]
            time_date = message_parts[2].strip().split()
            
            if len(time_date) < 2:
                raise ValueError("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É")
            
            time_str = time_date[0]
            date_str = time_date[1] if len(time_date) > 1 else datetime.now().strftime("%d.%m.%Y")
            
            scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
            
            if scheduled_time <= datetime.now():
                update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º!")
                return
            
            post_id = self.db.add_scheduled_post(
                update.effective_chat.id,
                message_text,
                scheduled_time
            )
            
            update.message.reply_text(
                f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"ID –ø–æ—Å—Ç–∞: {post_id}"
            )
            
        except ValueError as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def list_scheduled_posts(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        if not self.is_admin(update):
            update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        posts = self.db.get_all_scheduled_posts()
        
        if not posts:
            update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        posts_text = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
        for post in posts:
            post_time = datetime.strptime(post[4], "%Y-%m-%d %H:%M:%S")
            posts_text += f"üÜî {post[0]}: {post[2][:50]}...\n"
            posts_text += f"‚è∞ {post_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        update.message.reply_text(posts_text)

    def show_stats(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.is_admin(update):
            update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        posts = self.db.get_all_scheduled_posts()
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        update.message.reply_text(stats_text)

    def handle_photo(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if not self.is_admin(update):
            return

        keyboard = [
            [InlineKeyboardButton("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="publish_photo")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.user_data['last_photo'] = update.message.photo[-1].file_id
        context.user_data['last_caption'] = update.message.caption
        
        update.message.reply_text(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    def handle_document(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not self.is_admin(update):
            return

        update.message.reply_text(
            "üìé –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/post —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"
        )

    def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫"""
        if not self.is_admin(update):
            update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞")
            return

        text = update.message.text
        
        if text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç" or text == "üìù –ë—ã—Å—Ç—Ä—ã–π –ø–æ—Å—Ç":
            update.message.reply_text(
                "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/post –≤–∞—à —Ç–µ–∫—Å—Ç</code>\n\n"
                "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /post",
                parse_mode="HTML"
            )
            
        elif text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" or text == "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫":
            update.message.reply_text(
                "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                "–§–æ—Ä–º–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                "<code>/schedule \"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\" 14:30 25.12.2024</code>\n\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=self.get_inline_schedule_keyboard(),
                parse_mode="HTML"
            )
            
        elif text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤" or text == "üìã –í—Å–µ –ø–æ—Å—Ç—ã":
            self.list_scheduled_posts(update, context)
            
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            self.show_stats(update, context)
            
        elif text == "üñºÔ∏è –ú–µ–¥–∏–∞ –º–µ–Ω—é":
            update.message.reply_text(
                "üñºÔ∏è <b>–ú–µ–¥–∏–∞ –º–µ–Ω—é</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞-–ø–æ—Å—Ç–∞:",
                reply_markup=self.get_media_keyboard(),
                parse_mode="HTML"
            )
            
        elif text == "‚ö° –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
            update.message.reply_text(
                "‚ö° <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=self.get_tools_keyboard(),
                parse_mode="HTML"
            )
            
        elif text == "üîô –ù–∞–∑–∞–¥":
            update.message.reply_text(
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...",
                reply_markup=self.get_admin_keyboard()
            )
            
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.show_main_menu(update, context)
            
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            self.help_command(update, context)
            
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            update.message.reply_text(
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß",
                parse_mode="HTML"
            )
            
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
            update.message.reply_text(
                f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
                reply_markup=self.get_admin_keyboard()
            )

    def button_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        query.answer()
        
        data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
        if data.startswith("schedule_"):
            self.handle_schedule_buttons(query, context, data)
        elif data == "publish_now":
            query.edit_message_text("üì¢ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
            # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        elif data == "edit_post":
            query.edit_message_text("‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            # –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        elif data == "delete_post":
            query.edit_message_text("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç...")
            # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        elif data == "publish_photo":
            self.publish_photo_handler(query, context)
        else:
            # –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            if data == "create_post":
                query.edit_message_text(
                    "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /post –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                )
            elif data == "schedule_post":
                query.edit_message_text(
                    "‚è∞ –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/schedule \"—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\" HH:MM DD.MM.YYYY"
                )

    def handle_schedule_buttons(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        now = datetime.now()
        
        if data == "schedule_1h":
            scheduled_time = now + timedelta(hours=1)
            query.edit_message_text(f"‚è∞ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M')}")
        elif data == "schedule_3h":
            scheduled_time = now + timedelta(hours=3)
            query.edit_message_text(f"‚è∞ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M')}")
        elif data == "schedule_tomorrow_morning":
            tomorrow = now + timedelta(days=1)
            scheduled_time = tomorrow.replace(hour=9, minute=0, second=0, microsecond=0)
            query.edit_message_text(f"üìÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ (09:00)")
        elif data == "schedule_tomorrow_evening":
            tomorrow = now + timedelta(days=1)
            scheduled_time = tomorrow.replace(hour=18, minute=0, second=0, microsecond=0)
            query.edit_message_text(f"üìÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä (18:00)")
        elif data == "schedule_custom":
            query.edit_message_text(
                "üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>HH:MM DD.MM.YYYY</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>14:30 25.12.2024</code>",
                parse_mode="HTML"
            )
        elif data == "cancel_schedule":
            query.edit_message_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    def publish_photo_handler(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"""
        photo_id = context.user_data.get('last_photo')
        caption = context.user_data.get('last_caption', '')
        
        if photo_id:
            try:
                context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=photo_id,
                    caption=caption,
                    parse_mode="HTML"
                )
                query.edit_message_text("‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
            except Exception as e:
                query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            query.edit_message_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    def is_admin(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        return user_id in ADMIN_IDS

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ–Ω—é!")
        self.updater.start_polling()
        self.updater.idle()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –∫–æ–¥–µ!")
        exit(1)
    
    bot = ChannelBot(BOT_TOKEN)
    bot.run()
