pip install python-telegram-bot
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_FILTER_NAME, SET_INSTALL_DATE, SET_EXPIRY_DAYS = range(3)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤–º–µ—Å—Ç–æ –ë–î)
filters_db = {}
notifications_jobs = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = [["–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"], ["–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"]]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
def parse_date(date_str: str) -> datetime:
    return datetime.strptime(date_str, "%d.%m.%Y").date()

def format_date(date: datetime) -> str:
    return date.strftime("%d.%m.%Y")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def check_expiry(context: CallbackContext) -> None:
    chat_id = context.job.chat_id
    for filter_name, filter_data in filters_db.get(chat_id, {}).items():
        expiry_date = filter_data["expiry_date"]
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry == 3:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä '{filter_name}' —á–µ—Ä–µ–∑ 3 –¥–Ω—è!\n"
                     f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞: {format_date(expiry_date)}",
            )

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é:",
        reply_markup=reply_markup,
    )

async def add_filter_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=ReplyKeyboardRemove(),
    )
    return SET_FILTER_NAME

async def set_filter_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["filter_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return SET_INSTALL_DATE

async def set_install_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        install_date = parse_date(update.message.text)
        context.user_data["install_date"] = install_date
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö):")
        return SET_EXPIRY_DAYS
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return SET_INSTALL_DATE

async def set_expiry_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        expiry_days = int(update.message.text)
        chat_id = update.effective_chat.id
        filter_data = {
            "install_date": context.user_data["install_date"],
            "expiry_date": context.user_data["install_date"] + timedelta(days=expiry_days),
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if chat_id not in filters_db:
            filters_db[chat_id] = {}
        filters_db[chat_id][context.user_data["filter_name"]] = filter_data
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if chat_id not in notifications_jobs:
            job_queue = context.application.job_queue
            notifications_jobs[chat_id] = job_queue.run_repeating(
                check_expiry,
                interval=timedelta(hours=24),
                chat_id=chat_id,
            )
        
        reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"–§–∏–ª—å—Ç—Ä '{context.user_data['filter_name']}' –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ: {format_date(filter_data['expiry_date'])}",
            reply_markup=reply_markup,
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
        return SET_EXPIRY_DAYS

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if not filters_db.get(chat_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        return
    
    text = "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for name, data in filters_db[chat_id].items():
        text += (
            f"üîß {name}\n"
            f"üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {format_date(data['install_date'])}\n"
            f"‚è∞ –°—Ä–æ–∫ –¥–æ: {format_date(data['expiry_date'])}\n\n"
        )
    await update.message.reply_text(text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True),
    )
    return ConversationHandler.END

def main() -> None:
    application = ApplicationBuilder().token("8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM").build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä$"), add_filter_start)],
        states={
            SET_FILTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_filter_name)],
            SET_INSTALL_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_install_date)],
            SET_EXPIRY_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_expiry_days)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã$"), show_filters))

    application.run_polling()

if __name__ == "__main__":
    main()
