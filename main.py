import os
import logging
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            filter_name TEXT NOT NULL,
            install_date TEXT NOT NULL,
            replacement_date TEXT NOT NULL,
            reminder_days INTEGER DEFAULT 3,
            is_active INTEGER DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
def save_to_excel(user_id):
    conn = sqlite3.connect('filters.db')
    df = pd.read_sql_query('SELECT * FROM filters WHERE user_id = ?', conn, params=(user_id,))
    
    if not df.empty:
        filename = f'filters_{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        df.to_excel(filename, index=False)
        conn.close()
        return filename
    conn.close()
    return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data='list_filters')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data='add_filter')],
        [InlineKeyboardButton("üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel", callback_data='export_excel')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data='reminder_settings')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
def filter_actions_keyboard(filter_id):
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{filter_id}'),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{filter_id}')
        ],
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f'change_date_{filter_id}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    welcome_text = """
üíß **–ë–æ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ–¥—ã**

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤–æ–¥—ã:
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –¥–∞—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ –∑–∞–º–µ–Ω—ã
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–¥–∞–ª—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await update.message.reply_text(welcome_text, reply_markup=main_menu_keyboard(), parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üíß **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def list_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM filters WHERE user_id = ? AND is_active = 1', (user_id,))
    filters = cursor.fetchall()
    conn.close()
    
    if not filters:
        await query.edit_message_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data='add_filter')]])
        )
        return
    
    text = "üìã **–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:**\n\n"
    keyboard = []
    
    for filter in filters:
        filter_id, _, name, install_date, replacement_date, reminder_days, _ = filter
        repl_date = datetime.strptime(replacement_date, '%Y-%m-%d')
        days_left = (repl_date - datetime.now()).days
        
        status = "üî¥" if days_left < 0 else "üü°" if days_left <= reminder_days else "üü¢"
        text += f"{status} **{name}**\n"
        text += f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {install_date}\n"
        text += f"–ó–∞–º–µ–Ω–∞: {replacement_date} ({days_left} –¥–Ω–µ–π)\n\n"
        
        keyboard.append([InlineKeyboardButton(f"‚öôÔ∏è {name}", callback_data=f'filter_{filter_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
async def filter_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    filter_id = query.data.split('_')[1]
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM filters WHERE id = ?', (filter_id,))
    filter_data = cursor.fetchone()
    conn.close()
    
    if filter_data:
        _, _, name, install_date, replacement_date, reminder_days, _ = filter_data
        repl_date = datetime.strptime(replacement_date, '%Y-%m-%d')
        days_left = (repl_date - datetime.now()).days
        
        text = f"**{name}**\n\n"
        text += f"üìÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_date}\n"
        text += f"üîÑ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {replacement_date}\n"
        text += f"‚è∞ –î–Ω–µ–π –¥–æ –∑–∞–º–µ–Ω—ã: {days_left}\n"
        text += f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞: {reminder_days} –¥–Ω–µ–π"
        
        await query.edit_message_text(text, 
                                    reply_markup=filter_actions_keyboard(filter_id),
                                    parse_mode='Markdown')

# –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
async def add_filter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['adding_filter'] = True
    context.user_data['filter_stage'] = 'name'
    
    await query.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='main_menu')]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user_id = update.effective_user.id
    
    if user_data.get('adding_filter'):
        if user_data.get('filter_stage') == 'name':
            user_data['filter_name'] = update.message.text
            user_data['filter_stage'] = 'install_date'
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î):",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='main_menu')]])
            )
        
        elif user_data.get('filter_stage') == 'install_date':
            try:
                install_date = datetime.strptime(update.message.text, '%Y-%m-%d')
                user_data['install_date'] = update.message.text
                user_data['filter_stage'] = 'lifespan'
                await update.message.reply_text(
                    "‚è∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –¥–Ω—è—Ö:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='main_menu')]])
                )
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        
        elif user_data.get('filter_stage') == 'lifespan':
            try:
                lifespan = int(update.message.text)
                install_date = datetime.strptime(user_data['install_date'], '%Y-%m-%d')
                replacement_date = (install_date + timedelta(days=lifespan)).strftime('%Y-%m-%d')
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('filters.db')
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO filters (user_id, filter_name, install_date, replacement_date)
                    VALUES (?, ?, ?, ?)
                ''', (user_id, user_data['filter_name'], user_data['install_date'], replacement_date))
                conn.commit()
                conn.close()
                
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                user_data.clear()
                
                await update.message.reply_text(
                    f"‚úÖ –§–∏–ª—å—Ç—Ä '{user_data['filter_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {replacement_date}",
                    reply_markup=main_menu_keyboard()
                )
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
async def delete_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    filter_id = query.data.split('_')[1]
    
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM filters WHERE id = ?', (filter_id,))
    conn.commit()
    conn.close()
    
    await query.edit_message_text(
        "‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=main_menu_keyboard()
    )

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
async def change_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    filter_id = query.data.split('_')[2]
    context.user_data['editing_filter'] = filter_id
    context.user_data['editing_stage'] = 'new_date'
    
    await query.edit_message_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='main_menu')]])
    )

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    filename = save_to_excel(user_id)
    
    if filename:
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=open(filename, 'rb'),
            caption="üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel"
        )
        os.remove(filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
            reply_markup=main_menu_keyboard()
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT f.user_id, f.filter_name, f.replacement_date, f.reminder_days 
        FROM filters f 
        WHERE f.is_active = 1
    ''')
    filters = cursor.fetchall()
    conn.close()
    
    for filter in filters:
        user_id, name, replacement_date, reminder_days = filter
        repl_date = datetime.strptime(replacement_date, '%Y-%m-%d')
        days_until_replacement = (repl_date - datetime.now()).days
        
        if 0 <= days_until_replacement <= reminder_days:
            message = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞**\n\n"
            message += f"–§–∏–ª—å—Ç—Ä: {name}\n"
            message += f"–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {replacement_date}\n"
            message += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_replacement}\n\n"
            message += "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–≤—Ä–µ–º—è –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä!"
            
            try:
                await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token("8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(CallbackQueryHandler(list_filters, pattern='^list_filters$'))
    application.add_handler(CallbackQueryHandler(add_filter_start, pattern='^add_filter$'))
    application.add_handler(CallbackQueryHandler(export_to_excel, pattern='^export_excel$'))
    application.add_handler(CallbackQueryHandler(filter_detail, pattern='^filter_'))
    application.add_handler(CallbackQueryHandler(delete_filter, pattern='^delete_'))
    application.add_handler(CallbackQueryHandler(change_date, pattern='^change_date_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    job_queue = application.job_queue
    job_queue.run_repeating(check_reminders, interval=86400, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
