import logging
import sqlite3
import pandas as pd
import io
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME'
ADMIN_ID = 5024165375

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                filter_type TEXT,
                location TEXT,
                last_change DATE,
                expiry_date DATE,
                lifetime_days INTEGER)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
    cur.execute('''CREATE TABLE IF NOT EXISTS filter_standards (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                filter_type TEXT UNIQUE,
                lifetime_days INTEGER,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    cur.execute("SELECT COUNT(*) FROM filter_standards")
    count = cur.fetchone()[0]
    
    if count == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        default_standards = [
            ("–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10", 180, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"),
            ("–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20", 180, "–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"),
            ("–ì–µ–π–∑–µ—Ä", 365, "–§–∏–ª—å—Ç—Ä-–∫—É–≤—à–∏–Ω –ì–µ–π–∑–µ—Ä"),
            ("–ê–∫–≤–∞—Ñ–æ—Ä", 365, "–§–∏–ª—å—Ç—Ä-–∫—É–≤—à–∏–Ω –ê–∫–≤–∞—Ñ–æ—Ä"),
            ("–£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", 180, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"),
            ("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä", 90, "–§–∏–ª—å—Ç—Ä –≥—Ä—É–±–æ–π –æ—á–∏—Å—Ç–∫–∏"),
            ("–£–§-–ª–∞–º–ø–∞", 365, "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ç–æ—Ä"),
            ("–û–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å", 365, "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Å–∞")
        ]
        cur.executemany('''INSERT INTO filter_standards (filter_type, lifetime_days, description) 
                          VALUES (?, ?, ?)''', default_standards)
    
    conn.commit()
    conn.close()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
def get_lifetime_by_type(filter_type):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    cur.execute("SELECT lifetime_days FROM filter_standards WHERE filter_type = ?", (filter_type,))
    result = cur.fetchone()
    
    if result:
        conn.close()
        return result[0]
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    cur.execute("SELECT filter_type, lifetime_days FROM filter_standards")
    standards = cur.fetchall()
    conn.close()
    
    filter_type_lower = filter_type.lower()
    for standard_type, days in standards:
        if standard_type.lower() in filter_type_lower:
            return days
    
    return 180

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def export_to_excel(user_id):
    try:
        conn = sqlite3.connect('filters.db')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = '''SELECT id, filter_type, location, last_change, expiry_date, lifetime_days 
                   FROM filters WHERE user_id = ?'''
        df = pd.read_sql_query(query, conn, params=(user_id,))
        conn.close()

        if df.empty:
            return None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –æ—Å—Ç–∞—Ç–∫–æ–º –¥–Ω–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        today = pd.to_datetime('today').date()
        df['expiry_date'] = pd.to_datetime(df['expiry_date']).dt.date
        df['days_until_expiry'] = (df['expiry_date'] - today).dt.days
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        def get_status(days):
            if days <= 0:
                return "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
            elif days <= 7:
                return "üü° –°–†–û–ß–ù–û"
            elif days <= 30:
                return "üîî –°–ö–û–†–û"
            else:
                return "‚úÖ –ù–û–†–ú–ê"
        
        df['status'] = df['days_until_expiry'].apply(get_status)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã', index=False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏
            conn = sqlite3.connect('filters.db')
            standards_df = pd.read_sql_query("SELECT filter_type, lifetime_days, description FROM filter_standards", conn)
            conn.close()
            standards_df.to_excel(writer, sheet_name='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏', index=False)
        
        output.seek(0)
        return output, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel"
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def import_from_excel(user_id, file_content):
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(file_content, sheet_name='–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['filter_type', 'location', 'last_change', 'lifetime_days']
        if not all(col in df.columns for col in required_columns):
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏."

        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()

        imported_count = 0
        errors = []
        
        for index, row in df.iterrows():
            try:
                filter_type = str(row['filter_type']).strip()
                location = str(row['location']).strip()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã
                if pd.isna(row['last_change']):
                    last_change = datetime.now().date()
                else:
                    try:
                        last_change = pd.to_datetime(row['last_change']).date()
                    except:
                        last_change = datetime.now().date()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
                if pd.isna(row['lifetime_days']):
                    lifetime_days = get_lifetime_by_type(filter_type)
                else:
                    try:
                        lifetime_days = int(row['lifetime_days'])
                    except:
                        lifetime_days = get_lifetime_by_type(filter_type)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                expiry_date = last_change + timedelta(days=lifetime_days)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                if 'expiry_date' in df.columns and not pd.isna(row['expiry_date']):
                    try:
                        expiry_date = pd.to_datetime(row['expiry_date']).date()
                    except:
                        pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é –¥–∞—Ç—É
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –±–∞–∑—É
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                           (user_id, filter_type, location, last_change, expiry_date, lifetime_days))
                
                imported_count += 1
                
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: {str(e)}")
                continue

        conn.commit()
        conn.close()
        
        result_message = f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}"
        if errors:
            result_message += f"\n\n‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):\n" + "\n".join(errors[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        
        return True, result_message
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Excel: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_selection = State()
    waiting_common_location = State()
    waiting_common_change_date = State()
    waiting_common_lifetime = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    return keyboard

def get_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    )
    keyboard.row(
        types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üìä Excel")
    )
    keyboard.row(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def get_excel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"),
        types.KeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
    )
    keyboard.row(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(
        types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"),
        types.KeyboardButton("üìã –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ")
    )
    keyboard.row(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_multiple_filters_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type FROM filter_standards ORDER BY filter_type")
    filter_types = [row[0] for row in cur.fetchall()]
    conn.close()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    for i in range(0, len(filter_types), 2):
        if i + 1 < len(filter_types):
            keyboard.row(
                types.KeyboardButton(filter_types[i]),
                types.KeyboardButton(filter_types[i + 1])
            )
        else:
            keyboard.add(types.KeyboardButton(filter_types[i]))
    
    keyboard.row(
        types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"),
        types.KeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä")
    )
    keyboard.row(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_location_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ"))
    keyboard.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("üìÖ 90 –¥–Ω–µ–π"),
        types.KeyboardButton("üìÖ 180 –¥–Ω–µ–π"),
        types.KeyboardButton("üìÖ 365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_edit_field_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è∞ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"))
    return keyboard

def get_confirmation_keyboard(filter_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{filter_id}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üíß <i>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤!</i>\n\n"
        "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä\n"
        "‚Ä¢ ‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ üìä Excel - —ç–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Excel"
@dp.message_handler(lambda message: message.text == "üìä Excel")
async def cmd_excel(message: types.Message):
    await message.answer(
        "üìä <b>–†–∞–±–æ—Ç–∞ —Å Excel</b>\n\n"
        "üìà <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª\n"
        "‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel - –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞\n\n"
        "üí° <i>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Excel (.xlsx)</i>",
        parse_mode='HTML',
        reply_markup=get_excel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
@dp.message_handler(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def cmd_export_excel(message: types.Message):
    file_data, result_message = export_to_excel(message.from_user.id)
    if file_data:
        await message.answer_document(
            document=types.InputFile(file_data, filename=f"—Ñ–∏–ª—å—Ç—Ä—ã_{message.from_user.id}_{datetime.now().strftime('%Y%m%d')}.xlsx"),
            caption=result_message,
            reply_markup=get_excel_keyboard()
        )
    else:
        await message.answer(result_message, reply_markup=get_excel_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–º–ø–æ—Ä—Ç –∏–∑ Excel"
@dp.message_handler(lambda message: message.text == "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
async def cmd_import_excel(message: types.Message):
    await message.answer(
        "üì• <b>–ò–º–ø–æ—Ä—Ç –∏–∑ Excel</b>\n\n"
        "üìé <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.</i>\n\n"
        "üí° <b>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</b>\n"
        "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: filter_type, location, last_change, lifetime_days\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: expiry_date\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î\n\n"
        "üìù <i>–ï—Å–ª–∏ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    if message.document.mime_type in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
                                     'application/vnd.ms-excel',
                                     'application/octet-stream']:
        
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        success, result_message = import_from_excel(message.from_user.id, downloaded_file)
        
        await message.answer(result_message, reply_markup=get_excel_keyboard())
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!</b>\n\n"
            "üí° <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx)</i>",
            parse_mode='HTML',
            reply_markup=get_excel_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_back_to_management(message: types.Message):
    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await FilterStates.waiting_filter_type.set()
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–π —Ç–∏–ø' –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞</i>",
        parse_mode='HTML',
        reply_markup=get_filter_type_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if message.text == "üìã –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ":
        return
    
    async with state.proxy() as data:
        data['filter_type'] = message.text
        data['lifetime'] = get_lifetime_by_type(message.text)

    await FilterStates.next()
    await message.answer(
        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        "üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ' –∏ –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ" - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
@dp.message_handler(lambda message: message.text == "üìã –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", state=FilterStates.waiting_filter_type)
async def process_multiple_filters_start(message: types.Message, state: FSMContext):
    await MultipleFiltersStates.waiting_filters_selection.set()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    async with state.proxy() as data:
        data['selected_filters'] = []
    
    await message.answer(
        "üìã <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:</b>\n"
        "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ\n"
        "‚Ä¢ 'üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä' - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n"
        "üí° <i>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: –ø–æ–∫–∞ –Ω–µ—Ç</i>",
        parse_mode='HTML',
        reply_markup=get_multiple_filters_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
@dp.message_handler(state=MultipleFiltersStates.waiting_filters_selection)
async def process_multiple_filters_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
        async with state.proxy() as data:
            selected_filters = data['selected_filters']
        
        if not selected_filters:
            await message.answer(
                "‚ùå <b>–°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç!</b>\n\n"
                "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
            return
        
        await MultipleFiltersStates.next()
        
        filters_list = "\n".join([f"‚Ä¢ {filter_type}" for filter_type in selected_filters])
        await message.answer(
            f"üìã <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filters_list}\n\n"
            "üìç <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí° <i>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –º–µ—Å—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏</i>",
            parse_mode='HTML',
            reply_markup=get_location_keyboard()
        )
        return
        
    if message.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä":
        async with state.proxy() as data:
            data['selected_filters'] = []
        
        await message.answer(
            "üîÑ <b>–°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—á–∏—â–µ–Ω</b>\n\n"
            "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ</i>",
            parse_mode='HTML',
            reply_markup=get_multiple_filters_keyboard()
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    async with state.proxy() as data:
        if message.text not in data['selected_filters']:
            data['selected_filters'].append(message.text)
            selected_filters = data['selected_filters']
        else:
            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            data['selected_filters'].remove(message.text)
            selected_filters = data['selected_filters']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if selected_filters:
        filters_text = "\n".join([f"‚Ä¢ {filter_type}" for filter_type in selected_filters])
        status_text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ {len(selected_filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n{filters_text}"
    else:
        status_text = "üí° <i>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: –ø–æ–∫–∞ –Ω–µ—Ç</i>"
    
    await message.answer(
        f"üìã <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        f"{status_text}\n\n"
        "üîß <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n"
        "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è/—É–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ",
        parse_mode='HTML',
        reply_markup=get_multiple_filters_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
@dp.message_handler(state=MultipleFiltersStates.waiting_common_location)
async def process_common_location(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['common_location'] = message.text

    await MultipleFiltersStates.next()
    await message.answer(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):</b>\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>\n\n"
        "üí° <i>–î–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã
@dp.message_handler(state=MultipleFiltersStates.waiting_common_change_date)
async def process_common_change_date(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        change_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        async with state.proxy() as data:
            data['common_change_date'] = change_date
            
        await MultipleFiltersStates.next()
        await message.answer(
            "‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤?</b>\n\n"
            "üí° <i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î</i>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(state=MultipleFiltersStates.waiting_common_lifetime)
async def process_common_lifetime_and_save(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        async with state.proxy() as data:
            selected_filters = data['selected_filters']
            common_location = data['common_location']
            common_change_date = data['common_change_date']
            
            if message.text.endswith("–¥–Ω–µ–π"):
                common_lifetime = int(message.text.split()[1])
            else:
                common_lifetime = int(message.text)
            
            added_count = 0
            today = datetime.now().date()
            
            conn = sqlite3.connect('filters.db')
            cur = conn.cursor()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_type in selected_filters:
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ–±—â–∏–π)
                lifetime = get_lifetime_by_type(filter_type)
                if lifetime == 180:  # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    lifetime = common_lifetime
                
                expiry_date = common_change_date + timedelta(days=lifetime)
                
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                           (message.from_user.id, filter_type, common_location, common_change_date, expiry_date, lifetime))
                added_count += 1
            
            conn.commit()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            expiry_date = common_change_date + timedelta(days=common_lifetime)
            days_until_expiry = (expiry_date - today).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            if days_until_expiry <= 0:
                status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
            elif days_until_expiry <= 7:
                status_icon = "üü° –°–ö–û–†–û –ò–°–¢–ï–ö–ê–ï–¢"
            elif days_until_expiry <= 30:
                status_icon = "üîî –°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
            else:
                status_icon = "‚úÖ –í –ù–û–†–ú–ï"
            
            filters_text = "\n".join([f"‚Ä¢ {filter_type}" for filter_type in selected_filters])
            
            await message.answer(
                f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
                f"üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filters_text}\n\n"
                f"üìç <b>–û–±—â–µ–µ –º–µ—Å—Ç–æ:</b> {common_location}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {common_change_date}\n"
                f"‚è∞ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {common_lifetime} –¥–Ω–µ–π\n"
                f"üìÖ <b>–ì–æ–¥–Ω—ã –¥–æ:</b> {expiry_date}\n"
                f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}",
                parse_mode='HTML',
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏:
# - process_location, process_date, process_lifetime
# - cmd_list, cmd_check, cmd_edit, process_edit_filter_selection, process_edit_field_selection, process_edit_new_value
# - cmd_delete, confirm_delete, process_delete, cancel_delete, back_to_management, back_to_main
# - cmd_stats, cmd_cancel, handle_other_messages

@dp.message_handler(state=FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏)
    async with state.proxy() as data:
        data['location'] = message.text

    await FilterStates.next()
    await message.answer(
        f"üìÖ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è '{data['filter_type']}':</b> {data['lifetime']} –¥–Ω–µ–π\n\n"
        f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):</b>\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_change_date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        change_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            
        await FilterStates.next()
        await message.answer(
            f"‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã {data['lifetime']} –¥–Ω–µ–π?</b>\n\n"
            f"üìÖ <i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î</i>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

@dp.message_handler(state=FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        async with state.proxy() as data:
            change_date = data['change_date']
            filter_type = data['filter_type']
            location = data['location']
            
            if message.text.endswith("–¥–Ω–µ–π"):
                lifetime = int(message.text.split()[1])
            else:
                lifetime = int(message.text)
            
            expiry_date = change_date + timedelta(days=lifetime)
            
            conn = sqlite3.connect('filters.db')
            cur = conn.cursor()
            cur.execute('''INSERT INTO filters 
                        (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                        VALUES (?, ?, ?, ?, ?, ?)''',
                       (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
            conn.commit()
            conn.close()

            days_until_expiry = (expiry_date - datetime.now().date()).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            if days_until_expiry <= 0:
                status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
            elif days_until_expiry <= 7:
                status_icon = "üü° –°–ö–û–†–û –ò–°–¢–ï–ö–ê–ï–¢"
            elif days_until_expiry <= 30:
                status_icon = "üîî –°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
            else:
                status_icon = "‚úÖ –í –ù–û–†–ú–ï"
            
            await message.answer(
                f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {change_date}\n"
                f"‚è∞ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
                f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date}\n"
                f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}",
                parse_mode='HTML',
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "üí° <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä'</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    response = "üìä <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[4]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if days_until_expiry <= 0:
            status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üü° –°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üîî –°–ö–û–†–û"
        else:
            status_icon = "‚úÖ –ù–û–†–ú–ê"
        
        response += (
            f"üÜî <b>ID:</b> {f[0]}\n"
            f"üîß <b>–¢–∏–ø:</b> {f[1]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {f[2]}\n"
            f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {f[3]}\n"
            f"‚è∞ <b>–°—Ä–æ–∫:</b> {f[5]} –¥–Ω–µ–π\n"
            f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {f[4]}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
            f"üì¢ <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}\n\n"
        )

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            "üí° <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    warning_filters = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        if days_until_expiry <= 0:
            expired_filters.append(f"üî¥ {f[0]} ({f[1]}) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        elif days_until_expiry <= 7:
            expiring_soon.append(f"üü° {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω–µ–π")
        elif days_until_expiry <= 30:
            warning_filters.append(f"üîî {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω–µ–π")

    response = "‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
    
    if expired_filters:
        response += "üî¥ <b>–ü–†–û–°–†–û–ß–ï–ù–´:</b>\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "üü° <b>–°–†–û–ß–ù–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(expiring_soon) + "\n\n"
    
    if warning_filters:
        response += "üîî <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(warning_filters) + "\n\n"
    
    if not expired_filters and not expiring_soon and not warning_filters:
        response += "‚úÖ <b>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ!</b>\n\n"
        response += "üí° <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30+ –¥–Ω–µ–π</i>"

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "üîô –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üíß <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)
