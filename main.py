import logging
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_CHAT_ID = 5024165375  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = "8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIO, PHONE, PROBLEM, PRIORITY, DESCRIPTION = range(5)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = [['–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É']]
problem_keyboard = [
    ['–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', '–¢–µ–ª–µ—Ñ–æ–Ω–∏—è'],
    ['–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', '–î–æ–º–æ—Ñ–æ–Ω'],
    ['–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞']
]
priority_keyboard = [['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π'], ['–í—ã—Å–æ–∫–∏–π', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π']]

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    )

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:',
        reply_markup=ReplyKeyboardRemove()
    )
    return FIO

async def fio_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['fio'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    return PHONE

async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['phone'] = update.message.text
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:',
        reply_markup=ReplyKeyboardMarkup(problem_keyboard, resize_keyboard=True)
    )
    return PROBLEM

async def problem_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['problem'] = update.message.text
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:',
        reply_markup=ReplyKeyboardMarkup(priority_keyboard, resize_keyboard=True)
    )
    return PRIORITY

async def priority_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['priority'] = update.message.text
    await update.message.reply_text(
        '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:',
        reply_markup=ReplyKeyboardRemove()
    )
    return DESCRIPTION

async def description_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['description'] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
    application = (
        "üéõ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n"
        f"üë§ *–§–ò–û:* {context.user_data['fio']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data['phone']}\n"
        f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {context.user_data['problem']}\n"
        f"üö® *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {context.user_data['priority']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['description']}\n"
        f"üÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {update.effective_user.id}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=application,
        parse_mode='Markdown'
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$'), start_application)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, fio_received)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_received)],
            PROBLEM: [MessageHandler(filters.Regex('^(–ò–Ω—Ç–µ—Ä–Ω–µ—Ç|–¢–µ–ª–µ—Ñ–æ–Ω–∏—è|–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ|–î–æ–º–æ—Ñ–æ–Ω|–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞)$'), problem_received)],
            PRIORITY: [MessageHandler(filters.Regex('^(–ù–∏–∑–∫–∏–π|–°—Ä–µ–¥–Ω–∏–π|–í—ã—Å–æ–∫–∏–π|–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)$'), priority_received)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
