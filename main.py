import logging
import sqlite3
import os
import asyncio
import shutil
import traceback
import re
import sys
from datetime import datetime, timedelta
from contextlib import contextmanager
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—É–±—Ä–∞–Ω—ã –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π, –ø—Ä–µ—Å—Ç–∏–∂, –∫—Ä–∏—Å—Ç–∞–ª–ª, —É–≥–æ–ª—å–Ω—ã–π)
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365
}

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_FILTERS_PER_USER = 50

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = sqlite3.connect('filters.db')
    conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
    try:
        yield conn
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def safe_db_string(value: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
    if not value:
        return ""
    return re.sub(r'[;\'"\\]', '', value.strip())

def get_user_filters(user_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", (user_id,))
        return [dict(row) for row in cur.fetchall()]

def get_filter_by_id(filter_id, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
        result = cur.fetchone()
        return dict(result) if result else None

def check_filters_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    filters = get_user_filters(user_id)
    return len(filters) >= MAX_FILTERS_PER_USER

def get_all_users_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute('''SELECT COUNT(DISTINCT user_id) as total_users, 
                              COUNT(*) as total_filters,
                              SUM(CASE WHEN expiry_date <= date('now') THEN 1 ELSE 0 END) as expired_filters,
                              SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as expiring_soon
                       FROM filters''')
        result = cur.fetchone()
        return dict(result) if result else {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}

def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute('''SELECT DISTINCT user_id, COUNT(*) as filter_count 
                       FROM filters 
                       GROUP BY user_id 
                       ORDER BY filter_count DESC''')
        return [dict(row) for row in cur.fetchall()]

def clear_all_filters():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM filters")
        conn.commit()
        return cur.rowcount

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –í–ê–õ–ò–î–ê–¶–ò–Ø –í–í–û–î–ê ==========
def validate_date(date_str: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    date_str = date_str.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ —Å–ª—ç—à–∏
    date_str = re.sub(r'[^\d\.\-/]', '', date_str)
    
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d-%m-%y', '%d-%m-%Y', '%d/%m/%y', '%d/%m/%Y']
    
    for fmt in formats:
        try:
            date_obj = datetime.strptime(date_str, fmt).date()
            today = datetime.now().date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º +1 –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∞—Å–∞)
            if date_obj > today + timedelta(days=1):
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–º–∞–∫—Å–∏–º—É–º 5 –ª–µ—Ç –Ω–∞–∑–∞–¥)
            if date_obj < today - timedelta(days=5*365):
                raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
                
            return date_obj
        except ValueError:
            continue
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì")

def validate_lifetime(days_str: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(days_str)
        if days <= 0:
            raise ValueError("–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        if days > 2000:  # –ú–∞–∫—Å–∏–º—É–º ~5.5 –ª–µ—Ç
            raise ValueError("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã")
        return days
    except ValueError:
        raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")

def validate_filter_name(name: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    name = name.strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if len(name) > 100:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏
    if re.search(r'[^\w\s\-\.]', name, re.UNICODE):
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    return safe_db_string(name)

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========

def get_main_keyboard(user_id=None):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id and user_id == ADMIN_ID:
        keyboard.row(types.KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    return keyboard

def get_filter_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (—É–±—Ä–∞–Ω—ã –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π, –ø—Ä–µ—Å—Ç–∏–∂, –∫—Ä–∏—Å—Ç–∞–ª–ª, —É–≥–æ–ª—å–Ω—ã–π)"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –¢–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∏–ª—å—Ç—Ä—ã
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    
    return keyboard

def get_multiple_filters_keyboard():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    keyboard.row(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"))
    keyboard.row(types.KeyboardButton("‚ûï 1 —Ñ–∏–ª—å—Ç—Ä"))
    keyboard.row(types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    
    return keyboard

def get_add_filter_keyboard():
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä"),
        types.KeyboardButton("üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    )
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_location_keyboard():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_filters_list_keyboard(filters, action="delete"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    for f in filters:
        button_text = f"#{f['id']} {f['filter_type']} - {f['location']}"
        keyboard.add(types.KeyboardButton(button_text))
    
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_edit_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"))
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    )
    keyboard.row(
        types.KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"),
        types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

def get_confirmation_keyboard(filter_id=None, action="delete"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if action == "delete":
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{filter_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        )
    elif action == "clear_db":
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É", callback_data="confirm_clear_db"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_db")
        )
    return keyboard

def get_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    )
    keyboard.row(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("3Ô∏è‚É£ 90 –¥–Ω–µ–π"),
        types.KeyboardButton("6Ô∏è‚É£ 180 –¥–Ω–µ–π"),
        types.KeyboardButton("1Ô∏è‚É£ 365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
def init_db():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='filters'")
            table_exists = cur.fetchone()
            
            if not table_exists:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                cur.execute('''CREATE TABLE filters (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            filter_type TEXT,
                            location TEXT,
                            last_change DATE,
                            expiry_date DATE,
                            lifetime_days INTEGER,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                cur.execute('''CREATE INDEX idx_user_id ON filters(user_id)''')
                cur.execute('''CREATE INDEX idx_expiry_date ON filters(expiry_date)''')
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("PRAGMA table_info(filters)")
                columns = [column[1] for column in cur.fetchall()]
                required_columns = ['id', 'user_id', 'filter_type', 'location', 'last_change', 'expiry_date', 'lifetime_days', 'created_at', 'updated_at']
                
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            conn.commit()
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        if os.path.exists('filters.db'):
            backup_name = f'filters_backup_critical_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            shutil.copy2('filters.db', backup_name)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        raise

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        if not os.path.exists('filters.db'):
            logging.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        backup_dir = "backups"
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"filters_backup_{timestamp}.db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_size = os.path.getsize('filters.db')
        if db_size == 0:
            logging.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return False
            
        shutil.copy2('filters.db', backup_file)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file} ({db_size} bytes)")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        backups = sorted([f for f in os.listdir(backup_dir) if f.startswith("filters_backup") and f.endswith(".db")])
        for old_backup in backups[:-10]:
            old_backup_path = os.path.join(backup_dir, old_backup)
            try:
                os.remove(old_backup_path)
                logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é {old_backup}: {e}")
        
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_list = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

class DeleteFilterStates(StatesGroup):
    waiting_filter_selection = State()

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def parse_date(date_str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    return validate_date(date_str)

def format_date_nice(date):
    return date.strftime('%d.%m.%y')

def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

def get_status_icon_and_text(days_until_expiry):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
    elif days_until_expiry <= 7:
        return "üü°", "–°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–¨"
    elif days_until_expiry <= 30:
        return "üü†", "–°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
    else:
        return "‚úÖ", "–í –ù–û–†–ú–ï"

def create_expiry_infographic(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º –∑–∞–º–µ–Ω—ã"""
    today = datetime.now().date()
    expired_count = 0
    expiring_soon_count = 0
    warning_count = 0
    ok_count = 0
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        if days_until_expiry <= 0:
            expired_count += 1
        elif days_until_expiry <= 7:
            expiring_soon_count += 1
        elif days_until_expiry <= 30:
            warning_count += 1
        else:
            ok_count += 1
    
    total = len(filters)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
    infographic = "üìä <b>–ò–ù–§–û–ì–†–ê–§–ò–ö–ê –°–†–û–ö–û–í –ó–ê–ú–ï–ù–´</b>\n\n"
    
    if expired_count > 0:
        infographic += f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {expired_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        infographic += "   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞!\n\n"
    
    if expiring_soon_count > 0:
        infographic += f"üü° <b>–°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:</b> {expiring_soon_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        infographic += "   üìÖ –ó–∞–º–µ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n\n"
    
    if warning_count > 0:
        infographic += f"üü† <b>–°–∫–æ—Ä–æ –∑–∞–º–µ–Ω–∏—Ç—å:</b> {warning_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        infographic += "   üìÖ –ó–∞–º–µ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞\n\n"
    
    if ok_count > 0:
        infographic += f"‚úÖ <b>–í –Ω–æ—Ä–º–µ:</b> {ok_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        infographic += "   üíß –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 30+ –¥–Ω–µ–π\n\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    if total > 0:
        infographic += "üìà <b>–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n"
        infographic += "[" + "üî¥" * min(expired_count, 10) + "üü°" * min(expiring_soon_count, 10) + "üü†" * min(warning_count, 10) + "‚úÖ" * min(ok_count, 10) + "]\n\n"
    
    infographic += f"üì¶ <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {total}"
    
    return infographic

def create_progress_bar(count, total, emoji):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return ""
    
    percentage = count / total
    bars = int(percentage * 10)  # 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    return emoji + "‚ñà" * bars + "‚ñë" * (10 - bars)

def create_stats_infographic(stats, filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    total = stats['total']
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    expired_bar = create_progress_bar(stats['expired'], total, "üî¥")
    expiring_7_bar = create_progress_bar(stats['expiring_7'], total, "üü°")
    expiring_30_bar = create_progress_bar(stats['expiring_30'], total, "üü†")
    ok_bar = create_progress_bar(stats['ok'], total, "‚úÖ")
    
    # –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
    most_common_type = max(stats['filter_types'].items(), key=lambda x: x[1]) if stats['filter_types'] else ("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", 0)
    
    # –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
    most_common_location = max(stats['locations'].items(), key=lambda x: x[1]) if stats['locations'] else ("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", 0)
    
    infographic = (
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í - –ò–ù–§–û–ì–†–ê–§–ò–ö–ê</b>\n\n"
        
        "üéØ <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
        f"   üì¶ –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: <b>{total}</b>\n"
        f"   ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: <b>{stats['expired'] + stats['expiring_7'] + stats['expiring_30']}</b>\n"
        f"   ‚úÖ –í –Ω–æ—Ä–º–µ: <b>{stats['ok']}</b>\n\n"
        
        "üìà <b>–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–¢–ê–¢–£–°–ê–ú</b>\n"
        f"   {expired_bar} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired']} ({stats['expired']/total*100:.1f}%)\n"
        f"   {expiring_7_bar} –°—Ä–æ—á–Ω–æ: {stats['expiring_7']} ({stats['expiring_7']/total*100:.1f}%)\n"
        f"   {expiring_30_bar} –°–∫–æ—Ä–æ: {stats['expiring_30']} ({stats['expiring_30']/total*100:.1f}%)\n"
        f"   {ok_bar} –ù–æ—Ä–º–∞: {stats['ok']} ({stats['ok']/total*100:.1f}%)\n\n"
        
        "üèÜ <b>–°–ê–ú–´–ï –ü–û–ü–£–õ–Ø–†–ù–´–ï</b>\n"
        f"   üîß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: <b>{most_common_type[0]}</b> ({most_common_type[1]} —à—Ç.)\n"
        f"   üìç –ú–µ—Å—Ç–æ: <b>{most_common_location[0]}</b> ({most_common_location[1]} —à—Ç.)\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–º —Å—Ä–æ–∫–µ
    if stats['nearest_expiry'] is not None:
        if stats['nearest_expiry'] <= 0:
            infographic += f"üö® <b>–ë–õ–ò–ñ–ê–ô–®–ò–ô –°–†–û–ö:</b> –ü–†–û–°–†–û–ß–ï–ù –Ω–∞ {abs(stats['nearest_expiry'])} –¥–Ω.\n"
        else:
            infographic += f"‚è∞ <b>–ë–õ–ò–ñ–ê–ô–®–ò–ô –°–†–û–ö:</b> —á–µ—Ä–µ–∑ {stats['nearest_expiry']} –¥–Ω.\n"
    
    return infographic

def create_detailed_stats(stats, filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    total = stats['total']
    
    detailed = "üìã <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if stats['filter_types']:
        detailed += "üîß <b>–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:</b>\n"
        for filter_type, count in sorted(stats['filter_types'].items(), key=lambda x: x[1], reverse=True)[:5]:  # –¢–æ–ø-5
            percentage = count / total * 100
            bar = create_progress_bar(count, total, "‚óè")
            detailed += f"   {bar} {filter_type}: {count} ({percentage:.1f}%)\n"
        detailed += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—Ç–∞–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if stats['locations']:
        detailed += "üìç <b>–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ú–ï–°–¢–ê–ú:</b>\n"
        for location, count in sorted(stats['locations'].items(), key=lambda x: x[1], reverse=True)[:5]:  # –¢–æ–ø-5
            percentage = count / total * 100
            bar = create_progress_bar(count, total, "‚óè")
            detailed += f"   {bar} {location}: {count} ({percentage:.1f}%)\n"
        detailed += "\n"
    
    # –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
    if stats['ok'] > 0:
        avg_days = stats['total_days_remaining'] / stats['ok']
        detailed += f"üìÖ <b>–°–†–ï–î–ù–ò–ô –°–†–û–ö –£ –ù–û–†–ú–ê–õ–¨–ù–´–• –§–ò–õ–¨–¢–†–û–í:</b> {avg_days:.1f} –¥–Ω–µ–π\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    if stats['expired'] > 0:
        recommendations.append(f"üö® –ó–∞–º–µ–Ω–∏—Ç—å {stats['expired']} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    if stats['expiring_7'] > 0:
        recommendations.append(f"‚ö†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–º–µ–Ω–µ {stats['expiring_7']} —Å—Ä–æ—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    if stats['expiring_30'] > 0:
        recommendations.append(f"üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ–Ω—É {stats['expiring_30']} —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞")
    
    if recommendations:
        detailed += "üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n" + "\n".join([f"   ‚Ä¢ {rec}" for rec in recommendations])
    else:
        detailed += "üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ.</b>"
    
    return detailed

# ========== –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========
async def check_expired_filters():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            
            # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                          FROM filters 
                          WHERE expiry_date BETWEEN date('now') AND date('now', '+7 days')''')
            expiring_filters = cur.fetchall()
            
            # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
            cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                          FROM filters 
                          WHERE expiry_date BETWEEN date('now', '-30 days') AND date('now', '-1 day')''')
            expired_filters = cur.fetchall()
        
        notified_users = set()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞
        for user_id, filter_type, location, expiry_date in expiring_filters:
            try:
                days_until_expiry = (datetime.strptime(str(expiry_date), '%Y-%m-%d').date() - datetime.now().date()).days
                expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                
                await bot.send_message(
                    user_id,
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
                    f"üîß {filter_type}\n"
                    f"üìç {location}\n"
                    f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date_nice}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n\n"
                    f"‚ö†Ô∏è <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</i>",
                    parse_mode='HTML'
                )
                notified_users.add(user_id)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        for user_id, filter_type, location, expiry_date in expired_filters:
            if user_id not in notified_users:  # –ù–µ —Å–ø–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    days_expired = (datetime.now().date() - datetime.strptime(str(expiry_date), '%Y-%m-%d').date()).days
                    expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                    
                    await bot.send_message(
                        user_id,
                        f"üö® <b>–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
                        f"üîß {filter_type}\n"
                        f"üìç {location}\n"
                        f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫: {expiry_date_nice}\n"
                        f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –¥–Ω–µ–π: {days_expired}\n\n"
                        f"‚ùå <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞!</i>",
                        parse_mode='HTML'
                    )
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {exception}\n{traceback.format_exc()}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            ADMIN_ID,
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n"
            f"–¢–∏–ø: {type(exception).__name__}\n"
            f"–û—à–∏–±–∫–∞: {str(exception)[:1000]}"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    return True

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def schedule_daily_check():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    while True:
        try:
            await check_expired_filters()
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 3:00
            if datetime.now().hour == 3 and datetime.now().minute == 0:
                backup_database()
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –û–∂–∏–¥–∞–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60 * 60)

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    backup_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(schedule_daily_check())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# ========== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–ï–°–ö–û–õ–¨–ö–ò–• –§–ò–õ–¨–¢–†–û–í ==========

@dp.message_handler(state=MultipleFiltersStates.waiting_change_date)
async def process_multiple_change_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    try:
        change_date = validate_date(message.text)
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            selected_filters = data['selected_filters']
            location = data['location']
        
        await MultipleFiltersStates.next()
        
        await message.answer(
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"üìç <i>–ú–µ—Å—Ç–æ:</i> {location}\n"
            f"üìÖ <i>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</i> {format_date_nice(change_date)}\n"
            f"üì¶ <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i> {len(selected_filters)}\n\n"
            f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError as e:
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

@dp.message_handler(state=MultipleFiltersStates.waiting_lifetime)
async def process_multiple_lifetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    lifetime_mapping = {
        "3Ô∏è‚É£ 90 –¥–Ω–µ–π": 90,
        "6Ô∏è‚É£ 180 –¥–Ω–µ–π": 180,
        "1Ô∏è‚É£ 365 –¥–Ω–µ–π": 365
    }
    
    try:
        if message.text in lifetime_mapping:
            lifetime = lifetime_mapping[message.text]
        elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message.answer(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>\n\n"
                "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 30, 60, 90, 180, 365 –∏ —Ç.–¥.</i>",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
            return
        else:
            lifetime = validate_lifetime(message.text)
        
        async with state.proxy() as data:
            change_date = data['change_date']
            selected_filters = data['selected_filters']
            location = data['location']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ë–î
            with get_db_connection() as conn:
                cur = conn.cursor()
                for filter_type in selected_filters:
                    expiry_date = change_date + timedelta(days=lifetime)
                    cur.execute('''INSERT INTO filters 
                                (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                                VALUES (?, ?, ?, ?, ?, ?)''',
                                (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                conn.commit()
        
        filters_list = "\n".join([f"‚Ä¢ {f}" for f in selected_filters])
        
        await message.answer(
            f"üéâ <b>–§–ò–õ–¨–¢–†–´ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´!</b>\n\n"
            f"üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(selected_filters)}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(change_date)}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n\n"
            f"üîß <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n{filters_list}\n\n"
            f"üí´ <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫ –∏—Ö –∑–∞–º–µ–Ω—ã</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        
        await state.finish()
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å—Ä–æ–∫–µ —Å–ª—É–∂–±—ã!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:</b>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–ê–ú–ò ==========

@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def cmd_my_filters(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    today = datetime.now().date()
    response = "üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        last_change = datetime.strptime(str(f['last_change']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        icon, status = get_status_icon_and_text(days_until_expiry)
        
        response += (
            f"{icon} <b>#{f['id']} {f['filter_type']}</b>\n"
            f"üìç {f['location']}\n"
            f"üìÖ –ó–∞–º–µ–Ω–µ–Ω: {format_date_nice(last_change)}\n"
            f"üóìÔ∏è –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n"
            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_until_expiry}</b>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
    infographic = create_expiry_infographic(filters)
    await message.answer(response, parse_mode='HTML')
    await message.answer(infographic, parse_mode='HTML', reply_markup=get_main_keyboard(message.from_user.id))

@dp.message_handler(lambda message: message.text == "‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
async def cmd_expiry_dates(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã —Å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–æ–π"""
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    infographic = create_expiry_infographic(filters)
    await message.answer(infographic, parse_mode='HTML', reply_markup=get_main_keyboard(message.from_user.id))

@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    today = datetime.now().date()
    stats = {
        'total': len(filters),
        'expired': 0,
        'expiring_7': 0,
        'expiring_30': 0,
        'ok': 0,
        'filter_types': {},
        'locations': {},
        'total_days_remaining': 0,
        'nearest_expiry': None
    }
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        if days_until_expiry <= 0:
            stats['expired'] += 1
        elif days_until_expiry <= 7:
            stats['expiring_7'] += 1
        elif days_until_expiry <= 30:
            stats['expiring_30'] += 1
        else:
            stats['ok'] += 1
            stats['total_days_remaining'] += days_until_expiry
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        filter_type = f['filter_type']
        stats['filter_types'][filter_type] = stats['filter_types'].get(filter_type, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—Ç–∞–º
        location = f['location']
        stats['locations'][location] = stats['locations'].get(location, 0) + 1
        
        # –ë–ª–∏–∂–∞–π—à–∏–π —Å—Ä–æ–∫
        if stats['nearest_expiry'] is None or days_until_expiry < stats['nearest_expiry']:
            stats['nearest_expiry'] = days_until_expiry
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
    infographic = create_stats_infographic(stats, filters)
    detailed_stats = create_detailed_stats(stats, filters)
    
    await message.answer(infographic, parse_mode='HTML')
    await message.answer(detailed_stats, parse_mode='HTML', reply_markup=get_main_keyboard(message.from_user.id))

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–î–ê–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–û–í ==========

@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
async def cmd_delete_filter(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    await DeleteFilterStates.waiting_filter_selection.set()
    
    filters_list = "\n".join([f"‚Ä¢ #{f['id']} {f['filter_type']} - {f['location']}" for f in filters])
    
    await message.answer(
        f"üóëÔ∏è <b>–£–î–ê–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
        f"üìã <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filters_list}\n\n"
        f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n"
        f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞</i>",
        parse_mode='HTML',
        reply_markup=get_filters_list_keyboard(filters, "delete")
    )

@dp.message_handler(state=DeleteFilterStates.waiting_filter_selection)
async def process_delete_filter_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    # –ü–∞—Ä—Å–∏–º ID —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: #ID –¢–∏–ø - –ú–µ—Å—Ç–æ)
    match = re.match(r'#(\d+)', message.text)
    if match:
        filter_id = int(match.group(1))
        filter_data = get_filter_by_id(filter_id, message.from_user.id)
        
        if filter_data:
            expiry_date_nice = format_date_nice(datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date())
            
            await message.answer(
                f"üóëÔ∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
                f"üîß <b>–§–∏–ª—å—Ç—Ä:</b> #{filter_id} {filter_data['filter_type']}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data['location']}\n"
                f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n\n"
                f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä?</b>\n"
                f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å</i>",
                parse_mode='HTML',
                reply_markup=get_confirmation_keyboard(filter_id, "delete")
            )
            await state.finish()
        else:
            await message.answer(
                "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞</i>",
                parse_mode='HTML',
                reply_markup=get_filters_list_keyboard(get_user_filters(message.from_user.id), "delete")
            )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫</i>",
            parse_mode='HTML',
            reply_markup=get_filters_list_keyboard(get_user_filters(message.from_user.id), "delete")
        )

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_'))
async def process_confirm_delete(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id
    
    filter_data = get_filter_by_id(filter_id, user_id)
    if not filter_data:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ –ë–î
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
        conn.commit()
    
    await callback_query.message.edit_text(
        f"‚úÖ <b>–§–ò–õ–¨–¢–† –£–î–ê–õ–ï–ù!</b>\n\n"
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä:</b> #{filter_id} {filter_data['filter_type']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data['location']}\n\n"
        f"üí´ <i>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞</i>",
        parse_mode='HTML'
    )
    
    await bot.send_message(
        user_id,
        "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(user_id)
    )

@dp.callback_query_handler(lambda c: c.data == 'cancel_delete')
async def process_cancel_delete(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    await callback_query.message.edit_text(
        "üö´ <b>–£–î–ê–õ–ï–ù–ò–ï –û–¢–ú–ï–ù–ï–ù–û</b>\n\n"
        "üí° <i>–§–∏–ª—å—Ç—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω</i>",
        parse_mode='HTML'
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(callback_query.from_user.id)
    )

# ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–ó–î–ï–õ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ==========

@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def cmd_edit_filter(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    await EditFilterStates.waiting_filter_selection.set()
    
    filters_list = "\n".join([f"‚Ä¢ #{f['id']} {f['filter_type']} - {f['location']}" for f in filters])
    
    await message.answer(
        f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
        f"üìã <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filters_list}\n\n"
        f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞</i>",
        parse_mode='HTML',
        reply_markup=get_filters_list_keyboard(filters, "edit")
    )

@dp.message_handler(state=EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    # –ü–∞—Ä—Å–∏–º ID —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: #ID –¢–∏–ø - –ú–µ—Å—Ç–æ)
    match = re.match(r'#(\d+)', message.text)
    if match:
        filter_id = int(match.group(1))
        filter_data = get_filter_by_id(filter_id, message.from_user.id)
        
        if filter_data:
            async with state.proxy() as data:
                data['editing_filter'] = filter_data
                data['filter_id'] = filter_id
            
            expiry_date_nice = format_date_nice(datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date())
            last_change_nice = format_date_nice(datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d').date())
            
            await EditFilterStates.waiting_field_selection.set()
            await message.answer(
                f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
                f"üîß <b>–¢–∏–ø:</b> {filter_data['filter_type']}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data['location']}\n"
                f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {last_change_nice}\n"
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data['lifetime_days']} –¥–Ω.\n"
                f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n\n"
                f"üîÑ <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
                parse_mode='HTML',
                reply_markup=get_edit_filter_keyboard()
            )
        else:
            await message.answer(
                "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞</i>",
                parse_mode='HTML',
                reply_markup=get_filters_list_keyboard(get_user_filters(message.from_user.id), "edit")
            )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫</i>",
            parse_mode='HTML',
            reply_markup=get_filters_list_keyboard(get_user_filters(message.from_user.id), "edit")
        )

@dp.message_handler(state=EditFilterStates.waiting_field_selection)
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    if message.text == "üîô –ö —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await EditFilterStates.waiting_filter_selection.set()
        filters = get_user_filters(message.from_user.id)
        filters_list = "\n".join([f"‚Ä¢ #{f['id']} {f['filter_type']} - {f['location']}" for f in filters])
        
        await message.answer(
            f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
            f"üìã <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filters_list}\n\n"
            f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
            parse_mode='HTML',
            reply_markup=get_filters_list_keyboard(filters, "edit")
        )
        return
    
    async with state.proxy() as data:
        filter_data = data['editing_filter']
    
    if message.text == "‚úèÔ∏è –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞":
        await EditFilterStates.waiting_new_value.set()
        data['editing_field'] = 'filter_type'
        await message.answer(
            f"‚úèÔ∏è <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ò–ü–ê –§–ò–õ–¨–¢–†–ê</b>\n\n"
            f"üîß <b>–¢–µ–∫—É—â–∏–π —Ç–∏–ø:</b> {filter_data['filter_type']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    
    elif message.text == "üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏":
        await EditFilterStates.waiting_new_value.set()
        data['editing_field'] = 'location'
        await message.answer(
            f"‚úèÔ∏è <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –ú–ï–°–¢–ê –£–°–¢–ê–ù–û–í–ö–ò</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ:</b> {filter_data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    
    elif message.text == "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã":
        await EditFilterStates.waiting_new_value.set()
        data['editing_field'] = 'last_change'
        last_change_nice = format_date_nice(datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d').date())
        await message.answer(
            f"‚úèÔ∏è <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–¢–´ –ó–ê–ú–ï–ù–´</b>\n\n"
            f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {last_change_nice}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì):</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    
    elif message.text == "‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã":
        await EditFilterStates.waiting_new_value.set()
        data['editing_field'] = 'lifetime_days'
        await message.answer(
            f"‚úèÔ∏è <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–†–û–ö–ê –°–õ–£–ñ–ë–´</b>\n\n"
            f"‚è±Ô∏è <b>–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data['lifetime_days']} –¥–Ω–µ–π\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

@dp.message_handler(state=EditFilterStates.waiting_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await EditFilterStates.waiting_field_selection.set()
        async with state.proxy() as data:
            filter_data = data['editing_filter']
        
        expiry_date_nice = format_date_nice(datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date())
        last_change_nice = format_date_nice(datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d').date())
        
        await message.answer(
            f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_data['filter_type']}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data['location']}\n"
            f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {last_change_nice}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data['lifetime_days']} –¥–Ω.\n"
            f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n\n"
            f"üîÑ <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
            parse_mode='HTML',
            reply_markup=get_edit_filter_keyboard()
        )
        return
    
    async with state.proxy() as data:
        filter_data = data['editing_filter']
        field = data['editing_field']
        filter_id = data['filter_id']
    
    try:
        if field == 'filter_type':
            new_value = validate_filter_name(message.text)
            update_query = "UPDATE filters SET filter_type = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"
            params = (new_value, filter_id)
        
        elif field == 'location':
            new_value = safe_db_string(message.text)
            update_query = "UPDATE filters SET location = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"
            params = (new_value, filter_id)
        
        elif field == 'last_change':
            new_value = parse_date(message.text)
            # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º expiry_date
            lifetime = filter_data['lifetime_days']
            new_expiry_date = new_value + timedelta(days=lifetime)
            update_query = "UPDATE filters SET last_change = ?, expiry_date = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"
            params = (new_value, new_expiry_date, filter_id)
        
        elif field == 'lifetime_days':
            new_value = validate_lifetime(message.text)
            # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º expiry_date
            last_change = datetime.strptime(str(filter_data['last_change']), '%Y-%m-%d').date()
            new_expiry_date = last_change + timedelta(days=new_value)
            update_query = "UPDATE filters SET lifetime_days = ?, expiry_date = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?"
            params = (new_value, new_expiry_date, filter_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute(update_query, params)
            conn.commit()
        
        field_names = {
            'filter_type': '—Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞',
            'location': '–º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
            'last_change': '–¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã',
            'lifetime_days': '—Å—Ä–æ–∫ —Å–ª—É–∂–±—ã'
        }
        
        await message.answer(
            f"‚úÖ <b>–ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´!</b>\n\n"
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ:</b> {field_names[field]}\n"
            f"üîß <b>–§–∏–ª—å—Ç—Ä:</b> #{filter_id}\n\n"
            f"üí´ <i>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        await state.finish()
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üìù <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –†–ê–ó–î–ï–õ –ù–ï–°–ö–û–õ–¨–ö–ò–• –§–ò–õ–¨–¢–†–û–í ==========

@dp.message_handler(lambda message: message.text == "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
async def cmd_multiple_filters(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if check_filters_limit(message.from_user.id):
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
            f"üí° <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {MAX_FILTERS_PER_USER}</i>\n"
            f"üìä <i>–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
        
    await MultipleFiltersStates.waiting_filters_list.set()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    async with state.proxy() as data:
        data['selected_filters'] = []
    
    await message.answer(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i>\n\n"
        "‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</b> - –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤\n"
        "‚Ä¢ <b>‚ûï 1 —Ñ–∏–ª—å—Ç—Ä</b> - –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä\n"
        "‚Ä¢ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n\n"
        "üìù <b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n"
        "<i>–ü–æ–∫–∞ –ø—É—Å—Ç–æ</i>",
        parse_mode='HTML',
        reply_markup=get_multiple_filters_keyboard()
    )

@dp.message_handler(state=MultipleFiltersStates.waiting_filters_list)
async def process_multiple_filters_selection(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'selected_filters' not in data:
            data['selected_filters'] = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not data['selected_filters']:
            await message.answer(
                "‚ùå <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç!</b>\n\n"
                "üí° <i>–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
        current_filters_count = len(get_user_filters(message.from_user.id))
        if current_filters_count + len(data['selected_filters']) > MAX_FILTERS_PER_USER:
            await message.answer(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
                f"üìä <i>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_filters_count}</i>\n"
                f"üì¶ <i>–ü—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {len(data['selected_filters'])}</i>\n"
                f"üí° <i>–ú–∞–∫—Å–∏–º—É–º: {MAX_FILTERS_PER_USER}</i>\n\n"
                f"üîÑ <i>–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
            return
        
        await MultipleFiltersStates.waiting_location.set()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_text = "\n".join([f"‚Ä¢ {f}" for f in data['selected_filters']])
        
        await message.answer(
            f"‚úÖ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"üì¶ <b>–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(data['selected_filters'])}\n\n"
            f"üîß <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n{filters_text}\n\n"
            f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
            f"üí° <i>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</i>",
            parse_mode='HTML',
            reply_markup=get_location_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä":
        await message.answer(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_filter_type_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "+ 1 —Ñ–∏–ª—å—Ç—Ä"
    if message.text == "‚ûï 1 —Ñ–∏–ª—å—Ç—Ä":
        # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º "–§–∏–ª—å—Ç—Ä" –≤ —Å–ø–∏—Å–æ–∫
        new_filter = "–§–∏–ª—å—Ç—Ä"
        data['selected_filters'].append(new_filter)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if data['selected_filters']:
            filters_text = "\n".join([f"‚Ä¢ {f}" for f in data['selected_filters']])
            status_text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(data['selected_filters'])}\n\n{filters_text}"
        else:
            status_text = "üìù <b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>\n\n<i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫</i>"
        
        await message.answer(
            f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {new_filter}\n\n"
            f"{status_text}\n\n"
            f"üí° <i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'</i>",
            parse_mode='HTML',
            reply_markup=get_multiple_filters_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    filter_mapping = {
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10",
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20",
        "üíß –ì–µ–π–∑–µ—Ä": "–ì–µ–π–∑–µ—Ä",
        "üíß –ê–∫–≤–∞—Ñ–æ—Ä": "–ê–∫–≤–∞—Ñ–æ—Ä"
    }
    
    if message.text in filter_mapping:
        filter_name = filter_mapping[message.text]
        if filter_name not in data['selected_filters']:
            data['selected_filters'].append(filter_name)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if data['selected_filters']:
                filters_text = "\n".join([f"‚Ä¢ {f}" for f in data['selected_filters']])
                status_text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(data['selected_filters'])}\n\n{filters_text}"
            else:
                status_text = "üìù <b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>\n\n<i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫</i>"
            
            await message.answer(
                f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {filter_name}\n\n"
                f"{status_text}\n\n"
                f"üí° <i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        else:
            await message.answer(
                f"‚ÑπÔ∏è <b>–§–∏–ª—å—Ç—Ä —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ:</b> {filter_name}",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π —Ñ–∏–ª—å—Ç—Ä)
    if message.text and message.text not in ["‚úÖ –ì–æ—Ç–æ–≤–æ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "‚ûï 1 —Ñ–∏–ª—å—Ç—Ä", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        try:
            validated_filter = validate_filter_name(message.text)
            if validated_filter not in data['selected_filters']:
                data['selected_filters'].append(validated_filter)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                filters_text = "\n".join([f"‚Ä¢ {f}" for f in data['selected_filters']])
                
                await message.answer(
                    f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {validated_filter}\n\n"
                    f"üìä –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ: {len(data['selected_filters'])}\n\n"
                    f"üîß <b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n{filters_text}",
                    parse_mode='HTML',
                    reply_markup=get_multiple_filters_keyboard()
                )
            else:
                await message.answer(
                    f"‚ÑπÔ∏è <b>–§–∏–ª—å—Ç—Ä —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ:</b> {validated_filter}",
                    parse_mode='HTML',
                    reply_markup=get_multiple_filters_keyboard()
                )
        except ValueError as e:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
                f"üí° <i>{str(e)}</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if data['selected_filters']:
        filters_text = "\n".join([f"‚Ä¢ {f}" for f in data['selected_filters']])
        status_text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(data['selected_filters'])}\n\n{filters_text}"
    else:
        status_text = "üìù <b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>\n\n<i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫</i>"
    
    await message.answer(
        f"üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        f"{status_text}\n\n"
        f"üí° <i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'</i>",
        parse_mode='HTML',
        reply_markup=get_multiple_filters_keyboard()
    )

# ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == ADMIN_ID

@dp.message_handler(lambda message: message.text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def cmd_admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    await message.answer(
        "üëë <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        "üí° <i>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</i>",
        parse_mode='HTML',
        reply_markup=get_admin_keyboard()
    )

@dp.message_handler(lambda message: message.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_admin_stats(message: types.Message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    stats = get_all_users_stats()
    users = get_all_users()
    
    response = (
        "üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
        f"üì¶ <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {stats['total_filters']}\n"
        f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {stats['expired_filters']}\n"
        f"üü° <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç:</b> {stats['expiring_soon']}\n\n"
    )
    
    if users:
        response += "üë• <b>–¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n"
        for i, user in enumerate(users[:10], 1):
            response += f"{i}. ID {user['user_id']}: {user['filter_count']} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
    
    await message.answer(response, parse_mode='HTML', reply_markup=get_admin_keyboard())

@dp.message_handler(lambda message: message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def cmd_admin_users(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    users = get_all_users()
    
    if not users:
        await message.answer("üì≠ <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ</b>", parse_mode='HTML')
        return
    
    response = "üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
    for i, user in enumerate(users, 1):
        response += f"{i}. <b>ID {user['user_id']}</b>: {user['filter_count']} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
    
    await message.answer(response, parse_mode='HTML', reply_markup=get_admin_keyboard())

@dp.message_handler(lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É")
async def cmd_clear_database(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    stats = get_all_users_stats()
    
    await message.answer(
        f"üö® <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ë–ê–ó–´</b>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n\n"
        f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!\n"
        f"<i>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</i>\n\n"
        f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É?</b>",
        parse_mode='HTML',
        reply_markup=get_confirmation_keyboard(action="clear_db")
    )

@dp.callback_query_handler(lambda c: c.data == 'confirm_clear_db')
async def process_confirm_clear_db(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    deleted_count = clear_all_filters()
    
    await callback_query.message.edit_text(
        f"‚úÖ <b>–ë–ê–ó–ê –î–ê–ù–ù–´–• –û–ß–ò–©–ï–ù–ê!</b>\n\n"
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> {deleted_count}\n\n"
        f"üí´ <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã</i>",
        parse_mode='HTML'
    )
    
    await bot.send_message(
        ADMIN_ID,
        "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == 'cancel_clear_db')
async def process_cancel_clear_db(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã"""
    await callback_query.message.edit_text(
        "üö´ <b>–û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –û–¢–ú–ï–ù–ï–ù–ê</b>\n\n"
        "üí° <i>–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã</i>",
        parse_mode='HTML'
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
        reply_markup=get_admin_keyboard()
    )

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        parse_mode='HTML',
        reply_markup=get_main_keyboard(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back(message: types.Message):
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode='HTML',
        reply_markup=get_main_keyboard(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    await message.answer(
        "üõ†Ô∏è <b>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if check_filters_limit(message.from_user.id):
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
            f"üí° <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {MAX_FILTERS_PER_USER}</i>\n"
            f"üìä <i>–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
        
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ</i>",
        parse_mode='HTML',
        reply_markup=get_add_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä", "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤"])
async def process_add_type(message: types.Message, state: FSMContext):
    if message.text == "üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä":
        await FilterStates.waiting_filter_type.set()
        await message.answer(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_filter_type_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –û–î–ù–û–ì–û —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
        
    if message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
    filter_mapping = {
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10",
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20",
        "üíß –ì–µ–π–∑–µ—Ä": "–ì–µ–π–∑–µ—Ä",
        "üíß –ê–∫–≤–∞—Ñ–æ—Ä": "–ê–∫–≤–∞—Ñ–æ—Ä"
    }
    
    filter_name = None
    
    if message.text in filter_mapping:
        filter_name = filter_mapping[message.text]
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        try:
            filter_name = validate_filter_name(message.text)
        except ValueError as e:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
                f"üí° <i>{str(e)}</i>",
                parse_mode='HTML',
                reply_markup=get_filter_type_keyboard()
            )
            return
    
    if filter_name:
        async with state.proxy() as data:
            data['filter_type'] = filter_name
            data['lifetime'] = get_lifetime_by_type(filter_name)

        await FilterStates.next()
        await message.answer(
            "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ</i>",
            parse_mode='HTML',
            reply_markup=get_location_keyboard()
        )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–°–¢–ê –£–°–¢–ê–ù–û–í–ö–ò –ò –î–ê–¢–´ ==========

@dp.message_handler(state=[FilterStates.waiting_location, MultipleFiltersStates.waiting_location])
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
        
    if message.text == "üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è, –û—Ñ–∏—Å, –ë–∞–ª–∫–æ–Ω, –ì–∞—Ä–∞–∂ –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    current_state = await state.get_state()
    
    if current_state == FilterStates.waiting_location.state:
        # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        async with state.proxy() as data:
            data['location'] = safe_db_string(message.text)

        await FilterStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã</b>\n\n"
            f"üîß <i>–§–∏–ª—å—Ç—Ä:</i> {data['filter_type']}\n"
            f"üìç <i>–ú–µ—Å—Ç–æ:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        async with state.proxy() as data:
            data['location'] = safe_db_string(message.text)

        await MultipleFiltersStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"üìç <i>–ú–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

@dp.message_handler(state=FilterStates.waiting_change_date)
async def process_change_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    try:
        change_date = validate_date(message.text)
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            filter_type = data['filter_type']
            lifetime = data.get('lifetime', get_lifetime_by_type(filter_type))
        
        expiry_date = change_date + timedelta(days=lifetime)
        expiry_date_nice = format_date_nice(expiry_date)
        
        await FilterStates.next()
        
        await message.answer(
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            f"üîß <i>–§–∏–ª—å—Ç—Ä:</i> {filter_type}\n"
            f"üìç <i>–ú–µ—Å—Ç–æ:</i> {data['location']}\n"
            f"üìÖ <i>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</i> {format_date_nice(change_date)}\n"
            f"üóìÔ∏è <i>–ì–æ–¥–µ–Ω –¥–æ:</i> {expiry_date_nice}\n\n"
            f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError as e:
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

@dp.message_handler(state=FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    lifetime_mapping = {
        "3Ô∏è‚É£ 90 –¥–Ω–µ–π": 90,
        "6Ô∏è‚É£ 180 –¥–Ω–µ–π": 180,
        "1Ô∏è‚É£ 365 –¥–Ω–µ–π": 365
    }
    
    try:
        if message.text in lifetime_mapping:
            lifetime = lifetime_mapping[message.text]
        elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message.answer(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>\n\n"
                "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 30, 60, 90, 180, 365 –∏ —Ç.–¥.</i>",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
            return
        else:
            lifetime = validate_lifetime(message.text)
        
        async with state.proxy() as data:
            change_date = data['change_date']
            filter_type = data['filter_type']
            location = data['location']
            
            expiry_date = change_date + timedelta(days=lifetime)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            with get_db_connection() as conn:
                cur = conn.cursor()
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                            (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                conn.commit()
        
        await message.answer(
            f"üéâ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(change_date)}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
            f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n\n"
            f"üí´ <i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫ –µ–≥–æ –∑–∞–º–µ–Ω—ã</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        
        await state.finish()
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å—Ä–æ–∫–µ —Å–ª—É–∂–±—ã!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:</b>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard(message.from_user.id)
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not API_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        exit(1)
    
    init_db()
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º startup
    executor.start_polling(
        dp, 
        skip_updates=True,
        on_startup=on_startup
    )
