import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
BOT_TOKEN = 8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_FILTER_TYPE, SET_INSTALL_DATE, SET_REPLACEMENT_PERIOD = range(3)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_filters (
            user_id INTEGER,
            filter_type TEXT,
            install_date TEXT,
            replacement_period INTEGER,
            next_replacement TEXT,
            PRIMARY KEY (user_id, filter_type)
        )
    ''')
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üö∞

–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã –≤–æ–¥—è–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–º–µ–Ω–µ
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add_filter - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
/my_filters - –º–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã
/delete_filter - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
/help - –ø–æ–º–æ—â—å
    """
    await update.message.reply_text(welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /add_filter
async def add_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø/–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä', '–§–∏–ª—å—Ç—Ä –ø–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π'):",
        reply_markup=ReplyKeyboardRemove()
    )
    return SET_FILTER_TYPE

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
async def set_filter_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['filter_type'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024):"
    )
    return SET_INSTALL_DATE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
async def set_install_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        install_date = datetime.strptime(update.message.text, '%d.%m.%Y').date()
        context.user_data['install_date'] = install_date.isoformat()
        
        keyboard = [['3', '6', '12'], ['24']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–º–µ–Ω—ã (–≤ –º–µ—Å—è—Ü–∞—Ö):",
            reply_markup=reply_markup
        )
        return SET_REPLACEMENT_PERIOD
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return SET_INSTALL_DATE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
async def set_replacement_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        period = int(update.message.text)
        user_id = update.message.from_user.id
        filter_type = context.user_data['filter_type']
        install_date = context.user_data['install_date']
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–º–µ–Ω—ã
        install_dt = datetime.strptime(install_date, '%Y-%m-%d')
        next_replacement = install_dt + timedelta(days=period*30)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('filters.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO user_filters 
            (user_id, filter_type, install_date, replacement_period, next_replacement)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, filter_type, install_date, period, next_replacement.isoformat()))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_type}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {next_replacement.strftime('%d.%m.%Y')}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–ø–µ—Ä–∏–æ–¥ –≤ –º–µ—Å—è—Ü–∞—Ö):")
        return SET_REPLACEMENT_PERIOD

# –ö–æ–º–∞–Ω–¥–∞ /my_filters
async def my_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT filter_type, install_date, replacement_period, next_replacement FROM user_filters WHERE user_id = ?',
        (user_id,)
    )
    filters = cursor.fetchall()
    conn.close()
    
    if not filters:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        return
    
    text = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    today = datetime.now().date()
    
    for filter_data in filters:
        filter_type, install_date, period, next_replacement = filter_data
        next_replacement_date = datetime.strptime(next_replacement, '%Y-%m-%d').date()
        days_left = (next_replacement_date - today).days
        
        status = "‚úÖ –í –Ω–æ—Ä–º–µ" if days_left > 7 else "‚ö†Ô∏è –°–∫–æ—Ä–æ –∑–∞–º–µ–Ω–∞" if days_left > 0 else "üö® –¢–†–ï–ë–£–ï–¢ –ó–ê–ú–ï–ù–´!"
        
        text += f"""üîπ {filter_type}
üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {datetime.strptime(install_date, '%Y-%m-%d').strftime('%d.%m.%Y')}
üîÑ –ü–µ—Ä–∏–æ–¥: {period} –º–µ—Å.
üìÖ –ó–∞–º–µ–Ω–∞: {next_replacement_date.strftime('%d.%m.%Y')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}
{status}

"""
    
    await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /delete_filter
async def delete_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT filter_type FROM user_filters WHERE user_id = ?',
        (user_id,)
    )
    user_filters = cursor.fetchall()
    conn.close()
    
    if not user_filters:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = [[filter[0]] for filter in user_filters]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    context.user_data['awaiting_delete'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def handle_filter_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_delete'):
        filter_type = update.message.text
        user_id = update.message.from_user.id
        
        conn = sqlite3.connect('filters.db')
        cursor = conn.cursor()
        cursor.execute(
            'DELETE FROM user_filters WHERE user_id = ? AND filter_type = ?',
            (user_id, filter_type)
        )
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"–§–∏–ª—å—Ç—Ä '{filter_type}' —É–¥–∞–ª–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['awaiting_delete'] = False

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def check_replacements(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT user_id FROM user_filters')
    users = cursor.fetchall()
    
    today = datetime.now().date()
    
    for user in users:
        user_id = user[0]
        cursor.execute(
            'SELECT filter_type, next_replacement FROM user_filters WHERE user_id = ?',
            (user_id,)
        )
        filters = cursor.fetchall()
        
        for filter_data in filters:
            filter_type, next_replacement = filter_data
            next_replacement_date = datetime.strptime(next_replacement, '%Y-%m-%d').date()
            days_left = (next_replacement_date - today).days
            
            if days_left == 7:
                message = f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞ '{filter_type}' –æ—Å—Ç–∞–ª–æ—Å—å 7 –¥–Ω–µ–π!"
                await context.bot.send_message(chat_id=user_id, text=message)
            elif days_left == 0:
                message = f"üö® –í–ù–ò–ú–ê–ù–ò–ï: —Ñ–∏–ª—å—Ç—Ä '{filter_type}' —Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è!"
                await context.bot.send_message(chat_id=user_id, text=message)
            elif days_left < 0:
                message = f"üö® –°–†–û–ß–ù–û: —Ñ–∏–ª—å—Ç—Ä '{filter_type}' –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {abs(days_left)} –¥–Ω–µ–π!"
                await context.bot.send_message(chat_id=user_id, text=message)
    
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –≤–æ–¥—è–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add_filter - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
/my_filters - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã
/delete_filter - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîî –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω—ã:
- –∑–∞ 7 –¥–Ω–µ–π –¥–æ —Å—Ä–æ–∫–∞
- –≤ –¥–µ–Ω—å –∑–∞–º–µ–Ω—ã
- –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–¥—ã
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∑–∞–º–µ–Ω—ã
    """
    await update.message.reply_text(help_text)

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add_filter', add_filter)],
        states={
            SET_FILTER_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_filter_type)],
            SET_INSTALL_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_install_date)],
            SET_REPLACEMENT_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_replacement_period)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("my_filters", my_filters))
    application.add_handler(CommandHandler("delete_filter", delete_filter))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_filter_selection))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    job_queue = application.job_queue
    job_queue.run_daily(check_replacements, time=datetime.time(hour=9, minute=0))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
