import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = 8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            location TEXT,
            last_change DATE,
            next_change DATE,
            change_interval INTEGER,
            status TEXT DEFAULT 'active',
            user_id INTEGER
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filter_id INTEGER,
            notification_date DATE,
            sent BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (filter_id) REFERENCES filters (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")],
        [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, name, location, last_change, next_change, status 
        FROM filters WHERE user_id = ?
    ''', (user_id,))
    
    filters_list = cursor.fetchall()
    conn.close()
    
    if not filters_list:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        return
    
    message = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for filter_item in filters_list:
        id, name, location, last_change, next_change, status = filter_item
        status_emoji = "‚úÖ" if status == 'active' else "‚ùå"
        message += f"{status_emoji} {name}\n"
        message += f"üìç –ú–µ—Å—Ç–æ: {location}\n"
        message += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞: {last_change}\n"
        message += f"üîÑ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {next_change}\n"
        message += "‚îÄ" * 20 + "\n"
    
    await update.message.reply_text(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
async def add_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
        "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î)\n"
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–º–µ–Ω—ã (–≤ –¥–Ω—è—Ö)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–§–∏–ª—å—Ç—Ä –¥–ª—è –≤–æ–¥—ã\n"
        "–ö—É—Ö–Ω—è\n"
        "2024-01-15\n"
        "180"
    )
    context.user_data['awaiting_filter_data'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞
async def handle_filter_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_filter_data'):
        return
    
    try:
        data = update.message.text.split('\n')
        if len(data) != 4:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        name, location, last_change_str, interval_str = data
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        last_change = datetime.strptime(last_change_str.strip(), '%Y-%m-%d').date()
        interval = int(interval_str.strip())
        
        # –†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–º–µ–Ω—ã
        next_change = last_change + timedelta(days=interval)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('filters.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO filters (name, location, last_change, next_change, change_interval, user_id)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (name.strip(), location.strip(), last_change_str.strip(), next_change.isoformat(), interval, update.effective_user.id))
        
        filter_id = cursor.lastrowid
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_date = next_change - timedelta(days=7)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π
        cursor.execute('''
            INSERT INTO notifications (filter_id, notification_date)
            VALUES (?, ?)
        ''', (filter_id, notification_date.isoformat()))
        
        conn.commit()
        conn.close()
        
        context.user_data['awaiting_filter_data'] = False
        
        await update.message.reply_text(
            f"‚úÖ –§–∏–ª—å—Ç—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {next_change}"
        )
        
    except ValueError as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ —á–∏—Å–ª–∞.")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def check_expired_filters(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT f.id, f.name, f.next_change, f.user_id 
        FROM filters f 
        WHERE f.next_change <= date('now') AND f.status = 'active'
    ''')
    
    expired_filters = cursor.fetchall()
    
    for filter_item in expired_filters:
        filter_id, name, next_change, user_id = filter_item
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
                     f"–§–∏–ª—å—Ç—Ä '{name}' —Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã!\n"
                     f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–º–µ–Ω—ã: {next_change}\n\n"
                     f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ–≤—Ä–µ–º—è!"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.close()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–º–µ–Ω–∞—Ö
async def send_upcoming_notifications(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT f.name, f.next_change, f.user_id, n.id
        FROM filters f
        JOIN notifications n ON f.id = n.filter_id
        WHERE n.notification_date <= date('now') AND n.sent = FALSE
    ''')
    
    notifications = cursor.fetchall()
    
    for notification in notifications:
        name, next_change, user_id, notification_id = notification
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                     f"–§–∏–ª—å—Ç—Ä '{name}' —Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.\n"
                     f"–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {next_change}\n\n"
                     f"–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞–º–µ–Ω–µ –∑–∞—Ä–∞–Ω–µ–µ!"
            )
            
            # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            cursor.execute('UPDATE notifications SET sent = TRUE WHERE id = ?', (notification_id,))
            conn.commit()
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"), show_filters))
    application.add_handler(MessageHandler(filters.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"), add_filter))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_filter_input))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    job_queue = application.job_queue
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    job_queue.run_repeating(check_expired_filters, interval=86400, first=10)  # 86400 —Å–µ–∫—É–Ω–¥ = 1 –¥–µ–Ω—å
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    job_queue.run_repeating(send_upcoming_notifications, interval=86400, first=10)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
