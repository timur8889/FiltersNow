import asyncio
import datetime
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
filters_db = []

class FilterForm(StatesGroup):
    name = State()
    install_date = State()
    expiry_date = State()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"
    )

@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await FilterForm.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:")

@dp.message_handler(state=FilterForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await FilterForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")

@dp.message_handler(state=FilterForm.install_date)
async def process_install_date(message: types.Message, state: FSMContext):
    try:
        install_date = datetime.datetime.strptime(message.text, '%d.%m.%Y').date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    async with state.proxy() as data:
        data['install_date'] = install_date

    await FilterForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–≤ –¥–Ω—è—Ö) –∏–ª–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")

@dp.message_handler(state=FilterForm.expiry_date)
async def process_expiry(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            expiry_days = int(message.text)
            expiry_date = data['install_date'] + datetime.timedelta(days=expiry_days)
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–∞—Ç—É
            try:
                expiry_date = datetime.datetime.strptime(message.text, '%d.%m.%Y').date()
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ (–¥–Ω–∏) –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì")
                return

        filter_data = {
            'name': data['name'],
            'install_date': data['install_date'],
            'expiry_date': expiry_date,
            'user_id': message.from_user.id
        }

        filters_db.append(filter_data)
        await message.answer(
            f"–§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {data['install_date'].strftime('%d.%m.%Y')}\n"
            f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ: {expiry_date.strftime('%d.%m.%Y')}"
        )

    await state.finish()

@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    if not filters_db:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç")
        return

    response = "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
    for idx, filter_data in enumerate(filters_db, 1):
        status = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω" if filter_data['expiry_date'] < datetime.date.today() else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        response += (
            f"{idx}. {filter_data['name']}\n"
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {filter_data['install_date'].strftime('%d.%m.%Y')}\n"
            f"–ì–æ–¥–µ–Ω –¥–æ: {filter_data['expiry_date'].strftime('%d.%m.%Y')}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )

    await message.answer(response)

@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    today = datetime.date.today()
    expired_filters = [
        f for f in filters_db
        if f['expiry_date'] < today
    ]

    if not expired_filters:
        await message.answer("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    else:
        response = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
        for filter_data in expired_filters:
            response += (
                f"üî¥ {filter_data['name']}\n"
                f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω —Å: {filter_data['expiry_date'].strftime('%d.%m.%Y')}\n\n"
            )
        await message.answer(response)


if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.create_task(check_expired_periodically())
    executor.start_polling(dp, skip_updates=True)
