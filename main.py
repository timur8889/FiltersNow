import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
from telegram.error import BadRequest
import sqlite3
from datetime import datetime, timedelta
import json
import io
import csv
from calendar import monthrange
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
FILTER_NAME, FILTER_LOCATION, FILTER_LAST_CHANGE, FILTER_INTERVAL, FILTER_COST, FILTER_PHOTO = range(6)
GROUP_NAME, GROUP_MEMBERS = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            location TEXT,
            last_change DATE,
            next_change DATE,
            change_interval INTEGER,
            cost REAL DEFAULT 0,
            status TEXT DEFAULT 'active',
            user_id INTEGER,
            group_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (group_id) REFERENCES groups (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filter_id INTEGER,
            notification_date DATE,
            sent BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (filter_id) REFERENCES filters (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS groups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            admin_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS group_members (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_id INTEGER,
            user_id INTEGER,
            user_name TEXT,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (group_id) REFERENCES groups (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–º–µ–Ω
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS replacement_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filter_id INTEGER,
            replacement_date DATE,
            cost REAL,
            photo_id TEXT,
            notes TEXT,
            replaced_by INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (filter_id) REFERENCES filters (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")],
        [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üë• –ì—Ä—É–ø–ø—ã"), KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")],
        [KeyboardButton("üì∏ –§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã"), KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–ú–ï–ù–ê–ú ===

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('''
        SELECT 
            COUNT(*) as total_filters,
            SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active_filters,
            SUM(CASE WHEN next_change <= date('now') THEN 1 ELSE 0 END) as expired_filters
        FROM filters WHERE user_id = ?
    ''', (user_id,))
    
    stats = cursor.fetchone()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–º–µ–Ω–∞–º
    cursor.execute('''
        SELECT 
            COUNT(*) as total_replacements,
            AVG(rh.cost) as avg_cost,
            SUM(rh.cost) as total_cost
        FROM replacement_history rh
        JOIN filters f ON rh.filter_id = f.id
        WHERE f.user_id = ?
    ''', (user_id,))
    
    replacement_stats = cursor.fetchone()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
    cursor.execute('''
        SELECT 
            f.name,
            COUNT(rh.id) as replacement_count,
            AVG(rh.cost) as avg_cost
        FROM filters f
        LEFT JOIN replacement_history rh ON f.id = rh.filter_id
        WHERE f.user_id = ?
        GROUP BY f.id
        ORDER BY replacement_count DESC
        LIMIT 5
    ''', (user_id,))
    
    top_filters = cursor.fetchall()
    
    conn.close()
    
    message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:\n\n"
    message += f"üìã –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {stats[0]}\n"
    message += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats[1]}\n"
    message += f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã: {stats[2]}\n\n"
    
    if replacement_stats[0] > 0:
        message += "üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ–Ω:\n"
        message += f"üîÑ –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: {replacement_stats[0]}\n"
        message += f"üíµ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {replacement_stats[2]:.2f} —Ä—É–±.\n"
        message += f"üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {replacement_stats[1]:.2f} —Ä—É–±.\n\n"
    
    if top_filters:
        message += "üèÜ –ß–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–º–µ–Ω—è—é—Ç—Å—è:\n"
        for name, count, avg_cost in top_filters:
            message += f"‚Ä¢ {name}: {count} –∑–∞–º–µ–Ω"
            if avg_cost:
                message += f" ({avg_cost:.2f} —Ä—É–±.)"
            message += "\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="stats_charts")],
        [InlineKeyboardButton("üìÑ –û—Ç—á–µ—Ç PDF", callback_data="stats_pdf")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="detailed_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def generate_statistics_charts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º
    cursor.execute('''
        SELECT 
            strftime('%Y-%m', replacement_date) as month,
            COUNT(*) as count,
            SUM(cost) as total_cost
        FROM replacement_history rh
        JOIN filters f ON rh.filter_id = f.id
        WHERE f.user_id = ?
        GROUP BY month
        ORDER BY month
        LIMIT 12
    ''', (user_id,))
    
    monthly_data = cursor.fetchall()
    
    if not monthly_data:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        return
    
    months = [f"{row[0][5:7]}/{row[0][:4]}" for row in monthly_data]
    counts = [row[1] for row in monthly_data]
    costs = [row[2] for row in monthly_data]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ–Ω
    ax1.bar(months, counts, color='skyblue')
    ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω')
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ç—Ä–∞—Ç
    ax2.bar(months, costs, color='lightcoral')
    ax2.set_title('–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞–º–µ–Ω—ã –ø–æ –º–µ—Å—è—Ü–∞–º')
    ax2.set_ylabel('–ó–∞—Ç—Ä–∞—Ç—ã (—Ä—É–±.)')
    ax2.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=150)
    buf.seek(0)
    plt.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=buf,
        caption="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º"
    )
    
    conn.close()

# === –ì–†–£–ü–ü–û–í–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò ===

async def group_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="my_groups")],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group")],
        [InlineKeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", callback_data="join_group")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ "
        "–≤ —Å–µ–º—å–µ, –æ—Ñ–∏—Å–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ.",
        reply_markup=reply_markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
async def create_group_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:"
    )
    return GROUP_NAME

async def create_group_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['group_name'] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: @user1, @user2, @user3"
    )
    return GROUP_MEMBERS

async def create_group_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group_name = context.user_data['group_name']
    members_text = update.message.text
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute(
        'INSERT INTO groups (name, admin_id) VALUES (?, ?)',
        (group_name, user_id)
    )
    group_id = cursor.lastrowid
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    cursor.execute(
        'INSERT INTO group_members (group_id, user_id, user_name) VALUES (?, ?, ?)',
        (group_id, user_id, update.effective_user.first_name)
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    members = [member.strip() for member in members_text.split(',')]
    for member in members:
        if member.startswith('@'):
            cursor.execute(
                'INSERT INTO group_members (group_id, user_name) VALUES (?, ?)',
                (group_id, member)
            )
    
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {members_text}\n\n"
        f"–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º –∫–æ–¥ –≥—Ä—É–ø–ø—ã: `GROUP_{group_id}`",
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_my_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT g.id, g.name, COUNT(gm.id) as member_count
        FROM groups g
        JOIN group_members gm ON g.id = gm.group_id
        WHERE gm.user_id = ? OR g.admin_id = ?
        GROUP BY g.id
    ''', (user_id, user_id))
    
    groups = cursor.fetchall()
    
    if not groups:
        await update.callback_query.message.reply_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    
    message = "üë• –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n"
    keyboard = []
    
    for group_id, name, member_count in groups:
        message += f"üè† {name}\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
        message += f"üîó –ö–æ–¥: `GROUP_{group_id}`\n"
        message += "‚îÄ" * 20 + "\n"
        
        keyboard.append([InlineKeyboardButton(
            f"üìã –§–∏–ª—å—Ç—Ä—ã {name}", 
            callback_data=f"group_filters_{group_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    
    conn.close()

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ö–ê–õ–ï–ù–î–ê–†–ï–ú ===

async def calendar_integration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–º–µ–Ω—ã
    cursor.execute('''
        SELECT name, next_change, location 
        FROM filters 
        WHERE user_id = ? AND status = 'active'
        ORDER BY next_change
        LIMIT 10
    ''', (user_id,))
    
    upcoming = cursor.fetchall()
    
    message = "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–º–µ–Ω:\n\n"
    
    if not upcoming:
        message += "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–º–µ–Ω."
    else:
        for name, next_change, location in upcoming:
            days_left = (datetime.strptime(next_change, '%Y-%m-%d').date() - datetime.now().date()).days
            message += f"üìå {name}\n"
            message += f"üìç {location}\n"
            message += f"üìÖ {next_change} ({days_left} –¥–Ω–µ–π)\n"
            message += "‚îÄ" * 20 + "\n"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è iCal —Ñ–∞–π–ª–∞
    ical_content = generate_ical_content(user_id)
    buf = io.BytesIO(ical_content.encode('utf-8'))
    buf.name = 'filter_calendar.ics'
    
    keyboard = [
        [InlineKeyboardButton("üìÜ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Calendar", callback_data="export_gcal")],
        [InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ iCal —Ñ–∞–π–ª–∞
    await update.message.reply_document(
        document=buf,
        filename='filter_calendar.ics',
        caption="üì• –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–º–µ–Ω (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ª—é–±–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å)"
    )
    
    conn.close()

def generate_ical_content(user_id):
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT name, next_change, location 
        FROM filters 
        WHERE user_id = ? AND status = 'active'
    ''', (user_id,))
    
    filters_list = cursor.fetchall()
    
    ical = [
        "BEGIN:VCALENDAR",
        "VERSION:2.0",
        "PRODID:-//FilterBot//Filter Calendar//RU",
        "CALSCALE:GREGORIAN",
        "METHOD:PUBLISH"
    ]
    
    for name, next_change, location in filters_list:
        event_uid = f"filter_{user_id}_{name}_{next_change}"
        ical.extend([
            "BEGIN:VEVENT",
            f"UID:{event_uid}",
            f"DTSTART;VALUE=DATE:{next_change.replace('-', '')}",
            f"DTEND;VALUE=DATE:{next_change.replace('-', '')}",
            f"SUMMARY:–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ {name}",
            f"DESCRIPTION:–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ {name} –≤ {location}",
            "STATUS:CONFIRMED",
            "END:VEVENT"
        ])
    
    ical.append("END:VCALENDAR")
    
    conn.close()
    return "\n".join(ical)

# === –§–û–¢–û–§–ò–ö–°–ê–¶–ò–Ø –ó–ê–ú–ï–ù –§–ò–õ–¨–¢–†–û–í ===

async def photo_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–º–µ–Ω —Å —Ñ–æ—Ç–æ
    cursor.execute('''
        SELECT f.name, rh.replacement_date, rh.photo_id, rh.notes
        FROM replacement_history rh
        JOIN filters f ON rh.filter_id = f.id
        WHERE f.user_id = ? AND rh.photo_id IS NOT NULL
        ORDER BY rh.replacement_date DESC
        LIMIT 10
    ''', (user_id,))
    
    photos_history = cursor.fetchall()
    
    message = "üì∏ –ò—Å—Ç–æ—Ä–∏—è —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–æ–≤:\n\n"
    
    if not photos_history:
        message += "–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–º–µ–Ω–∞—Ö."
        await update.message.reply_text(message)
        return
    
    for name, date, photo_id, notes in photos_history:
        message += f"üìå {name}\n"
        message += f"üìÖ {date}\n"
        if notes:
            message += f"üìù {notes}\n"
        message += "‚îÄ" * 20 + "\n"
    
    await update.message.reply_text(message)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ
    for name, date, photo_id, notes in photos_history[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ç–æ
        try:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo_id,
                caption=f"üì∏ {name} - {date}"
            )
        except BadRequest:
            await update.message.reply_text(f"–§–æ—Ç–æ –¥–ª—è {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
async def handle_replacement_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo and context.user_data.get('awaiting_replacement_photo'):
        photo_id = update.message.photo[-1].file_id
        context.user_data['replacement_photo_id'] = photo_id
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        filter_id = context.user_data['replacement_filter_id']
        conn = sqlite3.connect('filters.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE replacement_history 
            SET photo_id = ? 
            WHERE filter_id = ? 
            ORDER BY id DESC LIMIT 1
        ''', (photo_id, filter_id))
        
        conn.commit()
        conn.close()
        
        context.user_data['awaiting_replacement_photo'] = False
        
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–æ–º."
        )

# === –û–¢–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

async def analytics_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="financial_report")],
        [InlineKeyboardButton("üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω", callback_data="efficiency_report")],
        [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (CSV)", callback_data="full_report_csv")],
        [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="planning_report")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async def generate_financial_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    cursor.execute('''
        SELECT 
            strftime('%Y-%m', replacement_date) as month,
            SUM(cost) as monthly_cost,
            COUNT(*) as replacements_count
        FROM replacement_history rh
        JOIN filters f ON rh.filter_id = f.id
        WHERE f.user_id = ?
        GROUP BY month
        ORDER BY month DESC
        LIMIT 6
    ''', (user_id,))
    
    financial_data = cursor.fetchall()
    
    if not financial_data:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    message = "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n"
    
    total_cost = 0
    for month, monthly_cost, count in financial_data:
        message += f"üìÖ {month[5:7]}/{month[:4]}:\n"
        message += f"   üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {monthly_cost:.2f} —Ä—É–±.\n"
        message += f"   üîÑ –ó–∞–º–µ–Ω: {count}\n"
        message += f"   üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {monthly_cost/count:.2f} —Ä—É–±.\n\n"
        total_cost += monthly_cost
    
    message += f"üíµ –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_cost:.2f} —Ä—É–±.\n"
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    cursor.execute('''
        SELECT AVG(cost) as avg_cost, COUNT(*) as upcoming
        FROM filters 
        WHERE user_id = ? AND status = 'active' 
        AND next_change BETWEEN date('now') AND date('now', '+1 month')
    ''', (user_id,))
    
    forecast = cursor.fetchone()
    
    if forecast[1] > 0:
        forecast_cost = forecast[0] * forecast[1]
        message += f"\nüìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü:\n"
        message += f"   üîÑ –ü–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω: {forecast[1]}\n"
        message += f"   üí∞ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {forecast_cost:.2f} —Ä—É–±.\n"
    
    await update.callback_query.message.reply_text(message)
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞
async def generate_csv_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('filters.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–º–µ–Ω–∞–º
    cursor.execute('''
        SELECT 
            f.name,
            f.location,
            rh.replacement_date,
            rh.cost,
            rh.notes,
            CASE WHEN rh.photo_id IS NOT NULL THEN '–î–∞' ELSE '–ù–µ—Ç' END as has_photo
        FROM replacement_history rh
        JOIN filters f ON rh.filter_id = f.id
        WHERE f.user_id = ?
        ORDER BY rh.replacement_date DESC
    ''', (user_id,))
    
    data = cursor.fetchall()
    
    if not data:
        await update.callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    writer = csv.writer(output)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow(['–§–∏–ª—å—Ç—Ä', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è', '–§–æ—Ç–æ–æ—Ç—á–µ—Ç'])
    
    # –î–∞–Ω–Ω—ã–µ
    for row in data:
        writer.writerow(row)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    buf = io.BytesIO()
    buf.write(output.getvalue().encode('utf-8'))
    buf.seek(0)
    buf.name = 'filter_report.csv'
    
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=buf,
        filename='filter_report.csv',
        caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–º–µ–Ω–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"
    )
    
    conn.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"), show_filters))
    application.add_handler(MessageHandler(filters.Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_statistics))
    application.add_handler(MessageHandler(filters.Text("üë• –ì—Ä—É–ø–ø—ã"), group_management))
    application.add_handler(MessageHandler(filters.Text("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"), calendar_integration))
    application.add_handler(MessageHandler(filters.Text("üì∏ –§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã"), photo_reports))
    application.add_handler(MessageHandler(filters.Text("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), analytics_reports))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(generate_statistics_charts, pattern="^stats_charts$"))
    application.add_handler(CallbackQueryHandler(show_my_groups, pattern="^my_groups$"))
    application.add_handler(CallbackQueryHandler(generate_financial_report, pattern="^financial_report$"))
    application.add_handler(CallbackQueryHandler(generate_csv_report, pattern="^full_report_csv$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, handle_replacement_photo))
    
    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    group_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_group_start, pattern="^create_group$")],
        states={
            GROUP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_group_name)],
            GROUP_MEMBERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_group_members)]
        },
        fallbacks=[]
    )
    application.add_handler(group_conv_handler)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    job_queue = application.job_queue
    job_queue.run_repeating(check_expired_filters, interval=86400, first=10)
    job_queue.run_repeating(send_upcoming_notifications, interval=86400, first=10)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
