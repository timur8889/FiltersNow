import logging
import sqlite3
import gspread
import os
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import Request
from google.auth.exceptions import RefreshError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME'
ADMIN_ID = 5024165375

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
SERVICE_ACCOUNT_FILE = 'service_account.json'
SPREADSHEET_NAME = '–£—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤'

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_LIFETIMES = {
    "—É–≥–æ–ª—å–Ω—ã–π": 180,
    "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π": 90,
    "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Å–∞": 365,
    "—É–º—è–≥—á–∏—Ç–µ–ª—å": 180,
    "–ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä": 180,
    "–ø—Ä–µ-—Ñ–∏–ª—å—Ç—Ä": 90
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ Google Sheets
google_sheets_available = False
spreadsheet_url = ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Google Sheets
def diagnose_google_sheets_issue():
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(SERVICE_ACCOUNT_FILE):
        issues.append("‚ùå –§–∞–π–ª service_account.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return issues
    
    try:
        with open(SERVICE_ACCOUNT_FILE, 'r') as f:
            creds_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email']
        for field in required_fields:
            if field not in creds_data:
                issues.append(f"‚ùå –í —Ñ–∞–π–ª–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        
        if issues:
            return issues
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ private_key
        if not creds_data['private_key'].startswith('-----BEGIN PRIVATE KEY-----'):
            issues.append("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")
            
    except json.JSONDecodeError:
        issues.append("‚ùå –§–∞–π–ª service_account.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
    except Exception as e:
        issues.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return issues

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets
def init_google_sheets_alternative():
    global google_sheets_available, spreadsheet_url
    
    try:
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
        issues = diagnose_google_sheets_issue()
        if issues:
            for issue in issues:
                logging.error(issue)
            return None
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if creds.expired and creds.refresh_token:
            creds.refresh(Request())
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = gspread.authorize(creds)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        client.list_spreadsheet_files()
        
        # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        try:
            spreadsheet = client.open(SPREADSHEET_NAME)
        except gspread.SpreadsheetNotFound:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = client.create(SPREADSHEET_NAME)
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
            spreadsheet.share(None, perm_type='anyone', role='reader')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
        try:
            worksheet = spreadsheet.get_worksheet(0)
        except gspread.WorksheetNotFound:
            worksheet = spreadsheet.add_worksheet(title="–§–∏–ª—å—Ç—Ä—ã", rows=100, cols=10)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        current_data = worksheet.get_all_values()
        if not current_data:
            headers = ['ID', 'User ID', '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', '–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '–û—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–Ω–µ–π', '–°—Ç–∞—Ç—É—Å']
            worksheet.append_row(headers)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.format('A1:G1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        global spreadsheet_url
        spreadsheet_url = f"https://docs.google.com/spreadsheets/d/{spreadsheet.id}"
        
        google_sheets_available = True
        logging.info(f"‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: {spreadsheet_url}")
        return worksheet
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        google_sheets_available = False
        return None

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
def simple_sync_to_google_sheets():
    if not google_sheets_available:
        return False
    
    try:
        worksheet = init_google_sheets_alternative()
        if not worksheet:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, filter_type, last_change, expiry_date, lifetime_days FROM filters")
        filters = cur.fetchall()
        conn.close()
        
        if not filters:
            return True
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        all_data = worksheet.get_all_values()
        if len(all_data) > 1:
            worksheet.delete_rows(2, len(all_data))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        today = datetime.now().date()
        for f in filters:
            expiry_date = datetime.strptime(str(f[4]), '%Y-%m-%d').date()
            days_until_expiry = (expiry_date - today).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if days_until_expiry <= 0:
                status = "–ü–†–û–°–†–û–ß–ï–ù"
            elif days_until_expiry <= 7:
                status = "–°–†–û–ß–ù–û"
            elif days_until_expiry <= 30:
                status = "–°–ö–û–†–û"
            else:
                status = "–ù–û–†–ú–ê"
            
            row_data = [
                f[0],  # ID
                f[1],  # User ID
                f[2],  # –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
                str(f[3]),  # –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã
                str(f[4]),  # –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏
                days_until_expiry,  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–Ω–µ–π
                status  # –°—Ç–∞—Ç—É—Å
            ]
            worksheet.append_row(row_data)
        
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(filters)} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    filter_type TEXT,
                    last_change DATE,
                    expiry_date DATE,
                    lifetime_days INTEGER)''')
        conn.commit()
        conn.close()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_change_date = State()
    waiting_lifetime = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"))
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"))
    keyboard.add(types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"))
    keyboard.add(types.KeyboardButton("üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏"))
    if google_sheets_available:
        keyboard.add(types.KeyboardButton("üìä Google Sheets"))
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("90 –¥–Ω–µ–π"),
        types.KeyboardButton("180 –¥–Ω–µ–π"),
        types.KeyboardButton("365 –¥–Ω–µ–π")
    )
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("–£–≥–æ–ª—å–Ω—ã–π"),
        types.KeyboardButton("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Å–∞"),
        types.KeyboardButton("–£–º—è–≥—á–∏—Ç–µ–ª—å")
    )
    keyboard.add(types.KeyboardButton("–î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    status_text = "‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω" if google_sheets_available else "‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ)"
    
    await message.answer(
        f"ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        f"{status_text}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await FilterStates.waiting_filter_type.set()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=get_filter_type_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "–î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞:", reply_markup=get_cancel_keyboard())
        return
    
    async with state.proxy() as data:
        data['filter_type'] = message.text
        data['lifetime'] = get_lifetime_by_type(message.text)

    await FilterStates.next()
    await message.answer(
        f"üìÖ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è '{message.text}': {data['lifetime']} –¥–Ω–µ–π\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):",
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_change_date)
async def process_date(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        change_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            
        await FilterStates.next()
        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã {data['lifetime']} –¥–Ω–µ–π?\n"
            f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:",
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=get_cancel_keyboard())

@dp.message_handler(state=FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        async with state.proxy() as data:
            change_date = data['change_date']
            filter_type = data['filter_type']
            
            if message.text.endswith("–¥–Ω–µ–π"):
                lifetime = int(message.text.split()[0])
            else:
                lifetime = int(message.text)
            
            expiry_date = change_date + timedelta(days=lifetime)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            conn = sqlite3.connect('filters.db')
            cur = conn.cursor()
            cur.execute('''INSERT INTO filters 
                        (user_id, filter_type, last_change, expiry_date, lifetime_days) 
                        VALUES (?, ?, ?, ?, ?)''',
                       (message.from_user.id, filter_type, change_date, expiry_date, lifetime))
            conn.commit()
            conn.close()

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets
            sync_success = simple_sync_to_google_sheets()
            sync_status = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Google Sheets" if sync_success else "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ"

            days_until_expiry = (expiry_date - datetime.now().date()).days
            status_icon = "üîî" if days_until_expiry <= 30 else "‚úÖ"
            
            await message.answer(
                f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìä –¢–∏–ø: {filter_type}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {change_date}\n"
                f"‚è∞ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã: {lifetime} –¥–Ω–µ–π\n"
                f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {expiry_date} {status_icon}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n\n"
                f"{sync_status}",
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", reply_markup=get_lifetime_keyboard())

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=get_main_keyboard())
        return

    response = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        if days_until_expiry <= 0:
            status_icon = "‚ùå –ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üî¥ –°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üü° –°–ö–û–†–û"
        else:
            status_icon = "‚úÖ –ù–û–†–ú–ê"
        
        response += (f"üÜî {f[0]}\n"
                    f"üìä –¢–∏–ø: {f[1]}\n"
                    f"üìÖ –ó–∞–º–µ–Ω–µ–Ω: {f[2]}\n"
                    f"‚è∞ –°—Ä–æ–∫: {f[4]} –¥–Ω–µ–π\n"
                    f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {f[3]}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n"
                    f"üì¢ –°—Ç–∞—Ç—É—Å: {status_icon}\n\n")

    await message.answer(response, reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer("üì≠ –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", reply_markup=get_main_keyboard())
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[1]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        if days_until_expiry <= 0:
            expired_filters.append(f"{f[0]} - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        elif days_until_expiry <= 30:
            expiring_soon.append(f"{f[0]} - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω–µ–π")

    response = "üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
    
    if expired_filters:
        response += "‚ùå –ü–†–û–°–†–û–ß–ï–ù–´:\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "üü° –°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:\n" + "\n".join(expiring_soon) + "\n\n"
    
    if not expired_filters and not expiring_soon:
        response += "‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ!\n"

    await message.answer(response, reply_markup=get_main_keyboard())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Sheets
@dp.message_handler(lambda message: message.text == "üìä Google Sheets")
@dp.message_handler(commands=['sheets'])
async def cmd_sheets(message: types.Message):
    if not google_sheets_available:
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
        issues = diagnose_google_sheets_issue()
        issues_text = "\n".join(issues) if issues else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        
        await message.answer(
            f"‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
            f"–ü—Ä–æ–±–ª–µ–º—ã:\n{issues_text}\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:\n"
            f"1. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ Google Cloud Console\n"
            f"2. –í–∫–ª—é—á–∏—Ç–µ Google Sheets API\n"
            f"3. –°–∫–∞—á–∞–π—Ç–µ JSON-–∫–ª—é—á –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤ 'service_account.json'\n"
            f"4. –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    sync_success = simple_sync_to_google_sheets()
    
    if sync_success:
        await message.answer(
            f"‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
            f"üìä –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:\n{spreadsheet_url}\n\n"
            f"–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.",
            reply_markup=get_main_keyboard(),
            disable_web_page_preview=True
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets\n"
            "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['delete'])
async def cmd_delete(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_main_keyboard())
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        status = "‚ùå" if days_until_expiry <= 0 else "üü°" if days_until_expiry <= 30 else "‚úÖ"
        
        keyboard.add(types.InlineKeyboardButton(
            f"{status} {f[1]} (–¥–æ {f[2]})",
            callback_data=f"delete_{f[0]}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_'))
async def process_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[1]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    
    if filter_info:
        cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?",
                    (filter_id, callback_query.from_user.id))
        conn.commit()
        conn.close()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
        simple_sync_to_google_sheets()
        
        await callback_query.message.edit_text(
            f"‚úÖ –§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω:\nüìä {filter_info[0]}\nüìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–ª: {filter_info[1]}"
        )
    else:
        await callback_query.answer("–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        conn.close()

@dp.callback_query_handler(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:",
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
    init_google_sheets_alternative()
    
    if not google_sheets_available:
        logging.warning("Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.")
    
    executor.start_polling(dp, skip_updates=True)
