import logging
import sqlite3
import os
import asyncio
import shutil
import traceback
import re
import sys
import pandas as pd
import openpyxl
from datetime import datetime, timedelta
from contextlib import contextmanager
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365,
    "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π": 90,
    "—É–≥–æ–ª—å–Ω—ã–π": 180,
    "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π": 365,
    "—É–ª—å—Ç—Ä–∞—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è": 365,
    "–æ–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å": 365
}

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_FILTERS_PER_USER = 50

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = sqlite3.connect('filters.db')
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        filter_type TEXT,
                        location TEXT,
                        last_change DATE,
                        expiry_date DATE,
                        lifetime_days INTEGER,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
            conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def get_user_filters(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", (user_id,))
        return [dict(row) for row in cur.fetchall()]

def get_filter_by_id(filter_id, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
        result = cur.fetchone()
        return dict(result) if result else None

def check_filters_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    filters = get_user_filters(user_id)
    return len(filters) >= MAX_FILTERS_PER_USER

# ========== –í–ê–õ–ò–î–ê–¶–ò–Ø ==========
def validate_date(date_str: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
    date_str = date_str.strip()
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d-%m-%y', '%d-%m-%Y', '%d/%m/%y', '%d/%m/%Y']
    
    for fmt in formats:
        try:
            date_obj = datetime.strptime(date_str, fmt).date()
            today = datetime.now().date()
            
            if date_obj > today + timedelta(days=1):
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                
            return date_obj
        except ValueError:
            continue
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì")

def validate_lifetime(days_str: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(days_str)
        if days <= 0:
            raise ValueError("–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        if days > 2000:
            raise ValueError("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã")
        return days
    except ValueError:
        raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")

def safe_db_string(value: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ë–î"""
    if not value:
        return ""
    return re.sub(r'[;\'"\\]', '', value.strip())

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_keyboard(user_id=None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Excel –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    keyboard.row(
        types.KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel"),
        types.KeyboardButton("üì• –ò–º–ø–æ—Ä—Ç Excel")
    )
    if user_id and str(user_id) == str(ADMIN_ID):
        keyboard.row(types.KeyboardButton("üëë –ê–¥–º–∏–Ω"))
    return keyboard

def get_management_keyboard():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

def get_filter_type_keyboard():
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π"),
        types.KeyboardButton("üîÆ –£–≥–æ–ª—å–Ω—ã–π")
    )
    keyboard.row(
        types.KeyboardButton("üíé –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π"),
        types.KeyboardButton("üåÄ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å")
    )
    keyboard.row(types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.row(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_lifetime_keyboard():
    """–í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("90 –¥–Ω–µ–π"),
        types.KeyboardButton("180 –¥–Ω–µ–π"),
        types.KeyboardButton("365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    keyboard.row(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_edit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_confirmation_keyboard(filter_id=None, action="delete"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if action == "delete":
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{filter_id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
        )
    return keyboard

def get_filters_list_keyboard(filters, action="edit"):
    """–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_left = (expiry_date - datetime.now().date()).days
        
        if days_left <= 0:
            icon = "üî¥"
        elif days_left <= 7:
            icon = "üü°"
        elif days_left <= 30:
            icon = "üü†"
        else:
            icon = "‚úÖ"
            
        button_text = f"{icon} {f['filter_type']} - {f['location']}"
        keyboard.add(types.KeyboardButton(button_text))
    
    keyboard.row(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

# ========== STATES ==========
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

class DeleteFilterStates(StatesGroup):
    waiting_filter_selection = State()

class ExcelStates(StatesGroup):
    waiting_excel_file = State()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def format_date_nice(date):
    return date.strftime('%d.%m.%Y')

def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

def get_status_icon(days_until_expiry):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥"
    elif days_until_expiry <= 7:
        return "üü°"
    elif days_until_expiry <= 30:
        return "üü†"
    else:
        return "‚úÖ"

def create_statistics_message(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not filters:
        return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    total = len(filters)
    expired = 0
    urgent = 0
    warning = 0
    normal = 0
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_left = (expiry_date - datetime.now().date()).days
        
        if days_left <= 0:
            expired += 1
        elif days_left <= 7:
            urgent += 1
        elif days_left <= 30:
            warning += 1
        else:
            normal += 1
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
    def create_bar(percentage, icon):
        bars = int(percentage / 10)
        return icon * bars + " " * (10 - bars)
    
    expired_pct = (expired / total) * 100
    urgent_pct = (urgent / total) * 100
    warning_pct = (warning / total) * 100
    normal_pct = (normal / total) * 100
    
    message = (
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í</b>\n\n"
        f"üîß –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: <b>{total}</b>\n\n"
        f"üìà <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired} ({expired_pct:.1f}%)\n{create_bar(expired_pct, 'üî¥')}\n\n"
        f"üü° –°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å (1-7 –¥–Ω.): {urgent} ({urgent_pct:.1f}%)\n{create_bar(urgent_pct, 'üü°')}\n\n"
        f"üü† –°–∫–æ—Ä–æ –∑–∞–º–µ–Ω–∏—Ç—å (8-30 –¥–Ω.): {warning} ({warning_pct:.1f}%)\n{create_bar(warning_pct, 'üü†')}\n\n"
        f"‚úÖ –í –Ω–æ—Ä–º–µ (>30 –¥–Ω.): {normal} ({normal_pct:.1f}%)\n{create_bar(normal_pct, '‚úÖ')}\n\n"
        f"üìÖ <b>–ë–ª–∏–∂–∞–π—à–∞—è –∑–∞–º–µ–Ω–∞:</b>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–º–µ–Ω—ã
    soon_filters = sorted(filters, key=lambda x: datetime.strptime(str(x['expiry_date']), '%Y-%m-%d').date())[:3]
    for i, f in enumerate(soon_filters, 1):
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_left = (expiry_date - datetime.now().date()).days
        icon = get_status_icon(days_left)
        message += f"{icon} {f['filter_type']} - {days_left} –¥–Ω.\n"
    
    return message

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b>\n\n"
        "üíß –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        "üìã <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è∞ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üì§üì• –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç –≤ Excel",
        parse_mode='HTML',
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_main_menu(message: types.Message):
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_main_keyboard(message.from_user.id)
    )

# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê ==========
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add_filter(message: types.Message):
    if check_filters_limit(message.from_user.id):
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {MAX_FILTERS_PER_USER} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            f"–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
        
    await FilterStates.waiting_filter_type.set()
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
        parse_mode='HTML',
        reply_markup=get_filter_type_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await cmd_main_menu(message)
        return
        
    filter_mapping = {
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10",
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20",
        "üíß –ì–µ–π–∑–µ—Ä": "–ì–µ–π–∑–µ—Ä",
        "üíß –ê–∫–≤–∞—Ñ–æ—Ä": "–ê–∫–≤–∞—Ñ–æ—Ä",
        "‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π": "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π",
        "üîÆ –£–≥–æ–ª—å–Ω—ã–π": "–£–≥–æ–ª—å–Ω—ã–π",
        "üíé –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–π",
        "üåÄ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å": "–û–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å"
    }
    
    if message.text in filter_mapping:
        filter_type = filter_mapping[message.text]
    elif message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    else:
        filter_type = safe_db_string(message.text)
    
    async with state.proxy() as data:
        data['filter_type'] = filter_type
    
    await FilterStates.waiting_location.set()
    await message.answer(
        f"üîß <b>–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b> {filter_type}\n\n"
        f"üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>\n\n"
        f"–ü—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è, –û—Ñ–∏—Å –∏ —Ç.–¥.",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
        
    location = safe_db_string(message.text)
    
    async with state.proxy() as data:
        data['location'] = location
    
    await FilterStates.waiting_change_date.set()
    await message.answer(
        f"üìç <b>–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b> {location}\n\n"
        f"üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã:</b>\n\n"
        f"–§–æ—Ä–º–∞—Ç: <i>–î–î.–ú–ú.–ì–ì–ì–ì</i>\n"
        f"–ü—Ä–∏–º–µ—Ä: <i>15.01.2024</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_change_date)
async def process_change_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
        
    try:
        change_date = validate_date(message.text)
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            filter_type = data['filter_type']
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
            auto_lifetime = get_lifetime_by_type(filter_type)
            data['lifetime_days'] = auto_lifetime
        
        await FilterStates.waiting_lifetime.set()
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(change_date)}\n\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {auto_lifetime} –¥–Ω–µ–π\n\n"
            f"‚úÖ <i>–°—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>\n"
            f"üîÑ <b>–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã?</b>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ:</b>\n\n{str(e)}",
            parse_mode='HTML'
        )

@dp.message_handler(state=FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await cmd_main_menu(message)
        return
        
    try:
        lifetime_mapping = {
            "90 –¥–Ω–µ–π": 90,
            "180 –¥–Ω–µ–π": 180,
            "365 –¥–Ω–µ–π": 365
        }
        
        if message.text in lifetime_mapping:
            lifetime_days = lifetime_mapping[message.text]
        elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message.answer(
                "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n\n–ü—Ä–∏–º–µ—Ä: 120",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
            return
        else:
            lifetime_days = validate_lifetime(message.text)
        
        async with state.proxy() as data:
            filter_type = data['filter_type']
            location = data['location']
            change_date = data['change_date']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            expiry_date = change_date + timedelta(days=lifetime_days)
            
            with get_db_connection() as conn:
                cur = conn.cursor()
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                            (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime_days))
                conn.commit()
        
        await state.finish()
        
        await message.answer(
            f"‚úÖ <b>–§–ò–õ–¨–¢–† –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(change_date)}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime_days} –¥–Ω–µ–π\n"
            f"üìÖ <b>–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞:</b> {format_date_nice(expiry_date)}\n\n"
            f"üí° <i>–§–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å—Ä–æ–∫–µ —Å–ª—É–∂–±—ã:</b>\n\n{str(e)}",
            parse_mode='HTML'
        )

# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò ==========
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# ========== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê ==========
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_edit_filter(message: types.Message):
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    await EditFilterStates.waiting_filter_selection.set()
    await message.answer(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        parse_mode='HTML',
        reply_markup=get_filters_list_keyboard(filters, "edit")
    )

@dp.message_handler(state=EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await cmd_main_menu(message)
        return
    
    filters = get_user_filters(message.from_user.id)
    selected_filter = None
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    for f in filters:
        display_text = f"{get_status_icon((datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date() - datetime.now().date()).days)} {f['filter_type']} - {f['location']}"
        if message.text == display_text:
            selected_filter = f
            break
    
    if not selected_filter:
        await message.answer(
            "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
            parse_mode='HTML',
            reply_markup=get_filters_list_keyboard(filters, "edit")
        )
        return
    
    async with state.proxy() as data:
        data['editing_filter'] = selected_filter
    
    await EditFilterStates.waiting_field_selection.set()
    
    expiry_date = datetime.strptime(str(selected_filter['expiry_date']), '%Y-%m-%d').date()
    days_left = (expiry_date - datetime.now().date()).days
    
    await message.answer(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        f"üîß <b>–¢–∏–ø:</b> {selected_filter['filter_type']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {selected_filter['location']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {format_date_nice(datetime.strptime(str(selected_filter['last_change']), '%Y-%m-%d').date())}\n"
        f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {selected_filter['lifetime_days']} –¥–Ω–µ–π\n"
        f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n"
        f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n\n"
        f"<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
        parse_mode='HTML',
        reply_markup=get_edit_keyboard()
    )

@dp.message_handler(state=EditFilterStates.waiting_field_selection)
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await cmd_main_menu(message)
        return
    
    field_mapping = {
        "‚úèÔ∏è –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞": "filter_type",
        "üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏": "location", 
        "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": "last_change",
        "‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã": "lifetime_days"
    }
    
    if message.text not in field_mapping:
        await message.answer(
            "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_edit_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['editing_field'] = field_mapping[message.text]
    
    await EditFilterStates.waiting_new_value.set()
    
    field_prompts = {
        "filter_type": "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
        "location": "üìç <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>",
        "last_change": "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì):</b>",
        "lifetime_days": "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö:</b>"
    }
    
    await message.answer(
        field_prompts[field_mapping[message.text]],
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=EditFilterStates.waiting_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    try:
        async with state.proxy() as data:
            filter_data = data['editing_filter']
            field = data['editing_field']
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
            if field == "last_change":
                new_value = validate_date(message.text)
            elif field == "lifetime_days":
                new_value = validate_lifetime(message.text)
            else:
                new_value = safe_db_string(message.text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            with get_db_connection() as conn:
                cur = conn.cursor()
                
                if field == "last_change":
                    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    cur.execute('''UPDATE filters SET last_change = ?, expiry_date = date(?, '+' || lifetime_days || ' days') 
                                WHERE id = ? AND user_id = ?''',
                                (new_value, new_value, filter_data['id'], message.from_user.id))
                elif field == "lifetime_days":
                    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    cur.execute('''UPDATE filters SET lifetime_days = ?, expiry_date = date(last_change, '+' || ? || ' days') 
                                WHERE id = ? AND user_id = ?''',
                                (new_value, new_value, filter_data['id'], message.from_user.id))
                else:
                    cur.execute(f'UPDATE filters SET {field} = ? WHERE id = ? AND user_id = ?',
                                (new_value, filter_data['id'], message.from_user.id))
                
                conn.commit()
        
        await state.finish()
        await message.answer(
            f"‚úÖ <b>–§–ò–õ–¨–¢–† –û–ë–ù–û–í–õ–ï–ù!</b>\n\n"
            f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ:</b> {field}\n"
            f"üìù <b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {new_value}",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n{str(e)}",
            parse_mode='HTML'
        )

# ========== –£–î–ê–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê ==========
@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_delete_filter(message: types.Message):
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    await DeleteFilterStates.waiting_filter_selection.set()
    await message.answer(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        parse_mode='HTML',
        reply_markup=get_filters_list_keyboard(filters, "delete")
    )

@dp.message_handler(state=DeleteFilterStates.waiting_filter_selection)
async def process_delete_filter_selection(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await cmd_main_menu(message)
        return
    
    filters = get_user_filters(message.from_user.id)
    selected_filter = None
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    for f in filters:
        display_text = f"{get_status_icon((datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date() - datetime.now().date()).days)} {f['filter_type']} - {f['location']}"
        if message.text == display_text:
            selected_filter = f
            break
    
    if not selected_filter:
        await message.answer(
            "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
            parse_mode='HTML',
            reply_markup=get_filters_list_keyboard(filters, "delete")
        )
        return
    
    expiry_date = datetime.strptime(str(selected_filter['expiry_date']), '%Y-%m-%d').date()
    days_left = (expiry_date - datetime.now().date()).days
    
    await message.answer(
        f"üóëÔ∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
        f"üîß <b>–¢–∏–ø:</b> {selected_filter['filter_type']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {selected_filter['location']}\n"
        f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n"
        f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n\n"
        f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä?</b>",
        parse_mode='HTML',
        reply_markup=get_confirmation_keyboard(selected_filter['id'])
    )
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_'))
async def process_confirm_delete(callback_query: types.CallbackQuery):
    filter_id = int(callback_query.data.split('_')[-1])
    
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM filters WHERE id = ?", (filter_id,))
        conn.commit()
    
    await callback_query.message.edit_text(
        "‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>",
        parse_mode='HTML'
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'cancel_delete')
async def process_cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode='HTML'
    )
    await callback_query.answer()

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
@dp.message_handler(lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_statistics(message: types.Message):
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    stats_message = create_statistics_message(filters)
    await message.answer(stats_message, parse_mode='HTML')

# ========== –ü–†–û–°–ú–û–¢–† –§–ò–õ–¨–¢–†–û–í ==========
@dp.message_handler(lambda message: message.text == "üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def cmd_list_filters(message: types.Message):
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    response = "üîß <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    
    for i, f in enumerate(filters, 1):
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        icon = get_status_icon(days_until_expiry)
        
        response += (
            f"{icon} <b>–§–∏–ª—å—Ç—Ä #{f['id']}</b>\n"
            f"üîß {f['filter_type']}\n"
            f"üìç {f['location']}\n"
            f"üìÖ –ó–∞–º–µ–Ω–∞: {format_date_nice(datetime.strptime(str(f['last_change']), '%Y-%m-%d').date())}\n"
            f"‚è±Ô∏è –°—Ä–æ–∫: {f['lifetime_days']} –¥–Ω–µ–π\n"
            f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {days_until_expiry} –¥–Ω–µ–π\n\n"
        )
    
    await message.answer(response, parse_mode='HTML')

@dp.message_handler(lambda message: message.text == "‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
async def cmd_expiry_dates(message: types.Message):
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    urgent_filters = []
    warning_filters = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 7:
            urgent_filters.append((f, days_until_expiry))
        elif days_until_expiry <= 30:
            warning_filters.append((f, days_until_expiry))
    
    response = "‚è∞ <b>–°–†–û–ö–ò –ó–ê–ú–ï–ù–´ –§–ò–õ–¨–¢–†–û–í</b>\n\n"
    
    if urgent_filters:
        response += "üî¥ <b>–°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–¨ (–¥–æ 7 –¥–Ω–µ–π):</b>\n"
        for f, days in urgent_filters:
            response += f"‚Ä¢ {f['filter_type']} - {f['location']} ({days} –¥–Ω.)\n"
        response += "\n"
    
    if warning_filters:
        response += "üü† <b>–°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨ (–¥–æ 30 –¥–Ω–µ–π):</b>\n"
        for f, days in warning_filters:
            response += f"‚Ä¢ {f['filter_type']} - {f['location']} ({days} –¥–Ω.)\n"
    
    if not urgent_filters and not warning_filters:
        response += "‚úÖ <b>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ</b>\n\n–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞ –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π"
    
    await message.answer(response, parse_mode='HTML')

# ========== EXCEL –§–£–ù–ö–¶–ò–û–ù–ê–õ ==========
@dp.message_handler(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel")
async def cmd_export_excel(message: types.Message):
    filters = get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞</b>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame
        data = []
        for f in filters:
            expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
            days_left = (expiry_date - datetime.now().date()).days
            
            data.append({
                'ID': f['id'],
                '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞': f['filter_type'],
                '–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏': f['location'],
                '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã': f['last_change'],
                '–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)': f['lifetime_days'],
                '–ì–æ–¥–µ–Ω –¥–æ': f['expiry_date'],
                '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π': days_left,
                '–°—Ç–∞—Ç—É—Å': '–°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å' if days_left <= 7 else '–°–∫–æ—Ä–æ –∑–∞–º–µ–Ω–∏—Ç—å' if days_left <= 30 else '–í –Ω–æ—Ä–º–µ'
            })
        
        df = pd.DataFrame(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        filename = f"filters_export_{message.from_user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        os.makedirs('exports', exist_ok=True)
        filepath = os.path.join('exports', filename)
        
        df.to_excel(filepath, index=False, engine='openpyxl')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'rb') as file:
            await message.answer_document(
                file,
                caption="üì§ <b>–≠–ö–°–ü–û–†–¢ –§–ò–õ–¨–¢–†–û–í</b>\n\n"
                       f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
                       f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML'
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(filepath)
        except:
            pass
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:</b>\n\n{str(e)}",
            parse_mode='HTML'
        )

@dp.message_handler(lambda message: message.text == "üì• –ò–º–ø–æ—Ä—Ç Excel")
async def cmd_import_excel(message: types.Message):
    await ExcelStates.waiting_excel_file.set()
    await message.answer(
        "üì• <b>–ò–ú–ü–û–†–¢ –ò–ó EXCEL</b>\n\n"
        "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:</b>\n"
        "‚Ä¢ –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "‚Ä¢ –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
        "‚Ä¢ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "‚Ä¢ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)\n\n"
        "üí° <i>–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=ExcelStates.waiting_excel_file)
async def process_excel_file(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    try:
        if not message.document.file_name.endswith(('.xlsx', '.xls')):
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"temp_import_{message.from_user.id}.xlsx"
        with open(temp_file, 'wb') as file:
            file.write(downloaded_file.getvalue())
        
        # –ß–∏—Ç–∞–µ–º Excel
        df = pd.read_excel(temp_file)
        required_columns = ['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã']
        
        for col in required_columns:
            if col not in df.columns:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞: {col}")
        
        imported_count = 0
        errors = []
        
        with get_db_connection() as conn:
            cur = conn.cursor()
            
            for index, row in df.iterrows():
                try:
                    filter_type = safe_db_string(str(row['–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞']))
                    location = safe_db_string(str(row['–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏']))
                    
                    if isinstance(row['–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã'], str):
                        last_change = validate_date(row['–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã'])
                    else:
                        last_change = row['–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã'].date()
                    
                    if pd.isna(row.get('–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)', pd.NA)):
                        lifetime_days = get_lifetime_by_type(filter_type)
                    else:
                        lifetime_days = int(row['–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    current_filters = len(get_user_filters(message.from_user.id))
                    if current_filters >= MAX_FILTERS_PER_USER:
                        errors.append(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                        break
                    
                    expiry_date = last_change + timedelta(days=lifetime_days)
                    
                    cur.execute('''INSERT INTO filters 
                                (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                                VALUES (?, ?, ?, ?, ?, ?)''',
                                (message.from_user.id, filter_type, location, last_change, expiry_date, lifetime_days))
                    
                    imported_count += 1
                    
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: {str(e)}")
            
            conn.commit()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(temp_file)
        except:
            pass
        
        response = f"‚úÖ <b>–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù</b>\n\nüì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        if errors:
            response += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏: {len(errors)}\n"
            for error in errors[:3]:
                response += f"‚Ä¢ {error}\n"
        
        await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard(message.from_user.id))
        await state.finish()
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:</b>\n\n{str(e)}",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# ========== –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ==========
async def check_expired_filters():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                          FROM filters 
                          WHERE expiry_date BETWEEN date('now') AND date('now', '+7 days')''')
            expiring_filters = cur.fetchall()
            
        for user_id, filter_type, location, expiry_date in expiring_filters:
            try:
                days_until_expiry = (datetime.strptime(str(expiry_date), '%Y-%m-%d').date() - datetime.now().date()).days
                expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                
                await bot.send_message(
                    user_id,
                    f"üîî <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ó–ê–ú–ï–ù–ï</b>\n\n"
                    f"üîß {filter_type}\n"
                    f"üìç {location}\n"
                    f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date_nice}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n\n"
                    f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
                    parse_mode='HTML'
                )
                await asyncio.sleep(0.1)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

async def schedule_daily_check():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    while True:
        try:
            await check_expired_filters()
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(300)

async def on_startup(dp):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    init_db()
    asyncio.create_task(schedule_daily_check())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
