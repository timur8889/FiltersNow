import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME'
ADMIN_ID = 5024165375

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                filter_type TEXT,
                location TEXT,
                last_change DATE,
                expiry_date DATE,
                lifetime_days INTEGER)''')
    conn.commit()
    conn.close()

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_list = State()
    waiting_common_location = State()
    waiting_common_change_date = State()
    waiting_common_lifetime = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    return keyboard

def get_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    )
    keyboard.row(
        types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(
        types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"),
        types.KeyboardButton("üìã –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    )
    keyboard.row(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_location_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ"))
    keyboard.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("üìÖ 90 –¥–Ω–µ–π"),
        types.KeyboardButton("üìÖ 180 –¥–Ω–µ–π"),
        types.KeyboardButton("üìÖ 365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_edit_field_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è∞ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"))
    return keyboard

def get_confirmation_keyboard(filter_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{filter_id}"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üíß <i>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤!</i>\n\n"
        "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä\n"
        "‚Ä¢ ‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await FilterStates.waiting_filter_type.set()
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–π —Ç–∏–ø' –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞</i>",
        parse_mode='HTML',
        reply_markup=get_filter_type_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if message.text == "üìã –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ":
        return
    
    async with state.proxy() as data:
        data['filter_type'] = message.text
        data['lifetime'] = get_lifetime_by_type(message.text)

    await FilterStates.next()
    await message.answer(
        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        "üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ' –∏ –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "üìã –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ", state=FilterStates.waiting_filter_type)
async def process_multiple_filters_start(message: types.Message, state: FSMContext):
    await MultipleFiltersStates.waiting_filters_list.set()
    await message.answer(
        "üìã <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üí° <b>–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</b>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –Ω–∞ —Å—Ç—Ä–æ–∫—É\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Å–≤–æ–∏\n"
        "‚Ä¢ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
        "<code>–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10\n"
        "–ì–µ–π–∑–µ—Ä\n"
        "–ê–∫–≤–∞—Ñ–æ—Ä\n"
        "–£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä</code>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(state=MultipleFiltersStates.waiting_filters_list)
async def process_filters_list(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    filters_list = [line.strip() for line in message.text.split('\n') if line.strip()]
    
    if not filters_list:
        await message.answer(
            "‚ùå <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç!</b>\n\n"
            "üí° <i>–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(filters_list) > 10:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
            "üí° <i>–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞ —Ä–∞–∑</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['filters_list'] = filters_list
    
    await MultipleFiltersStates.next()
    await message.answer(
        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üí° <i>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –º–µ—Å—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
@dp.message_handler(state=MultipleFiltersStates.waiting_common_location)
async def process_common_location(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['common_location'] = message.text

    await MultipleFiltersStates.next()
    await message.answer(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):</b>\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>\n\n"
        "üí° <i>–î–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã
@dp.message_handler(state=MultipleFiltersStates.waiting_common_change_date)
async def process_common_change_date(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        change_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        async with state.proxy() as data:
            data['common_change_date'] = change_date
            
        await MultipleFiltersStates.next()
        await message.answer(
            "‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤?</b>\n\n"
            "üí° <i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î</i>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(state=MultipleFiltersStates.waiting_common_lifetime)
async def process_common_lifetime_and_save(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        async with state.proxy() as data:
            filters_list = data['filters_list']
            common_location = data['common_location']
            common_change_date = data['common_change_date']
            
            if message.text.endswith("–¥–Ω–µ–π"):
                common_lifetime = int(message.text.split()[1])
            else:
                common_lifetime = int(message.text)
            
            added_count = 0
            today = datetime.now().date()
            
            conn = sqlite3.connect('filters.db')
            cur = conn.cursor()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_type in filters_list:
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ–±—â–∏–π)
                lifetime = get_lifetime_by_type(filter_type)
                if lifetime == 180:  # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    lifetime = common_lifetime
                
                expiry_date = common_change_date + timedelta(days=lifetime)
                
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                           (message.from_user.id, filter_type, common_location, common_change_date, expiry_date, lifetime))
                added_count += 1
            
            conn.commit()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            expiry_date = common_change_date + timedelta(days=common_lifetime)
            days_until_expiry = (expiry_date - today).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            if days_until_expiry <= 0:
                status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
            elif days_until_expiry <= 7:
                status_icon = "üü° –°–ö–û–†–û –ò–°–¢–ï–ö–ê–ï–¢"
            elif days_until_expiry <= 30:
                status_icon = "üîî –°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
            else:
                status_icon = "‚úÖ –í –ù–û–†–ú–ï"
            
            filters_text = "\n".join([f"‚Ä¢ {filter_type}" for filter_type in filters_list])
            
            await message.answer(
                f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
                f"üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filters_text}\n\n"
                f"üìç <b>–û–±—â–µ–µ –º–µ—Å—Ç–æ:</b> {common_location}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {common_change_date}\n"
                f"‚è∞ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {common_lifetime} –¥–Ω–µ–π\n"
                f"üìÖ <b>–ì–æ–¥–Ω—ã –¥–æ:</b> {expiry_date}\n"
                f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}",
                parse_mode='HTML',
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

@dp.message_handler(state=FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏)
    async with state.proxy() as data:
        data['location'] = message.text

    await FilterStates.next()
    await message.answer(
        f"üìÖ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è '{data['filter_type']}':</b> {data['lifetime']} –¥–Ω–µ–π\n\n"
        f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):</b>\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_change_date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        change_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            
        await FilterStates.next()
        await message.answer(
            f"‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã {data['lifetime']} –¥–Ω–µ–π?</b>\n\n"
            f"üìÖ <i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î</i>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

@dp.message_handler(state=FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        async with state.proxy() as data:
            change_date = data['change_date']
            filter_type = data['filter_type']
            location = data['location']
            
            if message.text.endswith("–¥–Ω–µ–π"):
                lifetime = int(message.text.split()[1])
            else:
                lifetime = int(message.text)
            
            expiry_date = change_date + timedelta(days=lifetime)
            
            conn = sqlite3.connect('filters.db')
            cur = conn.cursor()
            cur.execute('''INSERT INTO filters 
                        (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                        VALUES (?, ?, ?, ?, ?, ?)''',
                       (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
            conn.commit()
            conn.close()

            days_until_expiry = (expiry_date - datetime.now().date()).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            if days_until_expiry <= 0:
                status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
            elif days_until_expiry <= 7:
                status_icon = "üü° –°–ö–û–†–û –ò–°–¢–ï–ö–ê–ï–¢"
            elif days_until_expiry <= 30:
                status_icon = "üîî –°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
            else:
                status_icon = "‚úÖ –í –ù–û–†–ú–ï"
            
            await message.answer(
                f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
                f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {change_date}\n"
                f"‚è∞ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
                f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date}\n"
                f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}",
                parse_mode='HTML',
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìä –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "üí° <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä'</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    response = "üìä <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[4]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if days_until_expiry <= 0:
            status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üü° –°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üîî –°–ö–û–†–û"
        else:
            status_icon = "‚úÖ –ù–û–†–ú–ê"
        
        response += (
            f"üÜî <b>ID:</b> {f[0]}\n"
            f"üîß <b>–¢–∏–ø:</b> {f[1]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {f[2]}\n"
            f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {f[3]}\n"
            f"‚è∞ <b>–°—Ä–æ–∫:</b> {f[5]} –¥–Ω–µ–π\n"
            f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {f[4]}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
            f"üì¢ <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}\n\n"
        )

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "‚è∞ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            "üí° <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    warning_filters = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        if days_until_expiry <= 0:
            expired_filters.append(f"üî¥ {f[0]} ({f[1]}) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        elif days_until_expiry <= 7:
            expiring_soon.append(f"üü° {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω–µ–π")
        elif days_until_expiry <= 30:
            warning_filters.append(f"üîî {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω–µ–π")

    response = "‚è∞ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
    
    if expired_filters:
        response += "üî¥ <b>–ü–†–û–°–†–û–ß–ï–ù–´:</b>\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "üü° <b>–°–†–û–ß–ù–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(expiring_soon) + "\n\n"
    
    if warning_filters:
        response += "üîî <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(warning_filters) + "\n\n"
    
    if not expired_filters and not expiring_soon and not warning_filters:
        response += "‚úÖ <b>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ!</b>\n\n"
        response += "üí° <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30+ –¥–Ω–µ–π</i>"

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@dp.message_handler(commands=['edit'])
async def cmd_edit(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status = "üî¥"
        elif days_until_expiry <= 30:
            status = "üü°"
        else:
            status = "‚úÖ"
        
        keyboard.add(types.KeyboardButton(
            f"{status} {f[1]} | {f[2]} | –¥–æ {f[3]}"
        ))
    
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))

    await EditFilterStates.waiting_filter_selection.set()
    await message.answer(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "üí° <i>–°—Ç–∞—Ç—É—Å—ã: üî¥ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, üü° - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, ‚úÖ - –≤ –Ω–æ—Ä–º–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä –ø–æ–ª—è
@dp.message_handler(state=EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        await state.finish()
        await message.answer(
            "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ç—É—Å–∞)
    filter_text = message.text
    try:
        # –ò—â–µ–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        parts = filter_text.split(' | ')
        if len(parts) >= 3:
            filter_type = parts[0][2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            location = parts[1]
            expiry_date = parts[2][3:].strip()  # –£–±–∏—Ä–∞–µ–º "–¥–æ "
            
            cur.execute("SELECT id FROM filters WHERE user_id = ? AND filter_type = ? AND location = ? AND expiry_date = ?", 
                       (message.from_user.id, filter_type, location, expiry_date))
            result = cur.fetchone()
            
            if result:
                filter_id = result[0]
                
                async with state.proxy() as data:
                    data['edit_filter_id'] = filter_id
                    data['edit_filter_info'] = (filter_type, location, expiry_date)
                
                await EditFilterStates.next()
                await message.answer(
                    f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
                    f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                    f"üìÖ <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:</b> {expiry_date}\n\n"
                    f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
                    parse_mode='HTML',
                    reply_markup=get_edit_field_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
        else:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä</b>",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
        
        conn.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        await state.finish()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@dp.message_handler(state=EditFilterStates.waiting_field_selection)
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º":
        await EditFilterStates.waiting_filter_selection.set()
        await cmd_edit(message)
        return

    async with state.proxy() as data:
        filter_id = data['edit_filter_id']
        filter_info = data['edit_filter_info']
    
    field_mapping = {
        "üîß –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞": "filter_type",
        "üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏": "location", 
        "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": "last_change",
        "‚è∞ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã": "lifetime_days"
    }
    
    if message.text in field_mapping:
        field = field_mapping[message.text]
        async with state.proxy() as data:
            data['edit_field'] = field
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == "filter_type":
            await message.answer(
                "üîß <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
                parse_mode='HTML',
                reply_markup=get_filter_type_keyboard()
            )
        elif field == "location":
            await message.answer(
                "üìç <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>\n\n"
                "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è –∏ —Ç.–¥.</i>",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
        elif field == "last_change":
            await message.answer(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):</b>\n"
                f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime('%Y-%m-%d')}</i>",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
        elif field == "lifetime_days":
            await message.answer(
                "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö):</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        
        await EditFilterStates.next()
    else:
        await message.answer(
            "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞</b>",
            parse_mode='HTML',
            reply_markup=get_edit_field_keyboard()
        )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=EditFilterStates.waiting_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "‚ùå <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    async with state.proxy() as data:
        filter_id = data['edit_filter_id']
        field = data['edit_field']
    
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        if field == "filter_type":
            new_value = message.text
            cur.execute("UPDATE filters SET filter_type = ? WHERE id = ?", 
                       (new_value, filter_id))
            
            await message.answer(
                f"‚úÖ <b>–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> {new_value}",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            
        elif field == "location":
            new_value = message.text
            cur.execute("UPDATE filters SET location = ? WHERE id = ?", 
                       (new_value, filter_id))
            
            await message.answer(
                f"‚úÖ <b>–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b> {new_value}",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            
        elif field == "last_change":
            try:
                new_date = datetime.strptime(message.text, '%Y-%m-%d').date()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
                cur.execute("SELECT lifetime_days FROM filters WHERE id = ?", (filter_id,))
                lifetime = cur.fetchone()[0]
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry = new_date + timedelta(days=lifetime)
                
                cur.execute("UPDATE filters SET last_change = ?, expiry_date = ? WHERE id = ?",
                           (new_date, new_expiry, filter_id))
                
                await message.answer(
                    f"‚úÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:</b> {new_date}\n"
                    f"üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expiry}",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                
            except ValueError:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                    "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î</i>",
                    parse_mode='HTML',
                    reply_markup=get_cancel_keyboard()
                )
                return
                
        elif field == "lifetime_days":
            try:
                if message.text.endswith("–¥–Ω–µ–π"):
                    new_lifetime = int(message.text.split()[1])
                else:
                    new_lifetime = int(message.text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã
                cur.execute("SELECT last_change FROM filters WHERE id = ?", (filter_id,))
                last_change = cur.fetchone()[0]
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry = last_change + timedelta(days=new_lifetime)
                
                cur.execute("UPDATE filters SET lifetime_days = ?, expiry_date = ? WHERE id = ?",
                           (new_lifetime, new_expiry, filter_id))
                
                await message.answer(
                    f"‚úÖ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> {new_lifetime} –¥–Ω–µ–π\n"
                    f"üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expiry}",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                
            except ValueError:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                    "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>",
                    parse_mode='HTML',
                    reply_markup=get_lifetime_keyboard()
                )
                return
        
        conn.commit()
        conn.close()
        await state.finish()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        await state.finish()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
@dp.message_handler(commands=['delete'])
async def cmd_delete(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status = "üî¥"
        elif days_until_expiry <= 30:
            status = "üü°"
        else:
            status = "‚úÖ"
        
        keyboard.add(types.InlineKeyboardButton(
            f"{status} {f[1]} | {f[2]} | –¥–æ {f[3]}",
            callback_data=f"select_delete_{f[0]}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management"))

    await message.answer(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–°—Ç–∞—Ç—É—Å—ã: üî¥ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, üü° - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, ‚úÖ - –≤ –Ω–æ—Ä–º–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('select_delete_'))
async def confirm_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[2]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    conn.close()
    
    if filter_info:
        expiry_date = datetime.strptime(str(filter_info[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        status_text = "üî¥ –ü–†–û–°–†–û–ß–ï–ù" if days_until_expiry <= 0 else "üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ" if days_until_expiry <= 30 else "‚úÖ –í –Ω–æ—Ä–º–µ"
        
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_info[0]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_info[1]}\n"
            f"üìÖ <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:</b> {filter_info[2]}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä?</b>",
            parse_mode='HTML',
            reply_markup=get_confirmation_keyboard(filter_id)
        )
    else:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirm_delete_'))
async def process_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[2]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    
    if filter_info:
        cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?",
                    (filter_id, callback_query.from_user.id))
        conn.commit()
        conn.close()
        
        await callback_query.message.edit_text(
            f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω:</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_info[0]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_info[1]}\n"
            f"üìÖ <b>–°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–ª:</b> {filter_info[2]}",
            parse_mode='HTML'
        )
    else:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        conn.close()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "üí° <i>–§–∏–ª—å—Ç—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω</i>",
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_management")
async def back_to_management(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode='HTML'
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute('''SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN expiry_date < date('now') THEN 1 ELSE 0 END) as expired,
                    SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as urgent,
                    SUM(CASE WHEN expiry_date BETWEEN date('now', '+8 days') AND date('now', '+30 days') THEN 1 ELSE 0 END) as soon
                 FROM filters WHERE user_id = ?''', (message.from_user.id,))
    stats = cur.fetchone()
    
    cur.execute('''SELECT filter_type, COUNT(*) as count 
                   FROM filters WHERE user_id = ? GROUP BY filter_type''', 
                (message.from_user.id,))
    type_stats = cur.fetchall()
    
    conn.close()
    
    response = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
    response += f"üìä <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {stats[0]}\n"
    response += f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {stats[1]}\n"
    response += f"üü° <b>–°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:</b> {stats[2]}\n"
    response += f"üîî <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:</b> {stats[3]}\n\n"
    
    if type_stats:
        response += "<b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
        for filter_type, count in type_stats:
            response += f"  ‚Ä¢ {filter_type}: {count} —à—Ç.\n"
    
    await message.answer(response, parse_mode='HTML', reply_markup=get_management_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "üîô –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "üíß <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)
