import logging
import sqlite3
import os
import asyncio
import shutil
import traceback
from datetime import datetime, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
class Config:
    def __init__(self):
        self.API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        self.ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))
        self.BACKUP_KEEP_COUNT = 7
        self.CHECK_INTERVAL = 3600  # 1 —á–∞—Å
        self.RATE_LIMIT = 10  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        self.MESSAGE_CHUNK_SIZE = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        
        if not self.API_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = Config()
except ValueError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
bot = Bot(token=config.API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
user_requests = defaultdict(list)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                filter_type TEXT,
                location TEXT,
                last_change DATE,
                expiry_date DATE,
                lifetime_days INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    cur.execute('''CREATE INDEX IF NOT EXISTS idx_user_id ON filters(user_id)''')
    cur.execute('''CREATE INDEX IF NOT EXISTS idx_expiry_date ON filters(expiry_date)''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        backup_dir = "backups"
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"filters_backup_{timestamp}.db")
        
        shutil.copy2('filters.db', backup_file)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
        backups = sorted([f for f in os.listdir(backup_dir) if f.startswith("filters_backup")])
        for old_backup in backups[:-config.BACKUP_KEEP_COUNT]:
            os.remove(os.path.join(backup_dir, old_backup))
            logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
def is_rate_limited(user_id, limit=config.RATE_LIMIT, period=60):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    now = datetime.now()
    user_requests[user_id] = [req for req in user_requests[user_id] 
                             if now - req < timedelta(seconds=period)]
    
    if len(user_requests[user_id]) >= limit:
        return True
    
    user_requests[user_id].append(now)
    return False

def log_user_action(user_id, action, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f"User {user_id}: {action} - {details}")

async def safe_send_message(chat_id, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
    if len(text) > config.MESSAGE_CHUNK_SIZE:
        parts = []
        current_part = ""
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏
        lines = text.split('\n')
        
        for line in lines:
            if len(current_part + line + '\n') <= config.MESSAGE_CHUNK_SIZE:
                current_part += line + '\n'
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        for i, part in enumerate(parts):
            if i == len(parts) - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π
                await bot.send_message(chat_id, part, **kwargs)
            else:
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
                await bot.send_message(chat_id, part, parse_mode=None)
            await asyncio.sleep(0.1)
    else:
        await bot.send_message(chat_id, text, **kwargs)

def safe_parse_date(date_str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        formats = ['%d.%m.%y', '%d.%m.%Y', '%d-%m-%y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                date = datetime.strptime(date_str, fmt).date()
                break
            except ValueError:
                continue
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º (–µ—Å–ª–∏ —ç—Ç–æ –∑–∞–º–µ–Ω–∞)
        if date > datetime.now().date():
            raise ValueError("–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã (–Ω–µ —Å—Ç–∞—Ä—à–µ 10 –ª–µ—Ç)
        if date < (datetime.now().date() - timedelta(days=3650)):
            raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
        
        return date
        
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_list = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    return keyboard

def get_add_filter_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä"),
        types.KeyboardButton("üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    )
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    )
    keyboard.row(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_location_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("3Ô∏è‚É£ 90 –¥–Ω–µ–π"),
        types.KeyboardButton("6Ô∏è‚É£ 180 –¥–Ω–µ–π"),
        types.KeyboardButton("1Ô∏è‚É£ 365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_edit_field_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –¢–∏–ø"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"))
    return keyboard

def get_confirmation_keyboard(filter_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{filter_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    return keyboard

def get_reset_confirmation_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
def format_date_nice(date):
    return date.strftime('%d.%m.%y')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def check_expired_filters():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                      FROM filters 
                      WHERE expiry_date BETWEEN date('now') AND date('now', '+7 days')''')
        expiring_filters = cur.fetchall()
        
        # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                      FROM filters 
                      WHERE expiry_date BETWEEN date('now', '-30 days') AND date('now', '-1 day')''')
        expired_filters = cur.fetchall()
        conn.close()
        
        notified_users = set()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞
        for user_id, filter_type, location, expiry_date in expiring_filters:
            try:
                days_until_expiry = (datetime.strptime(str(expiry_date), '%Y-%m-%d').date() - datetime.now().date()).days
                expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                
                await safe_send_message(
                    user_id,
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
                    f"üîß {filter_type}\n"
                    f"üìç {location}\n"
                    f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date_nice}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n\n"
                    f"‚ö†Ô∏è <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</i>",
                    parse_mode='HTML'
                )
                notified_users.add(user_id)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        for user_id, filter_type, location, expiry_date in expired_filters:
            if user_id not in notified_users:  # –ù–µ —Å–ø–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    days_expired = (datetime.now().date() - datetime.strptime(str(expiry_date), '%Y-%m-%d').date()).days
                    expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                    
                    await safe_send_message(
                        user_id,
                        f"üö® <b>–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
                        f"üîß {filter_type}\n"
                        f"üìç {location}\n"
                        f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫: {expiry_date_nice}\n"
                        f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –¥–Ω–µ–π: {days_expired}\n\n"
                        f"‚ùå <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞!</i>",
                        parse_mode='HTML'
                    )
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {exception}\n{traceback.format_exc()}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await safe_send_message(
            config.ADMIN_ID,
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n"
            f"–¢–∏–ø: {type(exception).__name__}\n"
            f"–û—à–∏–±–∫–∞: {str(exception)[:1000]}"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    return True

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def schedule_daily_check():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    while True:
        try:
            await check_expired_filters()
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 3:00
            if datetime.now().hour == 3:
                backup_database()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
        
        # –û–∂–∏–¥–∞–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(config.CHECK_INTERVAL)

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    backup_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(schedule_daily_check())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        await safe_send_message(config.ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel_handler(message: types.Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        log_user_action(message.from_user.id, "cancelled_action", f"state: {current_state}")
    
    await safe_send_message(
        message.chat.id,
        "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", 
        reply_markup=get_main_keyboard()
    )

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.middleware_handler()
async def rate_limit_middleware(handler, event, data):
    """–ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if hasattr(event, 'from_user') and event.from_user:
        user_id = event.from_user.id
        if is_rate_limited(user_id):
            if hasattr(event, 'message'):
                await safe_send_message(event.message.chat.id, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
    return await handler(event, data)

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    log_user_action(message.from_user.id, "started_bot")
    await safe_send_message(
        message.chat.id,
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back(message: types.Message):
    log_user_action(message.from_user.id, "main_menu")
    await safe_send_message(
        message.chat.id,
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    log_user_action(message.from_user.id, "management_menu")
    await safe_send_message(
        message.chat.id,
        "üõ†Ô∏è <b>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    log_user_action(message.from_user.id, "started_add_filter")
    await safe_send_message(
        message.chat.id,
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ</i>",
        parse_mode='HTML',
        reply_markup=get_add_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä", "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤"])
async def process_add_type(message: types.Message):
    log_user_action(message.from_user.id, "chose_add_type", message.text)
    if message.text == "üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä":
        await FilterStates.waiting_filter_type.set()
        await safe_send_message(
            message.chat.id,
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</i>",
            parse_mode='HTML',
            reply_markup=get_filter_type_keyboard()
        )
    elif message.text == "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await MultipleFiltersStates.waiting_filters_list.set()
        await safe_send_message(
            message.chat.id,
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</b>\n\n"
            "üí° <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
            "<i>‚Ä¢ –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10, –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20, –ì–µ–π–∑–µ—Ä</i>\n"
            "<i>‚Ä¢ –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10\n–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20\n–ì–µ–π–∑–µ—Ä</i>\n\n"
            "üîß <i>–ö–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
        
    if message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await safe_send_message(
            message.chat.id,
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['filter_type'] = message.text
        data['lifetime'] = get_lifetime_by_type(message.text)

    log_user_action(message.from_user.id, "selected_filter_type", message.text)
    await FilterStates.next()
    await safe_send_message(
        message.chat.id,
        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ' –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
@dp.message_handler(state=MultipleFiltersStates.waiting_filters_list)
async def process_multiple_filters_list(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filter_text = message.text
    filters_list = []
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç—ã–º
    if ',' in filter_text:
        filters_list = [f.strip() for f in filter_text.split(',') if f.strip()]
    else:
        # –ò–ª–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
        filters_list = [f.strip() for f in filter_text.split('\n') if f.strip()]
    
    if not filters_list:
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</b>\n\n"
            "üí° <i>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    async with state.proxy() as data:
        data['filters_list'] = filters_list
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ)
        data['lifetime'] = get_lifetime_by_type(filters_list[0])
    
    log_user_action(message.from_user.id, "entered_multiple_filters", f"count: {len(filters_list)}")
    await MultipleFiltersStates.next()
    await safe_send_message(
        message.chat.id,
        f"üì¶ <b>–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(filters_list)}\n\n"
        f"üîß <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n" + "\n".join([f"‚Ä¢ {f}" for f in filters_list]) + "\n\n"
        f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
        f"üí° <i>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ, –∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@dp.message_handler(state=[FilterStates.waiting_location, MultipleFiltersStates.waiting_location])
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
        
    if message.text == "üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ":
        await safe_send_message(
            message.chat.id,
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è, –û—Ñ–∏—Å, –ë–∞–ª–∫–æ–Ω, –ì–∞—Ä–∞–∂ –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    current_state = await state.get_state()
    
    if current_state == "FilterStates:waiting_location":
        # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        async with state.proxy() as data:
            data['location'] = message.text

        log_user_action(message.from_user.id, "selected_location", message.text)
        await FilterStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await safe_send_message(
            message.chat.id,
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã</b>\n\n"
            f"üîß <i>–§–∏–ª—å—Ç—Ä:</i> {data['filter_type']}\n"
            f"üìç <i>–ú–µ—Å—Ç–æ:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        async with state.proxy() as data:
            data['location'] = message.text

        log_user_action(message.from_user.id, "selected_location_multiple", message.text)
        await MultipleFiltersStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await safe_send_message(
            message.chat.id,
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"üìç <i>–ú–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã
@dp.message_handler(state=[FilterStates.waiting_change_date, MultipleFiltersStates.waiting_change_date])
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
        
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        change_date = safe_parse_date(message.text)
        
        current_state = await state.get_state()
        
        if current_state == "FilterStates:waiting_change_date":
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            async with state.proxy() as data:
                data['change_date'] = change_date
                
            log_user_action(message.from_user.id, "selected_change_date", str(change_date))
            await FilterStates.next()
            await safe_send_message(
                message.chat.id,
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
                f"üìÖ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫:</i> {data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            async with state.proxy() as data:
                data['change_date'] = change_date
                
            log_user_action(message.from_user.id, "selected_change_date_multiple", str(change_date))
            await MultipleFiltersStates.next()
            await safe_send_message(
                message.chat.id,
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
                f"üìÖ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫:</i> {data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        
    except ValueError as e:
        today_nice = format_date_nice(datetime.now().date())
        await safe_send_message(
            message.chat.id,
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            f"üìù <i>{str(e)}</i>\n"
            f"<i>–ü—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
@dp.message_handler(state=[FilterStates.waiting_lifetime, MultipleFiltersStates.waiting_lifetime])
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
        
    try:
        current_state = await state.get_state()
        
        if current_state == "FilterStates:waiting_lifetime":
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            async with state.proxy() as data:
                change_date = data['change_date']
                filter_type = data['filter_type']
                location = data['location']
                
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await safe_send_message(
                        message.chat.id,
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    lifetime = int(message.text)
                
                expiry_date = change_date + timedelta(days=lifetime)
                
                conn = sqlite3.connect('filters.db')
                cur = conn.cursor()
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                           (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                conn.commit()
                conn.close()

                days_until_expiry = (expiry_date - datetime.now().date()).days
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
                if days_until_expiry <= 0:
                    status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
                    status_emoji = "üö®"
                elif days_until_expiry <= 7:
                    status_icon = "üü° –°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–¨"
                    status_emoji = "‚ö†Ô∏è"
                elif days_until_expiry <= 30:
                    status_icon = "üîî –°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
                    status_emoji = "üîî"
                else:
                    status_icon = "‚úÖ –í –ù–û–†–ú–ï"
                    status_emoji = "‚úÖ"
                
                change_date_nice = format_date_nice(change_date)
                expiry_date_nice = format_date_nice(expiry_date)
                
                log_user_action(message.from_user.id, "added_filter", f"{filter_type} at {location}")
                await safe_send_message(
                    message.chat.id,
                    f"{status_emoji} <b>–§–ò–õ–¨–¢–† –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
                    f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                    f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {change_date_nice}\n"
                    f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
                    f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}",
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                await state.finish()
                
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            async with state.proxy() as data:
                change_date = data['change_date']
                location = data['location']
                filters_list = data['filters_list']
                
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await safe_send_message(
                        message.chat.id,
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    lifetime = int(message.text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('filters.db')
                cur = conn.cursor()
                
                added_count = 0
                results = []
                
                for filter_type in filters_list:
                    expiry_date = change_date + timedelta(days=lifetime)
                    
                    cur.execute('''INSERT INTO filters 
                                (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                                VALUES (?, ?, ?, ?, ?, ?)''',
                               (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                    added_count += 1
                    
                    days_until_expiry = (expiry_date - datetime.now().date()).days
                    results.append({
                        'type': filter_type,
                        'expiry_date': expiry_date,
                        'days_until_expiry': days_until_expiry
                    })
                
                conn.commit()
                conn.close()
                
                change_date_nice = format_date_nice(change_date)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                response = f"‚úÖ <b>–£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û {added_count} –§–ò–õ–¨–¢–†–û–í!</b>\n\n"
                response += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                response += f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {change_date_nice}\n"
                response += f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n\n"
                
                response += "<b>üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
                for i, result in enumerate(results, 1):
                    expiry_date_nice = format_date_nice(result['expiry_date'])
                    status_icon = "üî¥" if result['days_until_expiry'] <= 0 else "üü°" if result['days_until_expiry'] <= 30 else "‚úÖ"
                    response += f"{status_icon} {result['type']} (–¥–æ {expiry_date_nice})\n"
                
                log_user_action(message.from_user.id, "added_multiple_filters", f"count: {added_count}")
                await safe_send_message(
                    message.chat.id,
                    response,
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                await state.finish()
            
    except ValueError:
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üî¢ <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 90, 180, 365</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    log_user_action(message.from_user.id, "viewed_filters_list")
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await safe_send_message(
            message.chat.id,
            "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    response = "üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[4]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if days_until_expiry <= 0:
            status_icon = "üî¥"
            status_text = "–ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üü°"
            status_text = "–°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üü†"
            status_text = "–°–ö–û–†–û"
        else:
            status_icon = "‚úÖ"
            status_text = "–ù–û–†–ú–ê"
        
        last_change_nice = format_date_nice(datetime.strptime(str(f[3]), '%Y-%m-%d').date())
        expiry_date_nice = format_date_nice(expiry_date)
        
        response += (
            f"{status_icon} <b>–§–ò–õ–¨–¢–† #{f[0]}</b>\n"
            f"   üîß {f[1]}\n"
            f"   üìç {f[2]}\n"
            f"   üìÖ –ó–∞–º–µ–Ω–µ–Ω: {last_change_nice}\n"
            f"   ‚è±Ô∏è –°—Ä–æ–∫: {f[5]} –¥–Ω.\n"
            f"   üóìÔ∏è –ì–æ–¥–µ–Ω –¥–æ: {expiry_date_nice}\n"
            f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_until_expiry} –¥–Ω.\n"
            f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        )

    await safe_send_message(message.chat.id, response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    log_user_action(message.from_user.id, "checked_expiry_dates")
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await safe_send_message(
            message.chat.id,
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    warning_filters = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        expiry_date_nice = format_date_nice(expiry_date)
        
        if days_until_expiry <= 0:
            expired_filters.append(f"üî¥ {f[0]} ({f[1]}) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω. –Ω–∞–∑–∞–¥ (–¥–æ {expiry_date_nice})")
        elif days_until_expiry <= 7:
            expiring_soon.append(f"üü° {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω. (–¥–æ {expiry_date_nice})")
        elif days_until_expiry <= 30:
            warning_filters.append(f"üü† {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω. (–¥–æ {expiry_date_nice})")

    response = "‚è≥ <b>–ö–û–ù–¢–†–û–õ–¨ –°–†–û–ö–û–í</b>\n\n"
    
    if expired_filters:
        response += "üö® <b>–ü–†–û–°–†–û–ß–ï–ù–´:</b>\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "‚ö†Ô∏è <b>–°–†–û–ß–ù–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(expiring_soon) + "\n\n"
    
    if warning_filters:
        response += "üîî <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(warning_filters) + "\n\n"
    
    if not expired_filters and not expiring_soon and not warning_filters:
        response += "‚úÖ <b>–í–°–ï –§–ò–õ–¨–¢–†–´ –í –ù–û–†–ú–ï!</b>\n\n"
        response += "üí´ <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30+ –¥–Ω–µ–π</i>"

    await safe_send_message(message.chat.id, response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@dp.message_handler(commands=['edit'])
async def cmd_edit(message: types.Message):
    log_user_action(message.from_user.id, "started_edit")
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status = "üî¥"
        elif days_until_expiry <= 7:
            status = "üü°"
        elif days_until_expiry <= 30:
            status = "üü†"
        else:
            status = "‚úÖ"
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—É—é –∫–Ω–æ–ø–∫—É
        button_text = f"{status} {f[1]} - {f[2]}"
        keyboard.add(types.KeyboardButton(button_text))
    
    keyboard.add(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    await EditFilterStates.waiting_filter_selection.set()
    await safe_send_message(
        message.chat.id,
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "üí° <i>–°—Ç–∞—Ç—É—Å—ã:\nüî¥ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\nüü° - —Å—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å\nüü† - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç\n‚úÖ - –≤ –Ω–æ—Ä–º–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.message_handler(state=EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await safe_send_message(
            message.chat.id,
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞)
    filter_text = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–±–µ–ª
    
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –º–µ—Å—Ç–æ
        if " - " in filter_text:
            parts = filter_text.split(" - ")
            filter_type = parts[0].strip()
            location = parts[1].strip()
            
            cur.execute("SELECT id FROM filters WHERE user_id = ? AND filter_type = ? AND location = ?", 
                       (message.from_user.id, filter_type, location))
            result = cur.fetchone()
            
            if result:
                filter_id = result[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ
                cur.execute("SELECT * FROM filters WHERE id = ?", (filter_id,))
                filter_data = cur.fetchone()
                
                async with state.proxy() as data:
                    data['edit_filter_id'] = filter_id
                    data['edit_filter_data'] = filter_data
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ
                expiry_date = datetime.strptime(str(filter_data[5]), '%Y-%m-%d').date()
                days_until_expiry = (expiry_date - datetime.now().date()).days
                
                if days_until_expiry <= 0:
                    status_icon = "üî¥"
                    status_text = "–ü–†–û–°–†–û–ß–ï–ù"
                elif days_until_expiry <= 7:
                    status_icon = "üü°"
                    status_text = "–°–†–û–ß–ù–û"
                elif days_until_expiry <= 30:
                    status_icon = "üü†"
                    status_text = "–°–ö–û–†–û"
                else:
                    status_icon = "‚úÖ"
                    status_text = "–ù–û–†–ú–ê"
                
                last_change_nice = format_date_nice(datetime.strptime(str(filter_data[4]), '%Y-%m-%d').date())
                expiry_date_nice = format_date_nice(expiry_date)
                
                log_user_action(message.from_user.id, "selected_filter_for_edit", f"id: {filter_id}")
                await safe_send_message(
                    message.chat.id,
                    f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
                    f"{status_icon} <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                    f"üîß <b>–¢–∏–ø:</b> {filter_data[2]}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data[3]}\n"
                    f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {last_change_nice}\n"
                    f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data[6]} –¥–Ω–µ–π\n"
                    f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
                    f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
                    parse_mode='HTML',
                    reply_markup=get_edit_field_keyboard()
                )
                await EditFilterStates.next()
            else:
                await safe_send_message(
                    message.chat.id,
                    "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—â–µ —Ä–∞–∑</i>",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                await state.finish()
        else:
            await safe_send_message(
                message.chat.id,
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä</b>\n\n"
                "üí° <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫</i>",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            await state.finish()
        
        conn.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</i>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        await state.finish()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@dp.message_handler(state=EditFilterStates.waiting_field_selection)
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º":
        await EditFilterStates.waiting_filter_selection.set()
        await cmd_edit(message)
        return

    async with state.proxy() as data:
        filter_id = data['edit_filter_id']
        filter_data = data['edit_filter_data']
    
    field_mapping = {
        "üîß –¢–∏–ø": "filter_type",
        "üìç –ú–µ—Å—Ç–æ": "location", 
        "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": "last_change",
        "‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã": "lifetime_days"
    }
    
    if message.text in field_mapping:
        field = field_mapping[message.text]
        async with state.proxy() as data:
            data['edit_field'] = field
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == "filter_type":
            await safe_send_message(
                message.chat.id,
                f"üîß <b>–¢–µ–∫—É—â–∏–π —Ç–∏–ø:</b> {filter_data[2]}\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
                parse_mode='HTML',
                reply_markup=get_filter_type_keyboard()
            )
        elif field == "location":
            await safe_send_message(
                message.chat.id,
                f"üìç <b>–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ:</b> {filter_data[3]}\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>",
                parse_mode='HTML',
                reply_markup=get_location_keyboard()
            )
        elif field == "last_change":
            last_change_nice = format_date_nice(datetime.strptime(str(filter_data[4]), '%Y-%m-%d').date())
            today_nice = format_date_nice(datetime.now().date())
            await safe_send_message(
                message.chat.id,
                f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {last_change_nice}\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
                f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
        elif field == "lifetime_days":
            await safe_send_message(
                message.chat.id,
                f"‚è±Ô∏è <b>–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data[6]} –¥–Ω–µ–π\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö):</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        
        log_user_action(message.from_user.id, "selected_field_for_edit", field)
        await EditFilterStates.next()
    else:
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞</b>",
            parse_mode='HTML',
            reply_markup=get_edit_field_keyboard()
        )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=EditFilterStates.waiting_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return

    async with state.proxy() as data:
        filter_id = data['edit_filter_id']
        field = data['edit_field']
        old_filter_data = data['edit_filter_data']
    
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        if field == "filter_type":
            new_value = message.text
            cur.execute("UPDATE filters SET filter_type = ? WHERE id = ?", 
                       (new_value, filter_id))
            
            log_user_action(message.from_user.id, "edited_filter_type", f"id: {filter_id}, new: {new_value}")
            await safe_send_message(
                message.chat.id,
                f"‚úÖ <b>–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"üîß <b>–ë—ã–ª–æ:</b> {old_filter_data[2]}\n"
                f"üîß <b>–°—Ç–∞–ª–æ:</b> {new_value}",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            
        elif field == "location":
            new_value = message.text
            cur.execute("UPDATE filters SET location = ? WHERE id = ?", 
                       (new_value, filter_id))
            
            log_user_action(message.from_user.id, "edited_location", f"id: {filter_id}, new: {new_value}")
            await safe_send_message(
                message.chat.id,
                f"‚úÖ <b>–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"üìç <b>–ë—ã–ª–æ:</b> {old_filter_data[3]}\n"
                f"üìç <b>–°—Ç–∞–ª–æ:</b> {new_value}",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            
        elif field == "last_change":
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                new_date = safe_parse_date(message.text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
                cur.execute("SELECT lifetime_days FROM filters WHERE id = ?", (filter_id,))
                lifetime = cur.fetchone()[0]
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry = new_date + timedelta(days=lifetime)
                
                cur.execute("UPDATE filters SET last_change = ?, expiry_date = ? WHERE id = ?",
                           (new_date, new_expiry, filter_id))
                
                old_date_nice = format_date_nice(datetime.strptime(str(old_filter_data[4]), '%Y-%m-%d').date())
                new_date_nice = format_date_nice(new_date)
                new_expiry_nice = format_date_nice(new_expiry)
                
                log_user_action(message.from_user.id, "edited_change_date", f"id: {filter_id}, new: {new_date}")
                await safe_send_message(
                    message.chat.id,
                    f"‚úÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                    f"üìÖ <b>–ë—ã–ª–æ:</b> {old_date_nice}\n"
                    f"üìÖ <b>–°—Ç–∞–ª–æ:</b> {new_date_nice}\n"
                    f"üóìÔ∏è <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expiry_nice}",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                
            except ValueError as e:
                today_nice = format_date_nice(datetime.now().date())
                await safe_send_message(
                    message.chat.id,
                    f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                    f"üìù <i>{str(e)}</i>\n"
                    f"<i>–ü—Ä–∏–º–µ—Ä: {today_nice}</i>",
                    parse_mode='HTML',
                    reply_markup=get_cancel_keyboard()
                )
                return
                
        elif field == "lifetime_days":
            try:
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    new_lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await safe_send_message(
                        message.chat.id,
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    new_lifetime = int(message.text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã
                cur.execute("SELECT last_change FROM filters WHERE id = ?", (filter_id,))
                last_change = cur.fetchone()[0]
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry = last_change + timedelta(days=new_lifetime)
                
                cur.execute("UPDATE filters SET lifetime_days = ?, expiry_date = ? WHERE id = ?",
                           (new_lifetime, new_expiry, filter_id))
                
                new_expiry_nice = format_date_nice(new_expiry)
                
                log_user_action(message.from_user.id, "edited_lifetime", f"id: {filter_id}, new: {new_lifetime}")
                await safe_send_message(
                    message.chat.id,
                    f"‚úÖ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                    f"‚è±Ô∏è <b>–ë—ã–ª–æ:</b> {old_filter_data[6]} –¥–Ω–µ–π\n"
                    f"‚è±Ô∏è <b>–°—Ç–∞–ª–æ:</b> {new_lifetime} –¥–Ω–µ–π\n"
                    f"üóìÔ∏è <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expiry_nice}",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                
            except ValueError:
                await safe_send_message(
                    message.chat.id,
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                    "üî¢ <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>\n"
                    "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 90, 180, 365</i>",
                    parse_mode='HTML',
                    reply_markup=get_lifetime_keyboard()
                )
                return
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞
        cur.execute("SELECT * FROM filters WHERE id = ?", (filter_id,))
        updated_filter = cur.fetchone()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        expiry_date = datetime.strptime(str(updated_filter[5]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status_icon = "üî¥"
            status_text = "–ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üü°"
            status_text = "–°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üü†"
            status_text = "–°–ö–û–†–û"
        else:
            status_icon = "‚úÖ"
            status_text = "–ù–û–†–ú–ê"
        
        last_change_nice = format_date_nice(datetime.strptime(str(updated_filter[4]), '%Y-%m-%d').date())
        expiry_date_nice = format_date_nice(expiry_date)
        
        await safe_send_message(
            message.chat.id,
            f"üìã <b>–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n\n"
            f"{status_icon} <b>–§–∏–ª—å—Ç—Ä #{filter_id}</b>\n"
            f"üîß <b>–¢–∏–ø:</b> {updated_filter[2]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {updated_filter[3]}\n"
            f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {last_change_nice}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫:</b> {updated_filter[6]} –¥–Ω.\n"
            f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {days_until_expiry} –¥–Ω.\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
            parse_mode='HTML'
        )
        
        conn.close()
        await state.finish()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</i>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        await state.finish()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
@dp.message_handler(commands=['delete'])
async def cmd_delete(message: types.Message):
    log_user_action(message.from_user.id, "started_delete")
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await safe_send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status = "üî¥"
        elif days_until_expiry <= 30:
            status = "üü°"
        else:
            status = "‚úÖ"
        
        expiry_date_nice = format_date_nice(expiry_date)
        
        keyboard.add(types.InlineKeyboardButton(
            f"{status} {f[1]} | {f[2]} | –¥–æ {expiry_date_nice}",
            callback_data=f"select_delete_{f[0]}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management"))

    await safe_send_message(
        message.chat.id,
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–°—Ç–∞—Ç—É—Å—ã: üî¥ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, üü° - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, ‚úÖ - –≤ –Ω–æ—Ä–º–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('select_delete_'))
async def confirm_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[2]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    conn.close()
    
    if filter_info:
        expiry_date = datetime.strptime(str(filter_info[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        expiry_date_nice = format_date_nice(expiry_date)
        status_text = "üî¥ –ü–†–û–°–†–û–ß–ï–ù" if days_until_expiry <= 0 else "üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ" if days_until_expiry <= 30 else "‚úÖ –í –Ω–æ—Ä–º–µ"
        
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_info[0]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_info[1]}\n"
            f"üìÖ <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:</b> {expiry_date_nice}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä?</b>",
            parse_mode='HTML',
            reply_markup=get_confirmation_keyboard(filter_id)
        )
    else:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirm_delete_'))
async def process_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[2]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    
    if filter_info:
        cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?",
                    (filter_id, callback_query.from_user.id))
        conn.commit()
        conn.close()
        
        expiry_date_nice = format_date_nice(datetime.strptime(str(filter_info[2]), '%Y-%m-%d').date())
        
        log_user_action(callback_query.from_user.id, "deleted_filter", f"id: {filter_id}")
        await callback_query.message.edit_text(
            f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω:</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_info[0]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_info[1]}\n"
            f"üìÖ <b>–°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–ª:</b> {expiry_date_nice}",
            parse_mode='HTML'
        )
    else:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        conn.close()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "üí° <i>–§–∏–ª—å—Ç—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω</i>",
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_management")
async def back_to_management(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode='HTML'
    )

# –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message_handler(commands=['reset_db'], user_id=config.ADMIN_ID)
async def cmd_reset_db(message: types.Message):
    """–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    log_user_action(message.from_user.id, "requested_db_reset")
    await safe_send_message(
        message.chat.id,
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "üóëÔ∏è <i>–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï —Ñ–∏–ª—å—Ç—Ä—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>",
        parse_mode='HTML',
        reply_markup=get_reset_confirmation_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == "confirm_reset")
async def process_reset_db(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        backup_database()
        
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        cur.execute("DELETE FROM filters")
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cur.execute("SELECT COUNT(*) FROM filters")
        remaining = cur.fetchone()[0]
        conn.close()
        
        log_user_action(callback_query.from_user.id, "executed_db_reset")
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!</b>\n\n"
            f"üóëÔ∏è –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
            f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º.",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üí° <i>{str(e)}</i>",
            parse_mode='HTML'
        )

@dp.callback_query_handler(lambda c: c.data == "cancel_reset")
async def cancel_reset_db(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    await callback_query.message.edit_text(
        "‚úÖ <b>–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "üí° <i>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
        parse_mode='HTML'
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message):
    log_user_action(message.from_user.id, "viewed_stats")
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute('''SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN expiry_date < date('now') THEN 1 ELSE 0 END) as expired,
                    SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as urgent,
                    SUM(CASE WHEN expiry_date BETWEEN date('now', '+8 days') AND date('now', '+30 days') THEN 1 ELSE 0 END) as soon
                 FROM filters WHERE user_id = ?''', (message.from_user.id,))
    stats = cur.fetchone()
    
    cur.execute('''SELECT filter_type, COUNT(*) as count 
                   FROM filters WHERE user_id = ? GROUP BY filter_type''', 
                (message.from_user.id,))
    type_stats = cur.fetchall()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if message.from_user.id == config.ADMIN_ID:
        cur.execute('''SELECT COUNT(DISTINCT user_id) FROM filters''')
        total_users = cur.fetchone()[0]
        
        cur.execute('''SELECT COUNT(*) FROM filters''')
        total_filters = cur.fetchone()[0]
    
    conn.close()
    
    response = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í</b>\n\n"
    response += f"üì¶ <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {stats[0]}\n"
    response += f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {stats[1]}\n"
    response += f"üü° <b>–°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:</b> {stats[2]}\n"
    response += f"üü† <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:</b> {stats[3]}\n\n"
    
    if type_stats:
        response += "<b>üìà –ü–æ —Ç–∏–ø–∞–º:</b>\n"
        for filter_type, count in type_stats:
            response += f"   ‚Ä¢ {filter_type}: {count} —à—Ç.\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    if message.from_user.id == config.ADMIN_ID:
        response += f"\nüë• <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω):</b>\n"
        response += f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        response += f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {total_filters}\n"
    
    await safe_send_message(message.chat.id, response, parse_mode='HTML', reply_markup=get_management_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await cancel_handler(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    if is_rate_limited(message.from_user.id):
        return
        
    await safe_send_message(
        message.chat.id,
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º startup
    executor.start_polling(
        dp, 
        skip_updates=True,
        on_startup=on_startup
    )
