import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', '–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞'], ['–ü–æ–º–æ—â—å']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–º–µ–Ω—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤–æ–¥—ã.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä':
        await set_filter(update, context)
    elif text == '–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞':
        await check_status(update, context)
    elif text == '–ü–æ–º–æ—â—å':
        await show_help(update, context)

async def set_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        'install_date': datetime.now(),
        'replace_after': 6  # –º–µ—Å—è—Ü–µ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    await update.message.reply_text(
        f'–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime("%d.%m.%Y")}\n'
        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤.'
    )

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"')
        return

    data = user_data[user_id]
    replace_date = data['install_date'] + timedelta(days=30*data['replace_after'])
    days_left = (replace_date - datetime.now()).days

    if days_left > 0:
        await update.message.reply_text(
            f'–í–∞—à —Ñ–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {data["install_date"].strftime("%d.%m.%Y")}\n'
            f'–î–æ –∑–∞–º–µ–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π'
        )
    else:
        await update.message.reply_text(
            '‚ùå –í—Ä–µ–º—è –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä!\n'
            f'–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞: {data["install_date"].strftime("%d.%m.%Y")}'
        )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä - –Ω–∞—á–∞—Ç—å –æ—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞\n'
        '‚Ä¢ –°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è\n'
        '‚Ä¢ –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n'
        '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ - 6 –º–µ—Å—è—Ü–µ–≤'
    )
    await update.message.reply_text(help_text)

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
