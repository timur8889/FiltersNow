import logging
import sqlite3
import gspread
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from oauth2client.service_account import ServiceAccountCredentials
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME'
ADMIN_ID = 5024165375

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                filter_type TEXT,
                location TEXT,
                last_change DATE,
                expiry_date DATE,
                lifetime_days INTEGER)''')
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_google_sheets():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if not os.path.exists('credentials.json'):
            return None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ scope –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_list = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

class ExcelStates(StatesGroup):
    waiting_spreadsheet_url = State()
    waiting_sheet_name = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    return keyboard

def get_add_filter_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä"),
        types.KeyboardButton("üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    )
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    )
    keyboard.row(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    )
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_excel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"),
        types.KeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
    )
    keyboard.row(types.KeyboardButton("üîô –í —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"))
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_location_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("3Ô∏è‚É£ 90 –¥–Ω–µ–π"),
        types.KeyboardButton("6Ô∏è‚É£ 180 –¥–Ω–µ–π"),
        types.KeyboardButton("1Ô∏è‚É£ 365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_edit_field_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –¢–∏–ø"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"))
    return keyboard

def get_confirmation_keyboard(filter_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{filter_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì –≤ –î–î.–ú–ú.–ì–ì–ì–ì
def parse_date(date_str):
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        formats = ['%d.%m.%y', '%d.%m.%Y', '%d-%m-%y', '%d-%m-%Y']
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt).date()
            except ValueError:
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
def format_date_nice(date):
    return date.strftime('%d.%m.%y')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
async def export_to_google_sheets(user_id, spreadsheet_url=None, sheet_name="–§–∏–ª—å—Ç—Ä—ã"):
    try:
        client = init_google_sheets()
        if not client:
            return None, "‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª credentials.json"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        cur.execute("SELECT filter_type, location, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                    (user_id,))
        filters = cur.fetchall()
        conn.close()
        
        if not filters:
            return None, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
        
        if spreadsheet_url:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            try:
                spreadsheet = client.open_by_url(spreadsheet_url)
            except Exception as e:
                return None, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å—Å—ã–ª–∫–µ: {e}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = client.create(f"–§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ–º
            spreadsheet.share(None, perm_type='anyone', role='reader')
        
        # –†–∞–±–æ—Ç–∞–µ–º —Å –ª–∏—Å—Ç–æ–º
        try:
            worksheet = spreadsheet.worksheet(sheet_name)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=100, cols=10)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞", "–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã", "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã (–¥–Ω–∏)", "–ì–æ–¥–µ–Ω –¥–æ", "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π", "–°—Ç–∞—Ç—É—Å"]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = [headers]
        today = datetime.now().date()
        
        for filter_data in filters:
            expiry_date = datetime.strptime(str(filter_data[3]), '%Y-%m-%d').date()
            days_until_expiry = (expiry_date - today).days
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if days_until_expiry <= 0:
                status = "–ü–†–û–°–†–û–ß–ï–ù"
            elif days_until_expiry <= 7:
                status = "–°–†–û–ß–ù–û"
            elif days_until_expiry <= 30:
                status = "–°–ö–û–†–û"
            else:
                status = "–ù–û–†–ú–ê"
            
            last_change_nice = format_date_nice(datetime.strptime(str(filter_data[2]), '%Y-%m-%d').date())
            expiry_date_nice = format_date_nice(expiry_date)
            
            row = [
                filter_data[0],  # –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
                filter_data[1],  # –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                last_change_nice,  # –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã
                filter_data[4],  # –°—Ä–æ–∫ —Å–ª—É–∂–±—ã
                expiry_date_nice,  # –ì–æ–¥–µ–Ω –¥–æ
                days_until_expiry,  # –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π
                status  # –°—Ç–∞—Ç—É—Å
            ]
            data.append(row)
        
        # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        worksheet.clear()
        worksheet.update('A1', data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet.format('A1:G1', {
            'textFormat': {'bold': True},
            'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
        })
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        worksheet.columns_auto_resize(0, 6)
        
        return spreadsheet.url, f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n\nüìä –ó–∞–ø–∏—Å–µ–π: {len(filters)}\nüîó –°—Å—ã–ª–∫–∞: {spreadsheet.url}"
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets: {e}")
        return None, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async def import_from_google_sheets(user_id, spreadsheet_url, sheet_name="–§–∏–ª—å—Ç—Ä—ã"):
    try:
        client = init_google_sheets()
        if not client:
            return False, "‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª credentials.json"
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        try:
            spreadsheet = client.open_by_url(spreadsheet_url)
            worksheet = spreadsheet.worksheet(sheet_name)
        except Exception as e:
            return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = worksheet.get_all_values()
        
        if len(data) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            return False, "‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        imported_count = 0
        errors = []
        
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        for i, row in enumerate(data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            try:
                if len(row) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
                    continue
                
                filter_type = row[0].strip()
                location = row[1].strip()
                last_change_str = row[2].strip()
                lifetime_days = int(row[3]) if row[3].strip() else 180
                
                if not filter_type or not location:
                    continue
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                try:
                    last_change = parse_date(last_change_str)
                except ValueError:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
                    last_change = datetime.now().date()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                expiry_date = last_change + timedelta(days=lifetime_days)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                           (user_id, filter_type, location, last_change, expiry_date, lifetime_days))
                imported_count += 1
                
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: {e}")
        
        conn.commit()
        conn.close()
        
        result_message = f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}"
        if errors:
            result_message += f"\n\n‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):\n" + "\n".join(errors[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        
        return True, result_message
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Google Sheets: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –≤ Excel",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back(message: types.Message):
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    await message.answer(
        "üõ†Ô∏è <b>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
@dp.message_handler(lambda message: message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def cmd_excel_export(message: types.Message):
    await message.answer(
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets</b>\n\n"
        "üí° <i>–í—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é</i>\n\n"
        "üîÑ <b>–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É...</b>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    url, result_message = await export_to_google_sheets(message.from_user.id)
    
    if url:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∞–±–ª–∏—Ü—ã
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=url))
        keyboard.add(types.InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel", callback_data="import_excel"))
        
        await message.answer(
            result_message,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await message.answer(
            result_message,
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
@dp.callback_query_handler(lambda c: c.data == "import_excel")
async def process_import_excel(callback_query: types.CallbackQuery):
    await ExcelStates.waiting_spreadsheet_url.set()
    await callback_query.message.answer(
        "üì• <b>–ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets</b>\n\n"
        "üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets —Ç–∞–±–ª–∏—Ü—É:</b>\n\n"
        "üí° <i>–¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>\n"
        "<i>–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç—É</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@dp.message_handler(state=ExcelStates.waiting_spreadsheet_url)
async def process_spreadsheet_url(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_management_keyboard())
        return
    
    spreadsheet_url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets
    if 'docs.google.com/spreadsheets' not in spreadsheet_url:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n\n"
            "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets —Ç–∞–±–ª–∏—Ü—É</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['spreadsheet_url'] = spreadsheet_url
    
    await ExcelStates.next()
    await message.answer(
        "üìã <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞:</b>\n\n"
        "üí° <i>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: '–§–∏–ª—å—Ç—Ä—ã'</i>\n"
        "<i>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</i>",
        parse_mode='HTML',
        reply_markup=get_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
@dp.message_handler(state=ExcelStates.waiting_sheet_name)
async def process_sheet_name(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_management_keyboard())
        return
    
    async with state.proxy() as data:
        spreadsheet_url = data['spreadsheet_url']
        sheet_name = message.text.strip() if message.text.strip() else "–§–∏–ª—å—Ç—Ä—ã"
    
    await message.answer(
        "üîÑ <b>–ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...</b>",
        parse_mode='HTML'
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
    success, result_message = await import_from_google_sheets(
        message.from_user.id, 
        spreadsheet_url, 
        sheet_name
    )
    
    await message.answer(
        result_message,
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )
    await state.finish()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ</i>",
        parse_mode='HTML',
        reply_markup=get_add_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä", "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤"])
async def process_add_type(message: types.Message):
    if message.text == "üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä":
        await FilterStates.waiting_filter_type.set()
        await message.answer(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</i>",
            parse_mode='HTML',
            reply_markup=get_filter_type_keyboard()
        )
    elif message.text == "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await MultipleFiltersStates.waiting_filters_list.set()
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</b>\n\n"
            "üí° <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
            "<i>‚Ä¢ –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10, –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20, –ì–µ–π–∑–µ—Ä</i>\n"
            "<i>‚Ä¢ –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10\n–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20\n–ì–µ–π–∑–µ—Ä</i>\n\n"
            "üîß <i>–ö–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['filter_type'] = message.text
        data['lifetime'] = get_lifetime_by_type(message.text)

    await FilterStates.next()
    await message.answer(
        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ' –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
@dp.message_handler(state=MultipleFiltersStates.waiting_filters_list)
async def process_multiple_filters_list(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filter_text = message.text
    filters_list = []
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç—ã–º
    if ',' in filter_text:
        filters_list = [f.strip() for f in filter_text.split(',') if f.strip()]
    else:
        # –ò–ª–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
        filters_list = [f.strip() for f in filter_text.split('\n') if f.strip()]
    
    if not filters_list:
        await message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</b>\n\n"
            "üí° <i>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    async with state.proxy() as data:
        data['filters_list'] = filters_list
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ)
        data['lifetime'] = get_lifetime_by_type(filters_list[0])
    
    await MultipleFiltersStates.next()
    await message.answer(
        f"üì¶ <b>–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(filters_list)}\n\n"
        f"üîß <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n" + "\n".join([f"‚Ä¢ {f}" for f in filters_list]) + "\n\n"
        f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
        f"üí° <i>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</i>",
        parse_mode='HTML',
        reply_markup=get_location_keyboard()
    )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ, –∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@dp.message_handler(state=[FilterStates.waiting_location, MultipleFiltersStates.waiting_location])
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è, –û—Ñ–∏—Å, –ë–∞–ª–∫–æ–Ω, –ì–∞—Ä–∞–∂ –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    current_state = await state.get_state()
    
    if current_state == "FilterStates:waiting_location":
        # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        async with state.proxy() as data:
            data['location'] = message.text

        await FilterStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã</b>\n\n"
            f"üîß <i>–§–∏–ª—å—Ç—Ä:</i> {data['filter_type']}\n"
            f"üìç <i>–ú–µ—Å—Ç–æ:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        async with state.proxy() as data:
            data['location'] = message.text

        await MultipleFiltersStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"üìç <i>–ú–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã
@dp.message_handler(state=[FilterStates.waiting_change_date, MultipleFiltersStates.waiting_change_date])
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì
        change_date = parse_date(message.text)
        
        current_state = await state.get_state()
        
        if current_state == "FilterStates:waiting_change_date":
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            async with state.proxy() as data:
                data['change_date'] = change_date
                
            await FilterStates.next()
            await message.answer(
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
                f"üìÖ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫:</i> {data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            async with state.proxy() as data:
                data['change_date'] = change_date
                
            await MultipleFiltersStates.next()
            await message.answer(
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
                f"üìÖ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫:</i> {data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        
    except ValueError as e:
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì</i>\n"
            f"<i>–ü—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
@dp.message_handler(state=[FilterStates.waiting_lifetime, MultipleFiltersStates.waiting_lifetime])
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        current_state = await state.get_state()
        
        if current_state == "FilterStates:waiting_lifetime":
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            async with state.proxy() as data:
                change_date = data['change_date']
                filter_type = data['filter_type']
                location = data['location']
                
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await message.answer(
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    lifetime = int(message.text)
                
                expiry_date = change_date + timedelta(days=lifetime)
                
                conn = sqlite3.connect('filters.db')
                cur = conn.cursor()
                cur.execute('''INSERT INTO filters 
                            (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                            VALUES (?, ?, ?, ?, ?, ?)''',
                           (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                conn.commit()
                conn.close()

                days_until_expiry = (expiry_date - datetime.now().date()).days
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
                if days_until_expiry <= 0:
                    status_icon = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
                    status_emoji = "üö®"
                elif days_until_expiry <= 7:
                    status_icon = "üü° –°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–¨"
                    status_emoji = "‚ö†Ô∏è"
                elif days_until_expiry <= 30:
                    status_icon = "üîî –°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
                    status_emoji = "üîî"
                else:
                    status_icon = "‚úÖ –í –ù–û–†–ú–ï"
                    status_emoji = "‚úÖ"
                
                change_date_nice = format_date_nice(change_date)
                expiry_date_nice = format_date_nice(expiry_date)
                
                await message.answer(
                    f"{status_emoji} <b>–§–ò–õ–¨–¢–† –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
                    f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                    f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {change_date_nice}\n"
                    f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
                    f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icon}",
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                await state.finish()
                
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            async with state.proxy() as data:
                change_date = data['change_date']
                location = data['location']
                filters_list = data['filters_list']
                
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await message.answer(
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    lifetime = int(message.text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn = sqlite3.connect('filters.db')
                cur = conn.cursor()
                
                added_count = 0
                results = []
                
                for filter_type in filters_list:
                    expiry_date = change_date + timedelta(days=lifetime)
                    
                    cur.execute('''INSERT INTO filters 
                                (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                                VALUES (?, ?, ?, ?, ?, ?)''',
                               (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                    added_count += 1
                    
                    days_until_expiry = (expiry_date - datetime.now().date()).days
                    results.append({
                        'type': filter_type,
                        'expiry_date': expiry_date,
                        'days_until_expiry': days_until_expiry
                    })
                
                conn.commit()
                conn.close()
                
                change_date_nice = format_date_nice(change_date)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                response = f"‚úÖ <b>–£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û {added_count} –§–ò–õ–¨–¢–†–û–í!</b>\n\n"
                response += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                response += f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {change_date_nice}\n"
                response += f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n\n"
                
                response += "<b>üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
                for i, result in enumerate(results, 1):
                    expiry_date_nice = format_date_nice(result['expiry_date'])
                    status_icon = "üî¥" if result['days_until_expiry'] <= 0 else "üü°" if result['days_until_expiry'] <= 30 else "‚úÖ"
                    response += f"{status_icon} {result['type']} (–¥–æ {expiry_date_nice})\n"
                
                await message.answer(
                    response,
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                await state.finish()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "üî¢ <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 90, 180, 365</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (—Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    response = "üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[4]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if days_until_expiry <= 0:
            status_icon = "üî¥"
            status_text = "–ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üü°"
            status_text = "–°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üü†"
            status_text = "–°–ö–û–†–û"
        else:
            status_icon = "‚úÖ"
            status_text = "–ù–û–†–ú–ê"
        
        last_change_nice = format_date_nice(datetime.strptime(str(f[3]), '%Y-%m-%d').date())
        expiry_date_nice = format_date_nice(expiry_date)
        
        response += (
            f"{status_icon} <b>–§–ò–õ–¨–¢–† #{f[0]}</b>\n"
            f"   üîß {f[1]}\n"
            f"   üìç {f[2]}\n"
            f"   üìÖ –ó–∞–º–µ–Ω–µ–Ω: {last_change_nice}\n"
            f"   ‚è±Ô∏è –°—Ä–æ–∫: {f[5]} –¥–Ω.\n"
            f"   üóìÔ∏è –ì–æ–¥–µ–Ω –¥–æ: {expiry_date_nice}\n"
            f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_until_expiry} –¥–Ω.\n"
            f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        )

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    warning_filters = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        expiry_date_nice = format_date_nice(expiry_date)
        
        if days_until_expiry <= 0:
            expired_filters.append(f"üî¥ {f[0]} ({f[1]}) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω. –Ω–∞–∑–∞–¥ (–¥–æ {expiry_date_nice})")
        elif days_until_expiry <= 7:
            expiring_soon.append(f"üü° {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω. (–¥–æ {expiry_date_nice})")
        elif days_until_expiry <= 30:
            warning_filters.append(f"üü† {f[0]} ({f[1]}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω. (–¥–æ {expiry_date_nice})")

    response = "‚è≥ <b>–ö–û–ù–¢–†–û–õ–¨ –°–†–û–ö–û–í</b>\n\n"
    
    if expired_filters:
        response += "üö® <b>–ü–†–û–°–†–û–ß–ï–ù–´:</b>\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "‚ö†Ô∏è <b>–°–†–û–ß–ù–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(expiring_soon) + "\n\n"
    
    if warning_filters:
        response += "üîî <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(warning_filters) + "\n\n"
    
    if not expired_filters and not expiring_soon and not warning_filters:
        response += "‚úÖ <b>–í–°–ï –§–ò–õ–¨–¢–†–´ –í –ù–û–†–ú–ï!</b>\n\n"
        response += "üí´ <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30+ –¥–Ω–µ–π</i>"

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
@dp.message_handler(commands=['edit'])
async def cmd_edit(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status = "üî¥"
        elif days_until_expiry <= 7:
            status = "üü°"
        elif days_until_expiry <= 30:
            status = "üü†"
        else:
            status = "‚úÖ"
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—É—é –∫–Ω–æ–ø–∫—É
        button_text = f"{status} {f[1]} - {f[2]}"
        keyboard.add(types.KeyboardButton(button_text))
    
    keyboard.add(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    await EditFilterStates.waiting_filter_selection.set()
    await message.answer(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "üí° <i>–°—Ç–∞—Ç—É—Å—ã:\nüî¥ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\nüü° - —Å—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å\nüü† - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç\n‚úÖ - –≤ –Ω–æ—Ä–º–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.message_handler(state=EditFilterStates.waiting_filter_selection)
async def process_edit_filter_selection(message: types.Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.finish()
        await message.answer(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞)
    filter_text = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–±–µ–ª
    
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –º–µ—Å—Ç–æ
        if " - " in filter_text:
            parts = filter_text.split(" - ")
            filter_type = parts[0].strip()
            location = parts[1].strip()
            
            cur.execute("SELECT id FROM filters WHERE user_id = ? AND filter_type = ? AND location = ?", 
                       (message.from_user.id, filter_type, location))
            result = cur.fetchone()
            
            if result:
                filter_id = result[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ
                cur.execute("SELECT * FROM filters WHERE id = ?", (filter_id,))
                filter_data = cur.fetchone()
                
                async with state.proxy() as data:
                    data['edit_filter_id'] = filter_id
                    data['edit_filter_data'] = filter_data
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ
                expiry_date = datetime.strptime(str(filter_data[5]), '%Y-%m-%d').date()
                days_until_expiry = (expiry_date - datetime.now().date()).days
                
                if days_until_expiry <= 0:
                    status_icon = "üî¥"
                    status_text = "–ü–†–û–°–†–û–ß–ï–ù"
                elif days_until_expiry <= 7:
                    status_icon = "üü°"
                    status_text = "–°–†–û–ß–ù–û"
                elif days_until_expiry <= 30:
                    status_icon = "üü†"
                    status_text = "–°–ö–û–†–û"
                else:
                    status_icon = "‚úÖ"
                    status_text = "–ù–û–†–ú–ê"
                
                last_change_nice = format_date_nice(datetime.strptime(str(filter_data[4]), '%Y-%m-%d').date())
                expiry_date_nice = format_date_nice(expiry_date)
                
                await message.answer(
                    f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê</b>\n\n"
                    f"{status_icon} <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                    f"üîß <b>–¢–∏–ø:</b> {filter_data[2]}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data[3]}\n"
                    f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {last_change_nice}\n"
                    f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data[6]} –¥–Ω–µ–π\n"
                    f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
                    f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
                    parse_mode='HTML',
                    reply_markup=get_edit_field_keyboard()
                )
                await EditFilterStates.next()
            else:
                await message.answer(
                    "‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—â–µ —Ä–∞–∑</i>",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                await state.finish()
        else:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä</b>\n\n"
                "üí° <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫</i>",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            await state.finish()
        
        conn.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</i>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        await state.finish()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@dp.message_handler(state=EditFilterStates.waiting_field_selection)
async def process_edit_field_selection(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º":
        await EditFilterStates.waiting_filter_selection.set()
        await cmd_edit(message)
        return

    async with state.proxy() as data:
        filter_id = data['edit_filter_id']
        filter_data = data['edit_filter_data']
    
    field_mapping = {
        "üîß –¢–∏–ø": "filter_type",
        "üìç –ú–µ—Å—Ç–æ": "location", 
        "üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã": "last_change",
        "‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã": "lifetime_days"
    }
    
    if message.text in field_mapping:
        field = field_mapping[message.text]
        async with state.proxy() as data:
            data['edit_field'] = field
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == "filter_type":
            await message.answer(
                f"üîß <b>–¢–µ–∫—É—â–∏–π —Ç–∏–ø:</b> {filter_data[2]}\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>",
                parse_mode='HTML',
                reply_markup=get_filter_type_keyboard()
            )
        elif field == "location":
            await message.answer(
                f"üìç <b>–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ:</b> {filter_data[3]}\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>",
                parse_mode='HTML',
                reply_markup=get_location_keyboard()
            )
        elif field == "last_change":
            last_change_nice = format_date_nice(datetime.strptime(str(filter_data[4]), '%Y-%m-%d').date())
            today_nice = format_date_nice(datetime.now().date())
            await message.answer(
                f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {last_change_nice}\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
                f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
                parse_mode='HTML',
                reply_markup=get_cancel_keyboard()
            )
        elif field == "lifetime_days":
            await message.answer(
                f"‚è±Ô∏è <b>–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {filter_data[6]} –¥–Ω–µ–π\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã (–≤ –¥–Ω—è—Ö):</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        
        await EditFilterStates.next()
    else:
        await message.answer(
            "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞</b>",
            parse_mode='HTML',
            reply_markup=get_edit_field_keyboard()
        )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=EditFilterStates.waiting_new_value)
async def process_edit_new_value(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "üö´ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    async with state.proxy() as data:
        filter_id = data['edit_filter_id']
        field = data['edit_field']
        old_filter_data = data['edit_filter_data']
    
    try:
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        
        if field == "filter_type":
            new_value = message.text
            cur.execute("UPDATE filters SET filter_type = ? WHERE id = ?", 
                       (new_value, filter_id))
            
            await message.answer(
                f"‚úÖ <b>–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"üîß <b>–ë—ã–ª–æ:</b> {old_filter_data[2]}\n"
                f"üîß <b>–°—Ç–∞–ª–æ:</b> {new_value}",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            
        elif field == "location":
            new_value = message.text
            cur.execute("UPDATE filters SET location = ? WHERE id = ?", 
                       (new_value, filter_id))
            
            await message.answer(
                f"‚úÖ <b>–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"üìç <b>–ë—ã–ª–æ:</b> {old_filter_data[3]}\n"
                f"üìç <b>–°—Ç–∞–ª–æ:</b> {new_value}",
                parse_mode='HTML',
                reply_markup=get_management_keyboard()
            )
            
        elif field == "last_change":
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì
                new_date = parse_date(message.text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
                cur.execute("SELECT lifetime_days FROM filters WHERE id = ?", (filter_id,))
                lifetime = cur.fetchone()[0]
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry = new_date + timedelta(days=lifetime)
                
                cur.execute("UPDATE filters SET last_change = ?, expiry_date = ? WHERE id = ?",
                           (new_date, new_expiry, filter_id))
                
                old_date_nice = format_date_nice(datetime.strptime(str(old_filter_data[4]), '%Y-%m-%d').date())
                new_date_nice = format_date_nice(new_date)
                new_expiry_nice = format_date_nice(new_expiry)
                
                await message.answer(
                    f"‚úÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                    f"üìÖ <b>–ë—ã–ª–æ:</b> {old_date_nice}\n"
                    f"üìÖ <b>–°—Ç–∞–ª–æ:</b> {new_date_nice}\n"
                    f"üóìÔ∏è <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expiry_nice}",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                
            except ValueError:
                today_nice = format_date_nice(datetime.now().date())
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                    "üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì</i>\n"
                    f"<i>–ü—Ä–∏–º–µ—Ä: {today_nice}</i>",
                    parse_mode='HTML',
                    reply_markup=get_cancel_keyboard()
                )
                return
                
        elif field == "lifetime_days":
            try:
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    new_lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await message.answer(
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    new_lifetime = int(message.text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã
                cur.execute("SELECT last_change FROM filters WHERE id = ?", (filter_id,))
                last_change = cur.fetchone()[0]
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry = last_change + timedelta(days=new_lifetime)
                
                cur.execute("UPDATE filters SET lifetime_days = ?, expiry_date = ? WHERE id = ?",
                           (new_lifetime, new_expiry, filter_id))
                
                new_expiry_nice = format_date_nice(new_expiry)
                
                await message.answer(
                    f"‚úÖ <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                    f"‚è±Ô∏è <b>–ë—ã–ª–æ:</b> {old_filter_data[6]} –¥–Ω–µ–π\n"
                    f"‚è±Ô∏è <b>–°—Ç–∞–ª–æ:</b> {new_lifetime} –¥–Ω–µ–π\n"
                    f"üóìÔ∏è <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {new_expiry_nice}",
                    parse_mode='HTML',
                    reply_markup=get_management_keyboard()
                )
                
            except ValueError:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                    "üî¢ <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>\n"
                    "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 90, 180, 365</i>",
                    parse_mode='HTML',
                    reply_markup=get_lifetime_keyboard()
                )
                return
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞
        cur.execute("SELECT * FROM filters WHERE id = ?", (filter_id,))
        updated_filter = cur.fetchone()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        expiry_date = datetime.strptime(str(updated_filter[5]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status_icon = "üî¥"
            status_text = "–ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üü°"
            status_text = "–°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üü†"
            status_text = "–°–ö–û–†–û"
        else:
            status_icon = "‚úÖ"
            status_text = "–ù–û–†–ú–ê"
        
        last_change_nice = format_date_nice(datetime.strptime(str(updated_filter[4]), '%Y-%m-%d').date())
        expiry_date_nice = format_date_nice(expiry_date)
        
        await message.answer(
            f"üìã <b>–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n\n"
            f"{status_icon} <b>–§–∏–ª—å—Ç—Ä #{filter_id}</b>\n"
            f"üîß <b>–¢–∏–ø:</b> {updated_filter[2]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {updated_filter[3]}\n"
            f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {last_change_nice}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫:</b> {updated_filter[6]} –¥–Ω.\n"
            f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {days_until_expiry} –¥–Ω.\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
            parse_mode='HTML'
        )
        
        conn.close()
        await state.finish()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</i>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        await state.finish()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
@dp.message_handler(commands=['delete'])
async def cmd_delete(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, location, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer(
            "‚ùå <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            parse_mode='HTML',
            reply_markup=get_management_keyboard()
        )
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        if days_until_expiry <= 0:
            status = "üî¥"
        elif days_until_expiry <= 30:
            status = "üü°"
        else:
            status = "‚úÖ"
        
        expiry_date_nice = format_date_nice(expiry_date)
        
        keyboard.add(types.InlineKeyboardButton(
            f"{status} {f[1]} | {f[2]} | –¥–æ {expiry_date_nice}",
            callback_data=f"select_delete_{f[0]}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_management"))

    await message.answer(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–°—Ç–∞—Ç—É—Å—ã: üî¥ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, üü° - —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, ‚úÖ - –≤ –Ω–æ—Ä–º–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('select_delete_'))
async def confirm_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[2]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    conn.close()
    
    if filter_info:
        expiry_date = datetime.strptime(str(filter_info[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        expiry_date_nice = format_date_nice(expiry_date)
        status_text = "üî¥ –ü–†–û–°–†–û–ß–ï–ù" if days_until_expiry <= 0 else "üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ" if days_until_expiry <= 30 else "‚úÖ –í –Ω–æ—Ä–º–µ"
        
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_info[0]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_info[1]}\n"
            f"üìÖ <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:</b> {expiry_date_nice}\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä?</b>",
            parse_mode='HTML',
            reply_markup=get_confirmation_keyboard(filter_id)
        )
    else:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirm_delete_'))
async def process_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[2]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute("SELECT filter_type, location, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    
    if filter_info:
        cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?",
                    (filter_id, callback_query.from_user.id))
        conn.commit()
        conn.close()
        
        expiry_date_nice = format_date_nice(datetime.strptime(str(filter_info[2]), '%Y-%m-%d').date())
        
        await callback_query.message.edit_text(
            f"‚úÖ <b>–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω:</b>\n\n"
            f"üîß <b>–¢–∏–ø:</b> {filter_info[0]}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_info[1]}\n"
            f"üìÖ <b>–°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–ª:</b> {expiry_date_nice}",
            parse_mode='HTML'
        )
    else:
        await callback_query.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        conn.close()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "üí° <i>–§–∏–ª—å—Ç—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω</i>",
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_management")
async def back_to_management(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode='HTML'
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    cur.execute('''SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN expiry_date < date('now') THEN 1 ELSE 0 END) as expired,
                    SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as urgent,
                    SUM(CASE WHEN expiry_date BETWEEN date('now', '+8 days') AND date('now', '+30 days') THEN 1 ELSE 0 END) as soon
                 FROM filters WHERE user_id = ?''', (message.from_user.id,))
    stats = cur.fetchall()
    
    cur.execute('''SELECT filter_type, COUNT(*) as count 
                   FROM filters WHERE user_id = ? GROUP BY filter_type''', 
                (message.from_user.id,))
    type_stats = cur.fetchall()
    
    conn.close()
    
    response = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í</b>\n\n"
    response += f"üì¶ <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {stats[0]}\n"
    response += f"üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ:</b> {stats[1]}\n"
    response += f"üü° <b>–°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å:</b> {stats[2]}\n"
    response += f"üü† <b>–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:</b> {stats[3]}\n\n"
    
    if type_stats:
        response += "<b>üìà –ü–æ —Ç–∏–ø–∞–º:</b>\n"
        for filter_type, count in type_stats:
            response += f"   ‚Ä¢ {filter_type}: {count} —à—Ç.\n"
    
    await message.answer(response, parse_mode='HTML', reply_markup=get_management_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)
