import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', '–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤'], ['–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ–¥—ã!',
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä':
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n'
            '–ü—Ä–∏–º–µ—Ä: "–ö–∞—Ä—Ç—Ä–∏–¥–∂ Pre-Clear, 180"'
        )
        context.user_data['awaiting_input'] = 'add'
    
    elif text == '–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤':
        await show_filters(update, user_id)
    
    elif text == '–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
        context.user_data['awaiting_input'] = 'delete'

    elif context.user_data.get('awaiting_input') == 'add':
        try:
            name, days = map(str.strip, text.split(','))
            install_date = datetime.now()
            replace_date = install_date + timedelta(days=int(days))
            
            if user_id not in user_data:
                user_data[user_id] = {}
            
            user_data[user_id][name] = {
                'install_date': install_date,
                'replace_date': replace_date
            }
            
            await update.message.reply_text(
                f'–§–∏–ª—å—Ç—Ä "{name}" –¥–æ–±–∞–≤–ª–µ–Ω!\n'
                f'–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_date.strftime("%d.%m.%Y")}\n'
                f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–∞–º–µ–Ω–∞: {replace_date.strftime("%d.%m.%Y")}'
            )
            context.user_data['awaiting_input'] = None
        
        except:
            await update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π"')
    
    elif context.user_data.get('awaiting_input') == 'delete':
        if user_id in user_data and text in user_data[user_id]:
            del user_data[user_id][text]
            await update.message.reply_text(f'–§–∏–ª—å—Ç—Ä "{text}" —É–¥–∞–ª–µ–Ω!')
        else:
            await update.message.reply_text('–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        context.user_data['awaiting_input'] = None

async def show_filters(update: Update, user_id: int):
    if user_id not in user_data or not user_data[user_id]:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤!')
        return
    
    text = "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for name, data in user_data[user_id].items():
        status = "üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞!" if datetime.now() > data['replace_date'] else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        text += (
            f"{name}\n"
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {data['install_date'].strftime('%d.%m.%Y')}\n"
            f"–ó–∞–º–µ–Ω–∞ –¥–æ: {data['replace_date'].strftime('%d.%m.%Y')}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    await update.message.reply_text(text)

def main():
    application = Application.builder().token("8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    job_queue = application.job_queue
    job_queue.run_repeating(check_reminders, interval=86400, first=10)
    
    application.run_polling()

if __name__ == '__main__':
    main()
