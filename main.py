import logging
from datetime import datetime, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)
import sqlite3
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIO, POSITION, PHONE, PRIORITY, CATEGORY, PROBLEM = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_IDS = [5024165375]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
TIMEZONE = pytz.timezone('Europe/Moscow')
WORK_START = 9  # 9:00
WORK_END = 17   # 17:00

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('tickets.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tickets
                 (id INTEGER PRIMARY KEY,
                  user_id INTEGER,
                  fio TEXT,
                  position TEXT,
                  phone TEXT,
                  priority TEXT,
                  category TEXT,
                  problem TEXT,
                  created DATETIME,
                  deadline DATETIME,
                  status TEXT DEFAULT 'new',
                  admin_comment TEXT)''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_working_hours():
    now = datetime.now(TIMEZONE)
    if now.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return False
    current_hour = now.hour
    return WORK_START <= current_hour < WORK_END

# –†–∞—Å—á–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞
def calculate_deadline():
    now = datetime.now(TIMEZONE)
    hours_added = 0
    
    while hours_added < 48:
        now += timedelta(hours=1)
        if now.weekday() < 5 and WORK_START <= now.hour < WORK_END:
            hours_added += 1
            
    return now

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'],
        ['üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫']
    ], resize_keyboard=True)

def priority_keyboard():
    return ReplyKeyboardMarkup([
        ['üî¥ –í—ã—Å–æ–∫–∏–π', 'üü° –°—Ä–µ–¥–Ω–∏–π'],
        ['üü¢ –ù–∏–∑–∫–∏–π', 'üîµ –û–±—ã—á–Ω—ã–π']
    ], resize_keyboard=True)

def category_keyboard():
    return ReplyKeyboardMarkup([
        ['üíª –¢–µ—Ö–Ω–∏–∫–∞', 'üìä –ü—Ä–æ–≥—Ä–∞–º–º—ã'],
        ['üåê –°–µ—Ç—å', 'üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'],
        ['üìù –î–æ–∫—É–º–µ–Ω—Ç—ã', '‚ùì –î—Ä—É–≥–æ–µ']
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ start
def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.\n\n"
        "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: –ü–Ω-–ü—Ç 9:00-17:00\n"
        "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: 48 —á–∞—Å–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
def create_ticket_start(update: Update, context: CallbackContext):
    if not is_working_hours():
        update.message.reply_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ "
            "–≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞–±–æ—á–µ–º –¥–Ω–µ.",
            reply_markup=main_keyboard()
        )
    
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=ReplyKeyboardRemove()
    )
    return FIO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
def fio_received(update: Update, context: CallbackContext):
    context.user_data['fio'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    return POSITION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def position_received(update: Update, context: CallbackContext):
    context.user_data['position'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def phone_received(update: Update, context: CallbackContext):
    context.user_data['phone'] = update.message.text
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=priority_keyboard()
    )
    return PRIORITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
def priority_received(update: Update, context: CallbackContext):
    context.user_data['priority'] = update.message.text
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=category_keyboard()
    )
    return CATEGORY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def category_received(update: Update, context: CallbackContext):
    context.user_data['category'] = update.message.text
    update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROBLEM

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
def problem_received(update: Update, context: CallbackContext):
    context.user_data['problem'] = update.message.text
    user_data = context.user_data
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    conn = sqlite3.connect('tickets.db')
    c = conn.cursor()
    
    created = datetime.now(TIMEZONE)
    deadline = calculate_deadline()
    
    c.execute('''INSERT INTO tickets 
                 (user_id, fio, position, phone, priority, category, problem, created, deadline)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
              (update.message.from_user.id,
               user_data['fio'],
               user_data['position'],
               user_data['phone'],
               user_data['priority'],
               user_data['category'],
               user_data['problem'],
               created,
               deadline))
    
    ticket_id = c.lastrowid
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            context.bot.send_message(
                admin_id,
                f"üé´ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}\n"
                f"üë§ {user_data['fio']}\n"
                f"üíº {user_data['position']}\n"
                f"üìû {user_data['phone']}\n"
                f"üö© {user_data['priority']}\n"
                f"üìÅ {user_data['category']}\n"
                f"üìù {user_data['problem']}\n"
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=main_keyboard()
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.clear()
    
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫
def check_status(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    conn = sqlite3.connect('tickets.db')
    c = conn.cursor()
    
    c.execute('''SELECT id, created, deadline, status, admin_comment 
                 FROM tickets WHERE user_id = ? ORDER BY created DESC LIMIT 5''',
              (user_id,))
    
    tickets = c.fetchall()
    conn.close()
    
    if not tickets:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    response = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
    for ticket in tickets:
        status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ', 'done': '‚úÖ', 'overdue': '‚ùå'}
        status_icon = status_icons.get(ticket[3], 'üìÑ')
        
        response += (f"{status_icon} –ó–∞—è–≤–∫–∞ #{ticket[0]}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {ticket[1][:16]}\n"
                    f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {ticket[2][:16]}\n"
                    f"üìã –°—Ç–∞—Ç—É—Å: {ticket[3]}\n")
        
        if ticket[4]:
            response += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {ticket[4]}\n"
        response += "\n"
    
    update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", exc_info=context.error)
    
    try:
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard()
        )
    except:
        pass

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ updater –∏ dispatcher
    updater = Updater("8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME", use_context=True)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), create_ticket_start)],
        states={
            FIO: [MessageHandler(Filters.text & ~Filters.command, fio_received)],
            POSITION: [MessageHandler(Filters.text & ~Filters.command, position_received)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, phone_received)],
            PRIORITY: [MessageHandler(Filters.text & ~Filters.command, priority_received)],
            CATEGORY: [MessageHandler(Filters.text & ~Filters.command, category_received)],
            PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    dp.add_handler(conv_handler)
    dp.add_handler(MessageHandler(Filters.regex('^(üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫)$'), check_status))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
