import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sqlite3
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, TYPING_REPLY = range(2)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS filters
                 (id INTEGER PRIMARY KEY, 
                  filter_type TEXT, 
                  install_date TEXT,
                  replacement_period INTEGER,
                  chat_id INTEGER)''')
    conn.commit()
    conn.close()

def add_filter(filter_type, install_date, replacement_period, chat_id):
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute("INSERT INTO filters (filter_type, install_date, replacement_period, chat_id) VALUES (?, ?, ?, ?)",
              (filter_type, install_date, replacement_period, chat_id))
    conn.commit()
    conn.close()

def get_filters(chat_id):
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute("SELECT * FROM filters WHERE chat_id = ?", (chat_id,))
    filters = c.fetchall()
    conn.close()
    return filters

def get_due_filters():
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute("SELECT * FROM filters WHERE date(install_date) <= date('now', '-' || replacement_period || ' days')")
    due_filters = c.fetchall()
    conn.close()
    return due_filters

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', '–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã'], ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–º–µ–Ω—É']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    return CHOOSING

async def add_filter_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ | –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ì–ì–ì–ì-–ú–ú-–î–î) | –ü–µ—Ä–∏–æ–¥ –∑–∞–º–µ–Ω—ã (–≤ –¥–Ω—è—Ö)\n\n'
        '–ü—Ä–∏–º–µ—Ä: –í–æ–¥—è–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä | 2024-01-15 | 180'
    )
    return TYPING_REPLY

async def received_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        parts = [part.strip() for part in text.split('|')]
        
        if len(parts) != 3:
            await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return TYPING_REPLY
        
        filter_type, install_date, period = parts
        replacement_period = int(period)
        chat_id = update.message.chat_id
        
        add_filter(filter_type, install_date, replacement_period, chat_id)
        
        next_replacement = datetime.strptime(install_date, '%Y-%m-%d') + timedelta(days=replacement_period)
        
        await update.message.reply_text(
            f'‚úÖ –§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n'
            f'–¢–∏–ø: {filter_type}\n'
            f'–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_date}\n'
            f'–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {next_replacement.strftime("%Y-%m-%d")}'
        )
        
    except ValueError as e:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –ø–µ—Ä–∏–æ–¥–∞.')
    
    return CHOOSING

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    filters = get_filters(chat_id)
    
    if not filters:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.')
        return CHOOSING
    
    message = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for filter_item in filters:
        filter_id, filter_type, install_date, replacement_period, _ = filter_item
        install_dt = datetime.strptime(install_date, '%Y-%m-%d')
        next_replacement = install_dt + timedelta(days=replacement_period)
        days_left = (next_replacement - datetime.now()).days
        
        status = "‚úÖ" if days_left > 7 else "‚ö†Ô∏è" if days_left > 0 else "üî¥"
        
        message += f"{status} {filter_type}\n"
        message += f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {install_date}\n"
        message += f"   –ó–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑: {days_left} –¥–Ω–µ–π\n\n"
    
    await update.message.reply_text(message)
    return CHOOSING

async def check_replacement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    due_filters = get_due_filters()
    
    if not due_filters:
        await update.message.reply_text('‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ!')
        return CHOOSING
    
    message = "üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
    for filter_item in due_filters:
        _, filter_type, install_date, replacement_period, _ = filter_item
        message += f"üî¥ {filter_type}\n"
        message += f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {install_date}\n"
        message += f"   –ü–µ—Ä–∏–æ–¥ –∑–∞–º–µ–Ω—ã: {replacement_period} –¥–Ω–µ–π\n\n"
    
    await update.message.reply_text(message)
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
    return ConversationHandler.END

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token("8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä$'), add_filter_command),
                MessageHandler(filters.Regex('^–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã$'), show_filters),
                MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–º–µ–Ω—É$'), check_replacement),
            ],
            TYPING_REPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_info)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
