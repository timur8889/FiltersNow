import os
import logging
from datetime import datetime, time, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import gspread
from google.oauth2.service_account import Credentials
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME"
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
CREDENTIALS_FILE = 'credentials.json'
SPREADSHEET_ID = '1CBhuVDTgH-RaMzJ-sDW-vsS4mvjvh2fGFKztlVb2SFQ'

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞—è–≤–æ–∫
PRIORITIES = {
    'low': 'üîµ –ù–∏–∑–∫–∏–π',
    'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π', 
    'high': 'üü† –í—ã—Å–æ–∫–∏–π',
    'critical': 'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º
CATEGORIES = {
    'network': 'üì∂ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é',
    'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è —Å–≤—è–∑—å',
    'cctv': 'üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ',
    'access': 'üîê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞',
    'other': '‚ùì –î—Ä—É–≥–æ–µ'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
class States:
    WAITING_FIO = 1
    WAITING_POSITION = 2
    WAITING_PHONE = 3
    WAITING_CATEGORY = 4
    WAITING_PRIORITY = 5
    WAITING_DESCRIPTION = 6
    WAITING_COMMENT = 7

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_google_sheets():
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        return spreadsheet.sheet1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_work_time():
    now = datetime.now(TIMEZONE)
    if now.weekday() >= 5:  # 5=—Å—É–±–±–æ—Ç–∞, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return False
    
    work_start = time(9, 0)
    work_end = time(17, 0)
    current_time = now.time()
    
    return work_start <= current_time <= work_end

# –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
def calculate_due_date(create_time):
    create_dt = create_time.astimezone(TIMEZONE)
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ 22:00, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å 9:00
    if create_dt.time() > time(22, 0):
        create_dt = create_dt.replace(hour=9, minute=0, second=0) + timedelta(days=1)
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
    while create_dt.weekday() >= 5:
        create_dt += timedelta(days=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º 48 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
    work_hours_added = 0
    due_date = create_dt
    
    while work_hours_added < 48:
        due_date += timedelta(hours=1)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ
        if due_date.weekday() < 5 and time(9, 0) <= due_date.time() <= time(17, 0):
            work_hours_added += 1
            
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç—Ä—É
        if due_date.time() > time(17, 0):
            due_date = due_date.replace(hour=9, minute=0, second=0) + timedelta(days=1)
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
        while due_date.weekday() >= 5:
            due_date += timedelta(days=1)
    
    return due_date

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
def generate_ticket_number():
    return f"T{datetime.now().strftime('%Y%m%d%H%M%S')}"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
    ]
    
    if str(update.effective_user.id) in get_admins():
        keyboard.append([KeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫ –ø–æ —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def get_admins():
    return ["5024165375"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
async def create_ticket_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_work_time():
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:\n"
            "–ü–Ω-–ü—Ç —Å 9:00 –¥–æ 17:00\n\n"
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è."
        )
    
    context.user_data['ticket'] = {
        'user_id': update.effective_user.id,
        'username': update.effective_user.username or '',
        'created_at': datetime.now(TIMEZONE)
    }
    
    await update.message.reply_text(
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:"
    )
    return States.WAITING_FIO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
async def process_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['ticket']['fio'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    return States.WAITING_POSITION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
async def process_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['ticket']['position'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return States.WAITING_PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['ticket']['phone'] = update.message.text
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton(cat_name, callback_data=cat_id)]
        for cat_id, cat_name in CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=reply_markup
    )
    return States.WAITING_CATEGORY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def process_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['ticket']['category'] = query.data
    context.user_data['ticket']['category_name'] = CATEGORIES[query.data]
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(pri_name, callback_data=pri_id)]
        for pri_id, pri_name in PRIORITIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[query.data]}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:",
        reply_markup=reply_markup
    )
    return States.WAITING_PRIORITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
async def process_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['ticket']['priority'] = query.data
    context.user_data['ticket']['priority_name'] = PRIORITIES[query.data]
    
    await query.edit_message_text(
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {PRIORITIES[query.data]}\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
    )
    return States.WAITING_DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ticket_data = context.user_data['ticket']
    ticket_data['description'] = update.message.text
    ticket_data['ticket_number'] = generate_ticket_number()
    ticket_data['due_date'] = calculate_due_date(ticket_data['created_at'])
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    if save_ticket_to_sheets(ticket_data):
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await notify_admins(context, ticket_data)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_data['ticket_number']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
            f"üë§ –§–ò–û: {ticket_data['fio']}\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {ticket_data['position']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {ticket_data['phone']}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket_data['category_name']}\n"
            f"üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ticket_data['priority_name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket_data['description']}\n"
            f"‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {ticket_data['due_date'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏."
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    context.user_data.clear()
    return -1

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Google Sheets
def save_ticket_to_sheets(ticket_data):
    try:
        worksheet = init_google_sheets()
        if not worksheet:
            return False
            
        row = [
            ticket_data['ticket_number'],
            ticket_data['created_at'].strftime('%d.%m.%Y %H:%M'),
            ticket_data['fio'],
            ticket_data['position'],
            ticket_data['phone'],
            ticket_data['category_name'],
            ticket_data['priority_name'],
            ticket_data['description'],
            "–ù–æ–≤–∞—è",
            "",  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            "",  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ticket_data['due_date'].strftime('%d.%m.%Y %H:%M'),
            str(ticket_data['user_id']),
            ticket_data.get('username', '')
        ]
        
        worksheet.append_row(row)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        return False

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def notify_admins(context: ContextTypes.DEFAULT_TYPE, ticket_data):
    admins = get_admins()
    message = (
        f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{ticket_data['ticket_number']}\n\n"
        f"üë§ –§–ò–û: {ticket_data['fio']}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {ticket_data['position']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {ticket_data['phone']}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket_data['category_name']}\n"
        f"üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ticket_data['priority_name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket_data['description']}\n"
        f"‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {ticket_data['due_date'].strftime('%d.%m.%Y %H:%M')}"
    )
    
    for admin_id in admins:
        try:
            await context.bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in get_admins():
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [KeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        return await create_ticket_start(update, context)
    elif text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        return await admin_panel(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    ticket_conv_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    application.add_handler(ticket_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(process_category, pattern="^(" + "|".join(CATEGORIES.keys()) + ")$"))
    application.add_handler(CallbackQueryHandler(process_priority, pattern="^(" + "|".join(PRIORITIES.keys()) + ")$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
