import logging
import logging.config
import sqlite3
import os
import asyncio
import shutil
import traceback
import re
import sys
import aiosqlite
import json
from datetime import datetime, timedelta
from contextlib import contextmanager
from typing import Dict, List, Optional, Callable, Any, Awaitable, Union
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram import BaseMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
    exit(1)

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –†–ê–°–®–ò–†–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
def setup_logging():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.config.dictConfig({
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'detailed': {
                'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s - [%(filename)s:%(lineno)d]'
            },
            'simple': {
                'format': '%(levelname)s - %(message)s'
            }
        },
        'handlers': {
            'file': {
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': 'bot.log',
                'maxBytes': 10*1024*1024,  # 10MB
                'backupCount': 5,
                'formatter': 'detailed',
                'encoding': 'utf-8'
            },
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            }
        },
        'loggers': {
            '': {
                'handlers': ['file', 'console'],
                'level': 'INFO'
            }
        }
    })

setup_logging()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_main_keyboard(user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
    builder.button(text="‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_add_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ûï –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üìù –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)

def get_status_icon_and_text(days_until_expiry: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
    elif days_until_expiry <= 7:
        return "üü°", "–°–ö–û–†–û –ò–°–¢–ï–ß–ï–¢"
    elif days_until_expiry <= 30:
        return "üü†", "–í–ù–ò–ú–ê–ù–ò–ï"
    else:
        return "üü¢", "–ù–û–†–ú–ê"

def format_date_nice(date):
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    return date.strftime("%d.%m.%Y")

def create_expiry_infographic(filters):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Å—Ä–æ–∫–∞–º"""
    today = datetime.now().date()
    expired = 0
    expiring_soon = 0
    normal = 0
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until = (expiry_date - today).days
        
        if days_until <= 0:
            expired += 1
        elif days_until <= 7:
            expiring_soon += 1
        else:
            normal += 1
    
    return (
        f"üìä <b>–°–¢–ê–¢–£–° –§–ò–õ–¨–¢–†–û–í:</b>\n"
        f"üü¢ –ù–æ—Ä–º–∞: {normal}\n"
        f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {expiring_soon}\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {expired}"
    )

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == ADMIN_ID

def backup_database() -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if os.path.exists('filters.db'):
            backup_name = f'filters_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            shutil.copy2('filters.db', backup_name)
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    return False

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –í–í–û–î–ê ==========
def validate_filter_type(filter_type: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    if not filter_type or len(filter_type.strip()) == 0:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(filter_type) > 100:
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[<>{}[\]]', filter_type):
        return False, "–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, "OK"

def validate_location(location: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    if not location or len(location.strip()) == 0:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(location) > 50:
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if re.search(r'[<>{}[\]]', location):
        return False, "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
    
    return True, "OK"

def validate_lifetime(lifetime: str) -> tuple[bool, str, int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(lifetime)
        if days <= 0:
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", 0
        if days > 3650:  # 10 –ª–µ—Ç
            return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ª–µ—Ç", 0
        return True, "OK", days
    except ValueError:
        return False, "–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–¥–Ω–∏)", 0

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ë–ï–ó–û–ü–ê–°–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ë–î ==========
async def safe_db_operation(operation, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    try:
        return await operation(*args, **kwargs)
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation.__name__}: {e}")
        health_monitor.record_error()
        raise
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation.__name__}: {e}")
        health_monitor.record_error()
        raise

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø ==========
class BotHealthMonitor:
    def __init__(self):
        self.start_time = datetime.now()
        self.message_count = 0
        self.error_count = 0
        self.user_actions = {}
    
    def record_message(self, user_id: int):
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.message_count += 1
        if user_id not in self.user_actions:
            self.user_actions[user_id] = 0
        self.user_actions[user_id] += 1
    
    def record_error(self):
        """–ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏"""
        self.error_count += 1
    
    async def get_health_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time
        active_users = len([uid for uid, count in self.user_actions.items() if count > 0])
        
        health_score = (self.message_count - self.error_count) / max(1, self.message_count) * 100
        
        return {
            'uptime': str(uptime),
            'message_count': self.message_count,
            'error_count': self.error_count,
            'active_users': active_users,
            'health_score': health_score
        }

health_monitor = BotHealthMonitor()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: RATE LIMITING ==========
class RateLimiter:
    def __init__(self, max_requests: int = 5, window: int = 30):
        self.max_requests = max_requests
        self.window = window
        self.user_requests = {}
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        now = datetime.now()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if (now - req_time).seconds < self.window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.max_requests:
            return False
        
        self.user_requests[user_id].append(now)
        return True

rate_limiter = RateLimiter(max_requests=10, window=30)

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: MIDDLEWARE –î–õ–Ø RATE LIMITING ==========
class RateLimitMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
            
            if not rate_limiter.is_allowed(user_id):
                if hasattr(event, 'answer'):
                    await event.answer("‚è≥ <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥.", parse_mode='HTML')
                return
            
            health_monitor.record_message(user_id)
        
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode='HTML')
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.update.outer_middleware(RateLimitMiddleware())

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
@contextmanager
async def get_db_connection():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = await aiosqlite.connect('filters.db')
    conn.row_factory = aiosqlite.Row
    try:
        yield conn
        await conn.commit()
    except Exception as e:
        await conn.rollback()
        raise e
    finally:
        await conn.close()

async def get_user_filters(user_id: int) -> List[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await safe_db_operation(_get_user_filters, user_id)

async def _get_user_filters(user_id: int) -> List[Dict]:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        await cur.execute("SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", (user_id,))
        rows = await cur.fetchall()
        return [dict(row) for row in rows]

async def get_filter_by_id(filter_id: int, user_id: int) -> Optional[Dict]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID"""
    return await safe_db_operation(_get_filter_by_id, filter_id, user_id)

async def _get_filter_by_id(filter_id: int, user_id: int) -> Optional[Dict]:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ ID"""
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        await cur.execute("SELECT * FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
        result = await cur.fetchone()
        return dict(result) if result else None

async def check_filters_limit(user_id: int) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    filters = await get_user_filters(user_id)
    return len(filters) >= MAX_FILTERS_PER_USER

async def get_all_users_stats() -> Dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return await safe_db_operation(_get_all_users_stats)

async def _get_all_users_stats() -> Dict:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        await cur.execute('''SELECT COUNT(DISTINCT user_id) as total_users, 
                              COUNT(*) as total_filters,
                              SUM(CASE WHEN expiry_date <= date('now') THEN 1 ELSE 0 END) as expired_filters,
                              SUM(CASE WHEN expiry_date BETWEEN date('now') AND date('now', '+7 days') THEN 1 ELSE 0 END) as expiring_soon
                       FROM filters''')
        result = await cur.fetchone()
        return dict(result) if result else {'total_users': 0, 'total_filters': 0, 'expired_filters': 0, 'expiring_soon': 0}

async def add_filter_to_db(user_id: int, filter_type: str, location: str, last_change: str, expiry_date: str, lifetime_days: int) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    return await safe_db_operation(_add_filter_to_db, user_id, filter_type, location, last_change, expiry_date, lifetime_days)

async def _add_filter_to_db(user_id: int, filter_type: str, location: str, last_change: str, expiry_date: str, lifetime_days: int) -> bool:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        await cur.execute('''INSERT INTO filters 
                          (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                          VALUES (?, ?, ?, ?, ?, ?)''',
                          (user_id, filter_type, location, last_change, expiry_date, lifetime_days))
        return True

async def update_filter_in_db(filter_id: int, user_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ë–î"""
    return await safe_db_operation(_update_filter_in_db, filter_id, user_id, **kwargs)

async def _update_filter_in_db(filter_id: int, user_id: int, **kwargs) -> bool:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    if not kwargs:
        return False
    
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        set_clause = ", ".join([f"{key} = ?" for key in kwargs.keys()])
        values = list(kwargs.values())
        values.extend([filter_id, user_id])
        
        await cur.execute(f"UPDATE filters SET {set_clause} WHERE id = ? AND user_id = ?", values)
        return cur.rowcount > 0

async def delete_filter_from_db(filter_id: int, user_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –ë–î"""
    return await safe_db_operation(_delete_filter_from_db, filter_id, user_id)

async def _delete_filter_from_db(filter_id: int, user_id: int) -> bool:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        await cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?", (filter_id, user_id))
        return cur.rowcount > 0

async def clear_all_filters() -> int:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return await safe_db_operation(_clear_all_filters)

async def _clear_all_filters() -> int:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã"""
    async with get_db_connection() as conn:
        cur = await conn.cursor()
        await cur.execute("DELETE FROM filters")
        return cur.rowcount

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–¢ ==========
def try_auto_correct_date(date_str: str) -> Optional[datetime.date]:
    """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã"""
    clean = re.sub(r'\D', '', date_str)
    
    if len(clean) == 6:  # –î–î–ú–ú–ì–ì
        try:
            day, month, year = int(clean[:2]), int(clean[2:4]), int(clean[4:])
            if year < 100:
                year += 2000 if year < 50 else 1900
            return datetime(year, month, day).date()
        except ValueError:
            pass
    elif len(clean) == 8:  # –î–î–ú–ú–ì–ì–ì–ì
        try:
            day, month, year = int(clean[:2]), int(clean[2:4]), int(clean[4:])
            return datetime(year, month, day).date()
        except ValueError:
            pass
    
    return None

def validate_date(date_str: str) -> datetime.date:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
    date_str = date_str.strip()
    
    # –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    date_str = re.sub(r'[/\-]', '.', date_str)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
    date_str = re.sub(r'[^\d\.]', '', date_str)
    
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d%m%y', '%d%m%Y', '%d.%m', '%d%m']
    
    for fmt in formats:
        try:
            if fmt in ['%d.%m', '%d%m']:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                date_obj = datetime.strptime(date_str, fmt).date()
                date_obj = date_obj.replace(year=datetime.now().year)
            elif fmt in ['%d%m%y', '%d%m%Y']:
                if len(date_str) in [6, 8]:
                    date_obj = datetime.strptime(date_str, fmt).date()
                else:
                    continue
            else:
                date_obj = datetime.strptime(date_str, fmt).date()
            
            today = datetime.now().date()
            max_past = today - timedelta(days=5*365)
            max_future = today + timedelta(days=1)
            
            if date_obj > max_future:
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            if date_obj < max_past:
                raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–±–æ–ª–µ–µ 5 –ª–µ—Ç)")
                
            return date_obj
        except ValueError:
            continue
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    corrected = try_auto_correct_date(date_str)
    if corrected:
        return corrected
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú")

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ü–†–û–í–ï–†–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –§–ò–õ–¨–¢–†–û–í ==========
async def check_expired_filters():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            await cur.execute("""
                SELECT DISTINCT user_id, filter_type, location, expiry_date 
                FROM filters 
                WHERE expiry_date <= date('now') 
                OR expiry_date BETWEEN date('now') AND date('now', '+7 days')
            """)
            expired_filters = await cur.fetchall()
            
            for filter_data in expired_filters:
                user_id = filter_data['user_id']
                expiry_date = datetime.strptime(str(filter_data['expiry_date']), '%Y-%m-%d').date()
                days_until = (expiry_date - datetime.now().date()).days
                
                if days_until <= 0:
                    message = (
                        f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï! –§–ò–õ–¨–¢–† –ü–†–û–°–†–û–ß–ï–ù</b>\n\n"
                        f"üíß <b>–¢–∏–ø:</b> {filter_data['filter_type']}\n"
                        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data['location']}\n"
                        f"üìÖ <b>–°—Ä–æ–∫ –∏—Å—Ç–µ–∫:</b> {format_date_nice(expiry_date)}\n\n"
                        f"‚ö†Ô∏è <i>–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä!</i>"
                    )
                else:
                    message = (
                        f"‚ö†Ô∏è <b>–§–ò–õ–¨–¢–† –°–ö–û–†–û –ò–°–¢–ï–ß–ï–¢</b>\n\n"
                        f"üíß <b>–¢–∏–ø:</b> {filter_data['filter_type']}\n"
                        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {filter_data['location']}\n"
                        f"üìÖ <b>–°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {format_date_nice(expiry_date)}\n"
                        f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until}\n\n"
                        f"üí° <i>–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–º–µ–Ω—É –∑–∞—Ä–∞–Ω–µ–µ</i>"
                    )
                
                try:
                    await bot.send_message(user_id, message, parse_mode='HTML')
                    await asyncio.sleep(0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤ Telegram
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        health_monitor.record_error()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ï–ñ–ï–î–ù–ï–í–ù–´–ï –û–¢–ß–ï–¢–´ ==========
async def send_daily_report():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞"""
    try:
        health = await health_monitor.get_health_status()
        stats = await get_all_users_stats()
        
        report = (
            "üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ë–û–¢–ê</b>\n\n"
            f"‚è∞ <b>–ê–ø—Ç–∞–π–º:</b> {health['uptime']}\n"
            f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {health['message_count']}\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {health['error_count']}\n"
            f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {health['active_users']}\n"
            f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:</b> {health['health_score']:.1f}%\n\n"
            f"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:</b>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üì¶ –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
            f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired_filters']}\n"
            f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {stats['expiring_soon']}"
        )
        
        await bot.send_message(ADMIN_ID, report, parse_mode='HTML')
        logging.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

# ========== –û–°–¢–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ==========
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365
}

MAX_FILTERS_PER_USER = 50

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_list = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

class DeleteFilterStates(StatesGroup):
    waiting_filter_selection = State()

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ==========
async def init_db():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_db_connection() as conn:
            cur = await conn.cursor()
            
            await cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='filters'")
            table_exists = await cur.fetchone()
            
            if not table_exists:
                await cur.execute('''CREATE TABLE filters (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            filter_type TEXT,
                            location TEXT,
                            last_change DATE,
                            expiry_date DATE,
                            lifetime_days INTEGER,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
                
                await cur.execute('''CREATE INDEX idx_user_id ON filters(user_id)''')
                await cur.execute('''CREATE INDEX idx_expiry_date ON filters(expiry_date)''')
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        if os.path.exists('filters.db'):
            backup_name = f'filters_backup_critical_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
            shutil.copy2('filters.db', backup_name)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        raise

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å rate limiting"""
    health_monitor.record_message(message.from_user.id)
    
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        reply_markup=get_main_keyboard(message.from_user.id),
        parse_mode='HTML'
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä - –ü–æ–º–æ—â—å</b> ü§ñ\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)\n\n"
        "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "2. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ä–æ–∫–∞–º–∏ –∑–∞–º–µ–Ω—ã\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä - –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä\n"
        "‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "‚ùå <b>–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
    )
    await message.answer(help_text, parse_mode='HTML')

@dp.message(F.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def cmd_my_filters(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Å rate limiting"""
    health_monitor.record_message(message.from_user.id)
    
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
        return
    
    today = datetime.now().date()
    response = "üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        last_change = datetime.strptime(str(f['last_change']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        icon, status = get_status_icon_and_text(days_until_expiry)
        
        response += (
            f"{icon} <b>#{f['id']} {f['filter_type']}</b>\n"
            f"üìç {f['location']}\n"
            f"üìÖ –ó–∞–º–µ–Ω–µ–Ω: {format_date_nice(last_change)}\n"
            f"üóìÔ∏è –ì–æ–¥–µ–Ω –¥–æ: {format_date_nice(expiry_date)}\n"
            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_until_expiry}</b>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        )
    
    infographic = create_expiry_infographic(filters)
    await message.answer(response, parse_mode='HTML')
    await message.answer(infographic, parse_mode='HTML', reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–∞"""
    if await check_filters_limit(message.from_user.id):
        await message.answer(
            f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤!</b>\n\n"
            f"üí° <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {MAX_FILTERS_PER_USER}</i>\n"
            f"üìä <i>–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö</i>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
        return
        
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ</i>",
        reply_markup=get_add_filter_keyboard(),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚ûï –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
async def cmd_add_single(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
    await state.set_state(FilterStates.waiting_filter_type)
    await message.answer(
        "üíß <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10, –ì–µ–π–∑–µ—Ä, –ê–∫–≤–∞—Ñ–æ—Ä –∏ —Ç.–¥.</i>",
        reply_markup=get_cancel_keyboard(),
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_type = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    is_valid, error_msg = validate_filter_type(filter_type)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(filter_type=filter_type)
    await state.set_state(FilterStates.waiting_location)
    
    await message.answer(
        "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π –∏ —Ç.–¥.</i>",
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    location = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    is_valid, error_msg = validate_location(location)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(location=location)
    await state.set_state(FilterStates.waiting_change_date)
    
    await message.answer(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã:</b>\n\n"
        "üí° <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)</i>\n"
        "üìù <i>–ü—Ä–∏–º–µ—Ä: 15.09.23 –∏–ª–∏ 15.09</i>",
        parse_mode='HTML'
    )

@dp.message(FilterStates.waiting_change_date)
async def process_change_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã"""
    try:
        change_date = validate_date(message.text)
        await state.update_data(change_date=change_date)
        
        user_data = await state.get_data()
        filter_type = user_data.get('filter_type', '').lower()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
        lifetime = DEFAULT_LIFETIMES.get(filter_type, 180)
        
        await state.update_data(lifetime=lifetime)
        await state.set_state(FilterStates.waiting_lifetime)
        
        await message.answer(
            f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞:</b> {lifetime} –¥–Ω–µ–π\n\n"
            f"üí° <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è '{user_data['filter_type']}'</i>\n"
            f"üìù <i>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –¥–Ω—è—Ö), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'</i>",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                resize_keyboard=True
            ),
            parse_mode='HTML'
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:")

@dp.message(FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    user_data = await state.get_data()
    
    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        is_valid, error_msg, lifetime = validate_lifetime(message.text)
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
            return
    else:
        lifetime = user_data['lifetime']
    
    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
    change_date = user_data['change_date']
    expiry_date = change_date + timedelta(days=lifetime)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    success = await add_filter_to_db(
        user_id=message.from_user.id,
        filter_type=user_data['filter_type'],
        location=user_data['location'],
        last_change=change_date.strftime('%Y-%m-%d'),
        expiry_date=expiry_date.strftime('%Y-%m-%d'),
        lifetime_days=lifetime
    )
    
    if success:
        await message.answer(
            f"‚úÖ <b>–§–ò–õ–¨–¢–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
            f"üíß <b>–¢–∏–ø:</b> {user_data['filter_type']}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {user_data['location']}\n"
            f"üìÖ <b>–ó–∞–º–µ–Ω–∞:</b> {format_date_nice(change_date)}\n"
            f"üóìÔ∏è <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {format_date_nice(expiry_date)}\n"
            f"‚è±Ô∏è <b>–°—Ä–æ–∫:</b> {lifetime} –¥–Ω–µ–π\n\n"
            f"üí´ <i>–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ä–æ–∫–æ–º –∑–∞–º–µ–Ω—ã —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞</i>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
    
    await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = await get_all_users_stats()
    user_filters = await get_user_filters(message.from_user.id)
    
    response = (
        "üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        f"üì¶ <b>–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(user_filters)}\n"
        f"üìà <b>–õ–∏–º–∏—Ç:</b> {len(user_filters)}/{MAX_FILTERS_PER_USER}\n\n"
    )
    
    if is_admin(message.from_user.id):
        global_stats = (
            f"üëë <b>–ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üì¶ –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
            f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired_filters']}\n"
            f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {stats['expiring_soon']}"
        )
        response += global_stats
    
    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard(message.from_user.id))

@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def cmd_manage(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ò–õ–¨–¢–†–ê–ú–ò</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_management_keyboard()
    )

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_edit_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    builder = ReplyKeyboardBuilder()
    for f in filters:
        builder.button(text=f"#{f['id']} {f['filter_type']} - {f['location']}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(1)
    
    await state.set_state(EditFilterStates.waiting_filter_selection)
    await message.answer(
        "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode='HTML'
    )

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
async def cmd_delete_filter(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filters = await get_user_filters(message.from_user.id)
    
    if not filters:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    builder = ReplyKeyboardBuilder()
    for f in filters:
        builder.button(text=f"#{f['id']} {f['filter_type']} - {f['location']}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(1)
    
    await state.set_state(DeleteFilterStates.waiting_filter_selection)
    await message.answer(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(message.from_user.id),
        parse_mode='HTML'
    )

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "‚ÑπÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã</b>",
            reply_markup=get_main_keyboard(message.from_user.id),
            parse_mode='HTML'
        )
        return
    
    await state.clear()
    await message.answer(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
        reply_markup=get_main_keyboard(message.from_user.id),
        parse_mode='HTML'
    )

# ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ==========
@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    health = await health_monitor.get_health_status()
    stats = await get_all_users_stats()
    
    status_report = (
        "ü§ñ <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
        f"‚è∞ <b>–ê–ø—Ç–∞–π–º:</b> {health['uptime']}\n"
        f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {health['message_count']}\n"
        f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {health['error_count']}\n"
        f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {health['active_users']}\n"
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:</b> {health['health_score']:.1f}%\n\n"
        f"<b>–ë–ê–ó–ê –î–ê–ù–ù–´–•:</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üì¶ –§–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
        f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired_filters']}\n"
        f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç: {stats['expiring_soon']}"
    )
    
    await message.answer(status_report, parse_mode='HTML')

@dp.message(Command("reset_limits"))
async def cmd_reset_limits(message: types.Message):
    """–°–±—Ä–æ—Å rate limits (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    rate_limiter.user_requests.clear()
    await message.answer("‚úÖ <b>Rate limits —Å–±—Ä–æ—à–µ–Ω—ã!</b>", parse_mode='HTML')

@dp.message(Command("backup"))
async def cmd_backup(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
    
    if backup_database():
        await message.answer("‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>", parse_mode='HTML')
    else:
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!</b>", parse_mode='HTML')

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ==========
async def schedule_daily_check():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    while True:
        try:
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
            if now.hour == 10 and now.minute == 0:
                await check_expired_filters()
                
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 3:00
            if now.hour == 3 and now.minute == 0:
                if backup_database():
                    logging.info("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                await asyncio.sleep(60)
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
            if now.hour == 9 and now.minute == 0:
                await send_daily_report()
                await asyncio.sleep(60)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            health_monitor.record_error()
            await asyncio.sleep(300)
        
        await asyncio.sleep(60)

# ========== –£–õ–£–ß–®–ï–ù–ò–ï: –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    health_monitor.record_error()
    
    logging.error(f"–û—à–∏–±–∫–∞ –≤ update {update}: {exception}\n{traceback.format_exc()}")
    
    try:
        error_info = (
            f"‚ùå <b>–û–®–ò–ë–ö–ê –í –ë–û–¢–ï</b>\n\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üö® <b>–¢–∏–ø:</b> {type(exception).__name__}\n"
            f"üí¨ <b>–û—à–∏–±–∫–∞:</b> {str(exception)[:1000]}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {health_monitor.message_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {health_monitor.error_count}\n"
            f"‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {(health_monitor.message_count - health_monitor.error_count) / max(1, health_monitor.message_count) * 100:.1f}%"
        )
        
        await bot.send_message(ADMIN_ID, error_info, parse_mode='HTML')
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    return True

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ==========
async def on_startup():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if backup_database():
        logging.info("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(schedule_daily_check())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        health = await health_monitor.get_health_status()
        await bot.send_message(
            ADMIN_ID, 
            f"ü§ñ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {health_monitor.start_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üí´ <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–°–¢–ê–ù–û–í–ö–ò ==========
async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
    
    try:
        await bot.send_message(
            ADMIN_ID,
            "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {datetime.now() - health_monitor.start_time}",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    if not API_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        exit(1)
    
    await on_startup()
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await on_shutdown()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.send_message(ADMIN_ID, f"‚ùå –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}", parse_mode='HTML')
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
