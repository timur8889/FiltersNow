import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS filters
                 (id INTEGER PRIMARY KEY, 
                  name TEXT, 
                  replacement_date DATE,
                  user_id INTEGER)''')
    conn.commit()
    conn.close()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
CHOOSING, TYPING_NAME, TYPING_DATE = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', '–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤'],
                 ['–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', '–°—Ç–∞—Ç—É—Å –∑–∞–º–µ–Ω—ã']]
reply_markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.re_html(
        "ü§ñ <b>–ë–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return CHOOSING

async def add_filter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return TYPING_NAME

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['filter_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return TYPING_DATE

async def save_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        replacement_date = datetime.strptime(update.message.text, '%Y-%m-%d').date()
        
        conn = sqlite3.connect('filters.db')
        c = conn.cursor()
        c.execute("INSERT INTO filters (name, replacement_date, user_id) VALUES (?, ?, ?)",
                 (context.user_data['filter_name'], replacement_date, update.effective_user.id))
        conn.commit()
        conn.close()

        await update.message.reply_text(
            f"‚úÖ –§–∏–ª—å—Ç—Ä '{context.user_data['filter_name']}' –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=reply_markup
        )
        return CHOOSING
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
        return TYPING_DATE

async def list_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute("SELECT name, replacement_date FROM filters WHERE user_id = ?", 
             (update.effective_user.id,))
    filters = c.fetchall()
    conn.close()

    if not filters:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=reply_markup)
        return CHOOSING

    response = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for name, date in filters:
        response += f"‚Ä¢ {name} (–∑–∞–º–µ–Ω–∞: {date})\n"
    
    await update.message.reply_text(response, reply_markup=reply_markup)
    return CHOOSING

async def check_replacements(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('filters.db')
    c = conn.cursor()
    c.execute("SELECT user_id, name, replacement_date FROM filters")
    all_filters = c.fetchall()
    conn.close()

    for user_id, name, replacement_date in all_filters:
        if isinstance(replacement_date, str):
            replacement_date = datetime.strptime(replacement_date, '%Y-%m-%d').date()
        
        days_to_replace = (replacement_date + timedelta(days=90)) - datetime.now().date()
        
        if days_to_replace.days == 2:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è!"
            )
        elif days_to_replace.days <= 0:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ö†Ô∏è –°—Ä–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä '{name}'!"
            )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=reply_markup)
    return CHOOSING

def main():
    init_db()
    
    application = Application.builder().token ("8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM").build()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ–Ω –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    job_queue = application.job_queue
    job_queue.run_repeating(check_replacements, interval=86400)  # 24 —á–∞—Å–∞

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä$'), add_filter_start),
                MessageHandler(filters.Regex('^–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤$'), list_filters),
            ],
            TYPING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)
            ],
            TYPING_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_date)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
