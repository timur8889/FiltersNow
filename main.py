import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError
import sqlite3
import os
from typing import Optional, List, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('channel_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME")
    CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID", "@timur_onion")
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    MAIN_LOOP_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç
    CLEANUP_INTERVAL_DAYS = 30
    
    # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è API
    REQUEST_TIMEOUT = 10
    
    # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    ADMIN_ID = os.getenv("ADMIN_ID")

class AutoContentBot:
    def __init__(self):
        self.BOT_TOKEN = Config.BOT_TOKEN
        self.CHANNEL_ID = Config.CHANNEL_ID
        self.ADMIN_ID = Config.ADMIN_ID
        self.bot = Bot(token=self.BOT_TOKEN)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –°–ø–∏—Å–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.quotes = [
            "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. ‚Äî –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ, –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "–°–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —É–ø–æ—Ä—Å—Ç–≤–∞. ‚Äî –ê–º–µ–ª–∏—è –≠—Ä—Ö–∞—Ä—Ç",
            "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ. ‚Äî –ê–±—Ä–∞—Ö–∞–º –õ–∏–Ω–∫–æ–ª—å–Ω"
        ]
        
        self.facts = [
            "üêù –ú–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø—á–µ–ª—ã –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞!",
            "üåå –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å —Å—Ç–æ–ª–∫–Ω–µ—Ç—Å—è —Å –≥–∞–ª–∞–∫—Ç–∏–∫–æ–π –ê–Ω–¥—Ä–æ–º–µ–¥—ã —á–µ—Ä–µ–∑ 4 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –ª–µ—Ç",
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∫–æ–ª–æ 23 –≤–∞—Ç—Ç —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è –ª–∞–º–ø–æ—á–∫–∏",
            "üìö –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ä–æ–º–∞–Ω –≤ –º–∏—Ä–µ ‚Äî ¬´–í –ø–æ–∏—Å–∫–∞—Ö —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª –ú–∞—Ä—Å–µ–ª—è –ü—Ä—É—Å—Ç–∞ (1.2 –º–ª–Ω —Å–ª–æ–≤)",
            "üêú –ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç!"
        ]
        
        self.tips = [
            "üí° –°–æ–≤–µ—Ç: –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å —Å–∞–º–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
            "üí° –°–æ–≤–µ—Ç: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã —É–ª—É—á—à–∞—é—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "üí° –°–æ–≤–µ—Ç: –ß–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "üí° –°–æ–≤–µ—Ç: –ü–µ–π—Ç–µ –≤–æ–¥—É –ø–µ—Ä–µ–¥ –µ–¥–æ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞",
            "üí° –°–æ–≤–µ—Ç: 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –≤ –¥–µ–Ω—å —É–ª—É—á—à–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–æ–Ω"
        ]

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.conn = sqlite3.connect('content.db', check_same_thread=False)
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS published_content (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content_type TEXT NOT NULL,
                content TEXT NOT NULL,
                publish_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                posts_today INTEGER DEFAULT 0,
                last_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        cursor.execute("SELECT COUNT(*) FROM bot_stats")
        if cursor.fetchone()[0] == 0:
            cursor.execute("INSERT INTO bot_stats (posts_today) VALUES (0)")
            
        self.conn.commit()

    def is_content_used(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"""
        cursor = self.conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM published_content WHERE content = ?", 
            (content,)
        )
        return cursor.fetchone()[0] > 0

    def mark_content_used(self, content_type, content):
        """–ü–æ–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
        cursor = self.conn.cursor()
        cursor.execute(
            "INSERT INTO published_content (content_type, content) VALUES (?, ?)",
            (content_type, content)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("UPDATE bot_stats SET posts_today = posts_today + 1")
        self.conn.commit()

    async def get_random_quote(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.quotable.io/random', timeout=Config.REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        data = await response.json()
                        quote = f"\"{data['content']}\" ‚Äî {data['author']}"
                        if not self.is_content_used(quote):
                            return quote
                    else:
                        logger.warning(f"API —Ü–∏—Ç–∞—Ç –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å {response.status}")
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ API: {e}")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        unused_quotes = [q for q in self.quotes if not self.is_content_used(q)]
        return random.choice(unused_quotes) if unused_quotes else random.choice(self.quotes)

    async def get_random_fact(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://uselessfacts.jsph.pl/random.json?language=en', timeout=Config.REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        data = await response.json()
                        fact = f"ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{data['text']}"
                        if not self.is_content_used(fact):
                            return fact
                    else:
                        logger.warning(f"API —Ñ–∞–∫—Ç–æ–≤ –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å {response.status}")
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –∏–∑ API: {e}")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        unused_facts = [f for f in self.facts if not self.is_content_used(f)]
        return random.choice(unused_facts) if unused_facts else random.choice(self.facts)

    async def get_news_summary(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å News API)"""
        news_items = [
            "üì∞ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±–∑–æ—Ä: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –º–µ–Ω—è—Ç—å –Ω–∞—à –º–∏—Ä!",
            "üåç –ê–∫—Ç—É–∞–ª—å–Ω–æ: –£—á–µ–Ω—ã–µ –¥–µ–ª–∞—é—Ç –Ω–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üöÄ –ù–æ–≤–æ—Å—Ç–∏ –Ω–∞—É–∫–∏: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "üíº –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏: –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –¥–≤–∏–≥–∞—é—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É –≤–ø–µ—Ä–µ–¥"
        ]
        unused_news = [n for n in news_items if not self.is_content_used(n)]
        return random.choice(unused_news) if unused_news else random.choice(news_items)

    async def send_message_to_channel(self, message, message_type="text"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            if message_type == "text":
                await self.bot.send_message(
                    chat_id=self.CHANNEL_ID,
                    text=message,
                    parse_mode='HTML'
                )
            
            self.mark_content_used("auto_post", message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {message[:50]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.notify_admin(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ")
            
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await self.notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            return False

    async def notify_admin(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if self.ADMIN_ID:
            try:
                await self.bot.send_message(
                    chat_id=self.ADMIN_ID,
                    text=message
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    async def get_daily_content_schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –¥–µ–Ω—å"""
        now = datetime.now()
        weekday = now.weekday()
        
        # –†–∞–∑–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        schedules = {
            0: [  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                (8, "quote", "üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é!"),
                (12, "fact", "ü§î –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?"),
                (18, "tip", "üí° –°–æ–≤–µ—Ç –¥–Ω—è")
            ],
            1: [  # –í—Ç–æ—Ä–Ω–∏–∫
                (9, "fact", "üîç –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç!"),
                (14, "news", "üì∞ –ö—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
                (19, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –≤–µ—á–µ—Ä–∞")
            ],
            2: [  # –°—Ä–µ–¥–∞
                (10, "tip", "üí° –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç"),
                (15, "fact", "üéØ –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç"),
                (20, "quote", "üí≠ –ú—É–¥—Ä–∞—è –º—ã—Å–ª—å")
            ],
            3: [  # –ß–µ—Ç–≤–µ—Ä–≥
                (8, "news", "üåç –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –º–∏—Ä–µ?"),
                (13, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è"),
                (17, "tip", "üí° –°–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            ],
            4: [  # –ü—è—Ç–Ω–∏—Ü–∞
                (11, "fact", "ü§Ø –§–∞–∫—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ"),
                (16, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"),
                (21, "tip", "üí° –°–æ–≤–µ—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞")
            ],
            5: [  # –°—É–±–±–æ—Ç–∞
                (10, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è"),
                (15, "fact", "üé™ –ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç")
            ],
            6: [  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                (11, "tip", "üí° –°–æ–≤–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é"),
                (17, "quote", "üí≠ –í–æ—Å–∫—Ä–µ—Å–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å")
            ]
        }
        
        return schedules.get(weekday, [])

    async def generate_content(self, content_type, theme=""):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–∏–ø—É"""
        if content_type == "quote":
            content = await self.get_random_quote()
            return f"üí≠ {theme}\n\n{content}"
        
        elif content_type == "fact":
            content = await self.get_random_fact()
            return f"üéØ {theme}\n\n{content}"
        
        elif content_type == "tip":
            unused_tips = [t for t in self.tips if not self.is_content_used(t)]
            content = random.choice(unused_tips) if unused_tips else random.choice(self.tips)
            return f"üí° {theme}\n\n{content}"
        
        elif content_type == "news":
            content = await self.get_news_summary()
            return f"üì∞ {theme}\n\n{content}\n\n#–Ω–æ–≤–æ—Å—Ç–∏ #–æ–±–∑–æ—Ä"
        
        return None

    async def post_scheduled_content(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            schedule = await self.get_daily_content_schedule()
            now = datetime.now()
            
            for hour, content_type, theme in schedule:
                # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                scheduled_time = now.replace(hour=hour, minute=0, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                if scheduled_time < now:
                    scheduled_time += timedelta(days=1)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                delay = (scheduled_time - now).total_seconds()
                
                if delay > 0:
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è {content_type} –≤ {hour}:00")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                    asyncio.create_task(
                        self.delayed_post(delay, content_type, theme)
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            await self.notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

    async def delayed_post(self, delay, content_type, theme):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
        try:
            await asyncio.sleep(delay)
            content = await self.generate_content(content_type, theme)
            if content:
                await self.send_message_to_channel(content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await self.notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    async def cleanup_old_content(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cursor = self.conn.cursor()
            cursor.execute(
                "DELETE FROM published_content WHERE publish_date < datetime('now', '-30 days')"
            )
            deleted_count = cursor.rowcount
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏
            cursor.execute("""
                UPDATE bot_stats 
                SET posts_today = 0, last_reset = CURRENT_TIMESTAMP 
                WHERE last_reset < datetime('now', '-1 day')
            """)
            
            self.conn.commit()
            logger.info(f"–°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

    async def get_bot_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        cursor = self.conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM published_content")
        total_posts = cursor.fetchone()[0]
        
        # –ü–æ—Å—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute("SELECT posts_today FROM bot_stats")
        posts_today = cursor.fetchone()[0]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        cursor.execute("""
            SELECT content_type, COUNT(*) 
            FROM published_content 
            GROUP BY content_type
        """)
        content_stats = cursor.fetchall()
        
        return {
            "total_posts": total_posts,
            "posts_today": posts_today,
            "content_stats": dict(content_stats)
        }

    async def send_stats_to_admin(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            stats = await self.get_bot_stats()
            
            stats_message = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                f"üìà –í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: <b>{stats['total_posts']}</b>\n"
                f"üìÖ –ü—É–±–ª–∏–∫–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: <b>{stats['posts_today']}</b>\n\n"
                "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:</b>\n"
            )
            
            for content_type, count in stats["content_stats"].items():
                stats_message += f"‚Ä¢ {content_type}: {count}\n"
            
            await self.bot.send_message(
                chat_id=self.ADMIN_ID,
                text=stats_message,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ await
            me = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor = self.conn.cursor()
            cursor.execute("SELECT 1")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            try:
                chat = await self.bot.get_chat(self.CHANNEL_ID)
                logger.info(f"–ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {chat.title}")
            except TelegramError as e:
                logger.error(f"–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                return False
            
            logger.info("‚úÖ –ë–æ—Ç –∑–¥–æ—Ä–æ–≤ - –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞: {e}")
            if self.ADMIN_ID:
                try:
                    await self.bot.send_message(
                        chat_id=self.ADMIN_ID,
                        text=f"üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞: {e}"
                    )
                except:
                    pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            return False

    async def manual_post(self, content_type: str = None):
        """–†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
        try:
            if not content_type:
                content_type = random.choice(["quote", "fact", "tip", "news"])
            
            content_types_map = {
                "quote": ("üí≠ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", "quote"),
                "fact": ("ü§î –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", "fact"),
                "tip": ("üí° –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç", "tip"),
                "news": ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "news")
            }
            
            theme, actual_type = content_types_map.get(content_type, ("üìù –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç", "quote"))
            content = await self.generate_content(actual_type, theme)
            
            if content:
                success = await self.send_message_to_channel(content)
                if success:
                    await self.notify_admin(f"‚úÖ –†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {content_type}")
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await self.notify_admin(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        health_ok = await self.health_check()
        if not health_ok:
            logger.error("–ë–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if self.ADMIN_ID:
                await self.notify_admin("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∑–¥–æ—Ä–æ–≤—å—è")
        
        try:
            # –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            welcome_message = (
                "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                "üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n"
                "‚Ä¢ –£—Ç—Ä–æ–º - –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã\n"
                "‚Ä¢ –î–Ω–µ–º - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏\n"
                "‚Ä¢ –í–µ—á–µ—Ä–æ–º - –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
                "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏! ‚ú®"
            )
            await self.send_message_to_channel(welcome_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if self.ADMIN_ID:
            try:
                await self.send_stats_to_admin()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.post_scheduled_content()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                current_time = datetime.now()
                current_hour = current_time.hour
                
                # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6 —É—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if current_hour == 6:
                    await self.post_scheduled_content()
                    await self.cleanup_old_content()
                    await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å
                
                # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                elif current_hour == 9 and self.ADMIN_ID:
                    await self.send_stats_to_admin()
                    await asyncio.sleep(3600)
                
                # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 23:00 –¥–µ–ª–∞–µ–º –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏
                elif current_time.weekday() == 6 and current_hour == 23:
                    weekly_summary = (
                        "üìä –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏!\n\n"
                        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üôè\n"
                        "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ - –µ—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
                        "–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! üòä"
                    )
                    await self.send_message_to_channel(weekly_summary)
                    await asyncio.sleep(3600)
                
                # –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è (—Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤)
                elif current_hour % 6 == 0:  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                    await self.health_check()
                    await asyncio.sleep(3600)
                
                else:
                    await asyncio.sleep(Config.MAIN_LOOP_INTERVAL)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                if self.ADMIN_ID:
                    await self.notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = AutoContentBot()
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        if hasattr(bot, 'ADMIN_ID') and bot.ADMIN_ID:
            await bot.notify_admin("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if hasattr(bot, 'ADMIN_ID') and bot.ADMIN_ID:
            await bot.notify_admin(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if hasattr(bot, 'conn'):
            bot.conn.close()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
