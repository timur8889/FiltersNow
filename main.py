import logging
import sqlite3
import json
import random
import asyncio
import aiohttp
from datetime import datetime, timedelta
from telegram import Update, ChatPermissions
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    BOT_TOKEN = "8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!
    ADMIN_IDS = [5024165375]  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    BAD_WORDS = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ']  # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞

# ========== –°–ò–°–¢–ï–ú–ê –ö–ê–†–ú–´ ==========
class KarmaSystem:
    def __init__(self, db_path='karma.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä–º—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS karma (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    karma INTEGER DEFAULT 0,
                    last_thank TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS thanks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_user INTEGER,
                    to_user INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∫–∞—Ä–º—ã: {e}")
    
    def add_karma(self, user_id: int, username: str, from_user: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º—É
            cursor.execute('''
                INSERT OR REPLACE INTO karma (user_id, username, karma, last_thank)
                VALUES (?, ?, COALESCE((SELECT karma FROM karma WHERE user_id = ?), 0) + 1, ?)
            ''', (user_id, username, user_id, datetime.now()))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            cursor.execute(
                'INSERT INTO thanks (from_user, to_user, timestamp) VALUES (?, ?, ?)',
                (from_user, user_id, datetime.now())
            )
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä–º—ã: {e}")
            return False
    
    def get_karma(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                'SELECT karma FROM karma WHERE user_id = ?', (user_id,)
            )
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä–º—ã: {e}")
            return 0
    
    def get_top_users(self, limit=10):
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                'SELECT username, karma FROM karma ORDER BY karma DESC LIMIT ?', (limit,)
            )
            results = cursor.fetchall()
            conn.close()
            
            return results
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
            return []

# ========== –°–ò–°–¢–ï–ú–ê –≠–ö–û–ù–û–ú–ò–ö–ò ==========
class EconomySystem:
    def __init__(self, db_path='economy.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS economy (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    balance INTEGER DEFAULT 100,
                    last_daily TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î —ç–∫–æ–Ω–æ–º–∏–∫–∏: {e}")
    
    def get_balance(self, user_id: int, username: str = "") -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                'SELECT balance FROM economy WHERE user_id = ?', (user_id,)
            )
            result = cursor.fetchone()
            
            if not result:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute(
                    'INSERT INTO economy (user_id, username, balance) VALUES (?, ?, ?)',
                    (user_id, username, 100)
                )
                conn.commit()
                conn.close()
                return 100
            
            conn.close()
            return result[0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0
    
    def transfer_money(self, from_user: int, to_user: int, amount: int, to_username: str = "") -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            if amount <= 0:
                return False
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            cursor.execute(
                'SELECT balance FROM economy WHERE user_id = ?', (from_user,)
            )
            from_balance = cursor.fetchone()
            
            if not from_balance or from_balance[0] < amount:
                conn.close()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            cursor.execute(
                'SELECT balance FROM economy WHERE user_id = ?', (to_user,)
            )
            to_balance = cursor.fetchone()
            
            if not to_balance:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                cursor.execute(
                    'INSERT INTO economy (user_id, username, balance) VALUES (?, ?, ?)',
                    (to_user, to_username, amount)
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                cursor.execute(
                    'UPDATE economy SET balance = balance + ? WHERE user_id = ?',
                    (amount, to_user)
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            cursor.execute(
                'UPDATE economy SET balance = balance - ? WHERE user_id = ?',
                (amount, from_user)
            )
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥: {e}")
            return False
    
    def daily_bonus(self, user_id: int, username: str) -> dict:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                'SELECT last_daily FROM economy WHERE user_id = ?', (user_id,)
            )
            result = cursor.fetchone()
            
            today = datetime.now().date()
            bonus_amount = 50
            
            if result and result[0]:
                last_daily = datetime.fromisoformat(result[0]).date()
                if last_daily == today:
                    conn.close()
                    return {'success': False, 'message': '‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!'}
            
            # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å
            cursor.execute('''
                INSERT OR REPLACE INTO economy (user_id, username, balance, last_daily)
                VALUES (?, ?, COALESCE((SELECT balance FROM economy WHERE user_id = ?), 100) + ?, ?)
            ''', (user_id, username, user_id, bonus_amount, datetime.now()))
            
            conn.commit()
            conn.close()
            
            return {'success': True, 'amount': bonus_amount, 'message': f'üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_amount} –º–æ–Ω–µ—Ç!'}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞: {e}")
            return {'success': False, 'message': '‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞'}

# ========== –°–ò–°–¢–ï–ú–ê –ú–ò–ù–ò-–ò–ì–† ==========
class MiniGames:
    def __init__(self, economy_system: EconomySystem):
        self.economy = economy_system
    
    async def coin_flip(self, user_id: int, username: str, bet: int, choice: str) -> dict:
        """–ò–≥—Ä–∞ –≤ –æ—Ä–ª—è–Ω–∫—É"""
        try:
            if bet <= 0:
                return {'success': False, 'message': '‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!'}
            
            balance = self.economy.get_balance(user_id, username)
            if balance < bet:
                return {'success': False, 'message': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!'}
            
            if choice not in ['–æ—Ä—ë–ª', '–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞']:
                return {'success': False, 'message': '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ "–æ—Ä—ë–ª" –∏–ª–∏ "—Ä–µ—à–∫–∞"!'}
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—ã–±–æ—Ä
            if choice in ['–æ—Ä—ë–ª', '–æ—Ä–µ–ª']:
                choice = '–æ—Ä—ë–ª'
            else:
                choice = '—Ä–µ—à–∫–∞'
            
            # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É
            result = random.choice(['–æ—Ä—ë–ª', '—Ä–µ—à–∫–∞'])
            win = result == choice
            
            if win:
                # –£–¥–≤–∞–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                win_amount = bet * 2
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—Å—Ç–∞–≤–∫–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –≤—ã–∏–≥—Ä—ã—à)
                self.economy.transfer_money(user_id, user_id, bet + win_amount, username)
                message = f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–ø–∞–ª {result}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!'
            else:
                # –°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞
                message = f'üòî –£–≤—ã! –í—ã–ø–∞–ª {result}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç.'
            
            return {
                'success': True,
                'win': win,
                'result': result,
                'message': message
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ coin_flip: {e}")
            return {'success': False, 'message': '‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ!'}

# ========== –°–ò–°–¢–ï–ú–ê –í–ù–ï–®–ù–ò–• API ==========
class ExternalAPIs:
    @staticmethod
    async def get_weather(city: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
            
            weather_data = {
                '–º–æ—Å–∫–≤–∞': 'üå° –ú–æ—Å–∫–≤–∞: +15¬∞C, –æ–±–ª–∞—á–Ω–æ',
                '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'üå° –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: +12¬∞C, –¥–æ–∂–¥—å',
                '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 'üå° –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫: +8¬∞C, —è—Å–Ω–æ'
            }
            
            city_lower = city.lower()
            if city_lower in weather_data:
                return weather_data[city_lower]
            else:
                return f'üå° –ü–æ–≥–æ–¥–∞ –¥–ª—è {city}: +20¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"

    @staticmethod
    async def get_exchange_rates() -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            return "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSD: 90.50 RUB\nEUR: 98.20 RUB\nCNY: 12.50 RUB"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"

# ========== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ==========
class SuperGroupBot:
    def __init__(self, token: str):
        self.token = token
        self.config = Config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        self.karma_system = KarmaSystem()
        self.economy_system = EconomySystem()
        self.games_system = MiniGames(self.economy_system)
        self.api_system = ExternalAPIs()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        
        logger.info("ü§ñ –°—É–ø–µ—Ä-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("rules", self.rules_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –∫–∞—Ä–º—ã
        self.application.add_handler(CommandHandler("karma", self.karma_command))
        self.application.add_handler(CommandHandler("thank", self.thank_command))
        self.application.add_handler(CommandHandler("top", self.top_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("transfer", self.transfer_command))
        self.application.add_handler(CommandHandler("daily", self.daily_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä
        self.application.add_handler(CommandHandler("coinflip", self.coin_flip_command))
        
        # –ö–æ–º–∞–Ω–¥—ã API
        self.application.add_handler(CommandHandler("weather", self.weather_command))
        self.application.add_handler(CommandHandler("exchange", self.exchange_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, self.welcome_new_members))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, self.goodbye_member))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    # ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        try:
            user = update.effective_user
            welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Å –∫—É—á–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:

‚≠ê **–ö–∞—Ä–º–∞**: –ü–æ–ª—É—á–∞–π—Ç–µ –∫–∞—Ä–º—É –∑–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üí∞ **–≠–∫–æ–Ω–æ–º–∏–∫–∞**: –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –∏ –∏–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—ã
üéÆ **–ò–≥—Ä—ã**: coinflip - –ø–æ–¥–±—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É –Ω–∞ –¥–µ–Ω—å–≥–∏
üå§ **–ü–æ–ª–µ–∑–Ω–æ–µ**: –ü–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**: –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
            """
            await update.message.reply_text(welcome_text)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        try:
            help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üë§ **–û—Å–Ω–æ–≤–Ω—ã–µ:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/rules - –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã

‚≠ê **–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã:**
/karma - –í–∞—à–∞ –∫–∞—Ä–º–∞
/thank @username - –î–∞—Ç—å –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/top - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ

üí∞ **–≠–∫–æ–Ω–æ–º–∏–∫–∞:**
/balance - –í–∞—à –±–∞–ª–∞–Ω—Å
/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
/transfer @username —Å—É–º–º–∞ - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏

üéÆ **–ò–≥—Ä—ã:**
/coinflip —Å—É–º–º–∞ –æ—Ä—ë–ª/—Ä–µ—à–∫–∞ - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É

üå§ **–ü–æ–ª–µ–∑–Ω–æ–µ:**
/weather –≥–æ—Ä–æ–¥ - –ü–æ–≥–æ–¥–∞
/exchange - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç

‚ö° **–î–ª—è –∞–¥–º–∏–Ω–æ–≤:**
/warn @username - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            """
            await update.message.reply_text(help_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    async def rules_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /rules"""
        try:
            rules_text = """
üìú **–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:**

1. ü§ù –£–≤–∞–∂–∞–π—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
2. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞  
3. ‚ùå –ù–µ —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
4. üí¨ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
5. ‚≠ê –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç –∫–∞—Ä–º—É

‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–µ–¥–µ—Ç –∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º, –º—É—Ç—É –∏–ª–∏ –±–∞–Ω—É.
            """
            await update.message.reply_text(rules_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ rules_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    # ========== –ö–û–ú–ê–ù–î–´ –ö–ê–†–ú–´ ==========
    async def karma_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /karma - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä–º—É"""
        try:
            user = update.effective_user
            karma = self.karma_system.get_karma(user.id)
            
            await update.message.reply_text(
                f"‚≠ê {user.first_name}, –≤–∞—à–∞ –∫–∞—Ä–º–∞: {karma} –æ—á–∫–æ–≤"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ karma_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä–º—ã!")

    async def thank_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /thank - –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /thank @username")
                return
            
            target_username = context.args[0].replace('@', '')
            from_user = update.effective_user
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ username
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID
            target_user_id = hash(target_username) % 1000000  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID
            
            if self.karma_system.add_karma(target_user_id, target_username, from_user.id):
                await update.message.reply_text(
                    f"‚≠ê –í—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∏ @{target_username}! –ö–∞—Ä–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞."
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä–º—ã!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ thank_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä–º—ã!")

    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /top - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ"""
        try:
            top_users = self.karma_system.get_top_users(10)
            
            if not top_users:
                await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä–º–µ!")
                return
            
            top_text = "üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ:**\n\n"
            for i, (username, karma) in enumerate(top_users, 1):
                top_text += f"{i}. @{username}: {karma} ‚≠ê\n"
            
            await update.message.reply_text(top_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ top_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞!")

    # ========== –ö–û–ú–ê–ù–î–´ –≠–ö–û–ù–û–ú–ò–ö–ò ==========
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
        try:
            user = update.effective_user
            balance = self.economy_system.get_balance(user.id, user.username or user.first_name)
            
            await update.message.reply_text(
                f"üí∞ {user.first_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ balance_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!")

    async def transfer_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /transfer - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏"""
        try:
            if len(context.args) < 2:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer @username —Å—É–º–º–∞")
                return
            
            target_username = context.args[0].replace('@', '')
            amount = int(context.args[1])
            
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
            
            from_user = update.effective_user
            # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            target_user_id = hash(target_username) % 1000000
            
            if self.economy_system.transfer_money(from_user.id, target_user_id, amount, target_username):
                await update.message.reply_text(
                    f"‚úÖ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username}"
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞!")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ transfer_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞!")

    async def daily_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /daily - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
        try:
            user = update.effective_user
            result = self.economy_system.daily_bonus(user.id, user.username or user.first_name)
            
            await update.message.reply_text(result['message'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ daily_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞!")

    # ========== –ö–û–ú–ê–ù–î–´ –ò–ì–† ==========
    async def coin_flip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /coinflip - –∏–≥—Ä–∞ –≤ –æ—Ä–ª—è–Ω–∫—É"""
        try:
            if len(context.args) < 2:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /coinflip —Å—É–º–º–∞ –æ—Ä—ë–ª/—Ä–µ—à–∫–∞")
                return
            
            amount = int(context.args[0])
            choice = context.args[1].lower()
            user = update.effective_user
            
            result = await self.games_system.coin_flip(user.id, user.username or user.first_name, amount, choice)
            await update.message.reply_text(result['message'])
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ coin_flip_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ!")

    # ========== –ö–û–ú–ê–ù–î–´ API ==========
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /weather - –ø–æ–≥–æ–¥–∞"""
        try:
            city = context.args[0] if context.args else "–ú–æ—Å–∫–≤–∞"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            temp_message = await update.message.reply_text("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
            
            weather = await self.api_system.get_weather(city)
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=temp_message.message_id,
                text=weather
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ weather_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã!")

    async def exchange_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /exchange - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        try:
            temp_message = await update.message.reply_text("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
            
            exchange = await self.api_system.get_exchange_rates()
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=temp_message.message_id,
                text=exchange
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ exchange_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤!")

    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = update.message.text.lower()
            user = update.effective_user
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
            for bad_word in self.config.BAD_WORDS:
                if bad_word in message_text:
                    await update.message.delete()
                    warning = await update.message.reply_text(
                        f"‚ö†Ô∏è {user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã!"
                    )
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(10)
                    await warning.delete()
                    return
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(update.message.text) > 100:
                self.karma_system.add_karma(user.id, user.username or user.first_name, user.id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")

    async def welcome_new_members(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            for member in update.message.new_chat_members:
                welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}!

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ!
–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /rules
–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å: /help

üéÅ –ù–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: /daily
                """
                await update.message.reply_text(welcome_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ welcome_new_members: {e}")

    async def goodbye_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—â–∞–Ω–∏–µ —Å –≤—ã—à–µ–¥—à–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        try:
            left_member = update.message.left_chat_member
            if left_member:
                await update.message.reply_text(
                    f"üò¢ {left_member.first_name} –ø–æ–∫–∏–Ω—É–ª(–∞) –Ω–∞—Å..."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ goodbye_member: {e}")

    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        try:
            logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
            
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

    # ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–º–µ–Ω–∏–ª–∏ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
            print("üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª bot.log")
            
            self.application.run_polling()
            
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ó–ê–ü–£–°–ö ==========
def test_bot_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        test_token = "TEST_TOKEN"
        bot = SuperGroupBot(test_token)
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("=" * 50)
    print("ü§ñ SUPER GROUP BOT - –ó–ê–ü–£–°–ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if Config.BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –í—ã –Ω–µ –∑–∞–º–µ–Ω–∏–ª–∏ BOT_TOKEN!")
        print("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –≤ –∫–æ–¥–µ")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if not test_bot_initialization():
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
        return
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = SuperGroupBot(Config.BOT_TOKEN)
        bot.run()
        
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
