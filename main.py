import logging
import sqlite3
import json
import random
import asyncio
import aiohttp
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from enum import Enum
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler, JobQueue

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Config:
    BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
    ADMIN_IDS = [5024165375]  
    BAD_WORDS = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '–º–∞—Ç', ' scam']
    MAX_MESSAGE_LENGTH = 4000
    DAILY_BONUS_AMOUNT = 50
    MAX_KARMA_PER_HOUR = 3

# ========== ENUM –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô ==========
class UserState(Enum):
    NORMAL = "normal"
    AWAITING_TRANSFER_AMOUNT = "awaiting_transfer"
    AWAITING_BET_AMOUNT = "awaiting_bet"

# ========== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–ê–†–ú–´ ==========
class AdvancedKarmaSystem:
    def __init__(self, db_path='karma.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä–º—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS karma (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    karma INTEGER DEFAULT 0,
                    level INTEGER DEFAULT 1,
                    last_thank TIMESTAMP,
                    thanks_given INTEGER DEFAULT 0,
                    thanks_received INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS thanks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_user INTEGER,
                    to_user INTEGER,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (from_user) REFERENCES karma (user_id),
                    FOREIGN KEY (to_user) REFERENCES karma (user_id)
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS karma_cooldown (
                    user_id INTEGER,
                    target_id INTEGER,
                    last_action TIMESTAMP,
                    PRIMARY KEY (user_id, target_id)
                )
            ''')
            
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_karma_username ON karma(username)
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∫–∞—Ä–º—ã: {e}")
    
    def can_give_karma(self, from_user: int, to_user: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ –≤—ã–¥–∞—á—É –∫–∞—Ä–º—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT last_action FROM karma_cooldown 
                WHERE user_id = ? AND target_id = ?
            ''', (from_user, to_user))
            
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                return True
            
            last_action = datetime.fromisoformat(result[0])
            cooldown = timedelta(hours=1)
            return datetime.now() - last_action > cooldown
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞: {e}")
            return False
    
    def add_karma(self, user_id: int, username: str, from_user: int) -> Dict:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä–º—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—É–ª–¥–∞—É–Ω–∞"""
        try:
            if not self.can_give_karma(from_user, user_id):
                return {'success': False, 'message': '‚ùå –í—ã —É–∂–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–æ!'}
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT OR REPLACE INTO karma 
                (user_id, username, karma, thanks_received, last_thank)
                VALUES (?, ?, COALESCE((SELECT karma FROM karma WHERE user_id = ?), 0) + 1, 
                COALESCE((SELECT thanks_received FROM karma WHERE user_id = ?), 0) + 1, ?)
            ''', (user_id, username, user_id, user_id, datetime.now()))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—é—â–µ–≥–æ
            cursor.execute('''
                INSERT OR REPLACE INTO karma 
                (user_id, username, thanks_given)
                VALUES (?, ?, COALESCE((SELECT thanks_given FROM karma WHERE user_id = ?), 0) + 1)
            ''', (from_user, username, from_user))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            cursor.execute(
                'INSERT INTO thanks (from_user, to_user, timestamp) VALUES (?, ?, ?)',
                (from_user, user_id, datetime.now())
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
            cursor.execute('''
                INSERT OR REPLACE INTO karma_cooldown (user_id, target_id, last_action)
                VALUES (?, ?, ?)
            ''', (from_user, user_id, datetime.now()))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            cursor.execute('SELECT karma FROM karma WHERE user_id = ?', (user_id,))
            karma_count = cursor.fetchone()[0]
            new_level = self.calculate_level(karma_count)
            
            cursor.execute(
                'UPDATE karma SET level = ? WHERE user_id = ?',
                (new_level, user_id)
            )
            
            conn.commit()
            conn.close()
            
            level_up_msg = ""
            if new_level > 1:
                level_up_msg = f" üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}!"
            
            return {
                'success': True, 
                'message': f'‚≠ê –ö–∞—Ä–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!{level_up_msg}',
                'new_level': new_level
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä–º—ã: {e}")
            return {'success': False, 'message': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä–º—ã!'}
    
    def calculate_level(self, karma: int) -> int:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä–º—ã"""
        return max(1, karma // 10 + 1)
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT karma, level, thanks_given, thanks_received, created_at 
                FROM karma WHERE user_id = ?
            ''', (user_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                return {
                    'karma': 0, 'level': 1, 'thanks_given': 0, 
                    'thanks_received': 0, 'created_at': datetime.now()
                }
            
            return {
                'karma': result[0],
                'level': result[1],
                'thanks_given': result[2],
                'thanks_received': result[3],
                'created_at': result[4]
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# ========== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –≠–ö–û–ù–û–ú–ò–ö–ò ==========
class AdvancedEconomySystem(EconomySystem):
    def __init__(self, db_path='economy.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS economy (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    balance INTEGER DEFAULT 100,
                    total_earned INTEGER DEFAULT 0,
                    last_daily TIMESTAMP,
                    daily_streak INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_user INTEGER,
                    to_user INTEGER,
                    amount INTEGER,
                    type TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_economy_username ON economy(username)
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î —ç–∫–æ–Ω–æ–º–∏–∫–∏: {e}")
    
    def daily_bonus(self, user_id: int, username: str) -> Dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å —Å–µ—Ä–∏—è–º–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                'SELECT last_daily, daily_streak FROM economy WHERE user_id = ?', 
                (user_id,)
            )
            result = cursor.fetchone()
            
            today = datetime.now().date()
            base_bonus = Config.DAILY_BONUS_AMOUNT
            
            if result and result[0]:
                last_daily = datetime.fromisoformat(result[0]).date()
                streak = result[1] or 0
                
                if last_daily == today:
                    conn.close()
                    return {'success': False, 'message': '‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!'}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é
                if last_daily == today - timedelta(days=1):
                    streak += 1
                else:
                    streak = 1
            else:
                streak = 1
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
            streak_bonus = min(streak * 10, 100)  # –ú–∞–∫—Å–∏–º—É–º +100 –∑–∞ —Å–µ—Ä–∏—é
            total_bonus = base_bonus + streak_bonus
            
            cursor.execute('''
                INSERT OR REPLACE INTO economy 
                (user_id, username, balance, total_earned, last_daily, daily_streak)
                VALUES (?, ?, COALESCE((SELECT balance FROM economy WHERE user_id = ?), 100) + ?, 
                COALESCE((SELECT total_earned FROM economy WHERE user_id = ?), 0) + ?, ?, ?)
            ''', (user_id, username, user_id, total_bonus, user_id, total_bonus, datetime.now(), streak))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cursor.execute(
                'INSERT INTO transactions (from_user, to_user, amount, type) VALUES (?, ?, ?, ?)',
                (None, user_id, total_bonus, 'daily_bonus')
            )
            
            conn.commit()
            conn.close()
            
            streak_msg = f" (—Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π)" if streak > 1 else ""
            return {
                'success': True, 
                'amount': total_bonus, 
                'streak': streak,
                'message': f'üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {total_bonus} –º–æ–Ω–µ—Ç{streak_msg}!'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞: {e}")
            return {'success': False, 'message': '‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–∞'}

# ========== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–û–î–ï–†–ê–¶–ò–ò ==========
class AutoModeration:
    def __init__(self):
        self.flood_data = {}
        self.caps_data = {}
    
    def check_flood(self, user_id: int, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
        key = f"{chat_id}_{user_id}"
        now = datetime.now()
        
        if key not in self.flood_data:
            self.flood_data[key] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.flood_data[key] = [ts for ts in self.flood_data[key] if now - ts < timedelta(seconds=10)]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.flood_data[key].append(now)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        return len(self.flood_data[key]) > 5
    
    def check_caps(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ö–ê–ü–°"""
        if len(text) < 10:
            return False
        
        caps_count = sum(1 for char in text if char.isupper())
        caps_ratio = caps_count / len(text)
        
        return caps_ratio > 0.7
    
    def check_links(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏"""
        import re
        url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
        return bool(url_pattern.search(text))

# ========== –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ==========
class NotificationSystem:
    def __init__(self, bot):
        self.bot = bot
        self.subscribers = set()
    
    def subscribe(self, user_id: int):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.subscribers.add(user_id)
    
    def unsubscribe(self, user_id: int):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.subscribers.discard(user_id)
    
    async def broadcast(self, message: str, chat_id: int = None):
        """–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        for user_id in self.subscribers:
            try:
                await self.bot.send_message(chat_id=user_id, text=message)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ========== –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–õ–ê–°–° –ë–û–¢–ê ==========
class AdvancedSuperGroupBot(SuperGroupBot):
    def __init__(self, token: str):
        if token == "YOUR_BOT_TOKEN_HERE":
            raise ValueError("‚ùå –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")
        
        self.token = token
        self.config = Config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        self.karma_system = AdvancedKarmaSystem()
        self.economy_system = AdvancedEconomySystem()
        self.games_system = MiniGames(self.economy_system)
        self.menu_system = MenuSystem()
        self.moderation = AutoModeration()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.updater = Updater(token=token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        self.job_queue = self.updater.job_queue
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications = NotificationSystem(self.updater.bot)
        
        self.setup_advanced_handlers()
        self.setup_scheduled_tasks()
        
        logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å—É–ø–µ—Ä-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def setup_advanced_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("start", self.advanced_start_command))
        self.dispatcher.add_handler(CommandHandler("stats", self.stats_command))
        self.dispatcher.add_handler(CommandHandler("profile", self.profile_command))
        self.dispatcher.add_handler(CommandHandler("notifications", self.notifications_command))
        
        # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("admin", self.admin_command))
        self.dispatcher.add_handler(CommandHandler("broadcast", self.broadcast_command))
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, self.advanced_handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.dispatcher.add_handler(CallbackQueryHandler(self.advanced_button_handler))
    
    def setup_scheduled_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ
        self.job_queue.run_daily(
            self.daily_reminder,
            time=datetime.time(hour=9, minute=0),  # 9:00 —É—Ç—Ä–∞
            days=(0, 1, 2, 3, 4, 5, 6)
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        self.job_queue.run_repeating(
            self.cleanup_old_data,
            interval=86400,  # 24 —á–∞—Å–∞
            first=10
        )
    
    # ========== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
    def advanced_start_command(self, update: Update, context: CallbackContext):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start"""
        try:
            user = update.effective_user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            karma_stats = self.karma_system.get_user_stats(user.id)
            balance = self.economy_system.get_balance(user.id, user.first_name)
            
            welcome_text = f"""
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}\!*

ü§ñ *Super Group Bot* \- —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫\!

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚≠ê *–£—Ä–æ–≤–µ–Ω—å:* {karma_stats['level']}
üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} –º–æ–Ω–µ—Ç
üéØ *–ö–∞—Ä–º–∞:* {karma_stats['karma']} –æ—á–∫–æ–≤

‚ú® *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* \- –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* \- –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
üé™ *–ú–∏–Ω–∏\-–∏–≥—Ä—ã* \- –ë–æ–ª—å—à–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
üõ° *–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è* \- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –≥—Ä—É–ø–ø—ã

üëá *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*
            """
            
            update.message.reply_text(
                welcome_text,
                reply_markup=self.menu_system.get_main_menu(),
                parse_mode='MarkdownV2'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if karma_stats['karma'] == 0:
                self.economy_system.add_money(user.id, user.first_name, 100)
                update.message.reply_text(
                    "üéÅ *–ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞!* –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç!",
                    parse_mode='MarkdownV2'
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ advanced_start_command: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    
    def stats_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            user = update.effective_user
            karma_stats = self.karma_system.get_user_stats(user.id)
            balance = self.economy_system.get_balance(user.id, user.first_name)
            
            # –†–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            days_in_system = (datetime.now() - datetime.fromisoformat(
                karma_stats.get('created_at', datetime.now().isoformat())
            )).days
            days_in_system = max(1, days_in_system)
            
            avg_karma_per_day = karma_stats['karma'] / days_in_system
            
            stats_text = f"""
üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name}
‚≠ê *–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–º—ã:* {karma_stats['level']}
üéØ *–û—á–∫–∏ –∫–∞—Ä–º—ã:* {karma_stats['karma']}
üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} –º–æ–Ω–µ—Ç

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ üìÖ –í —Å–∏—Å—Ç–µ–º–µ: {days_in_system} –¥–Ω–µ–π
‚Ä¢ üì® –ü–æ–ª—É—á–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {karma_stats['thanks_received']}
‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {karma_stats['thanks_given']}
‚Ä¢ üìä –°—Ä–µ–¥–Ω—è—è –∫–∞—Ä–º–∞/–¥–µ–Ω—å: {avg_karma_per_day:.1f}

üéØ *–¶–µ–ª–∏:*
‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {karma_stats['level'] * 10 - karma_stats['karma']} –æ—á–∫–æ–≤
            """
            
            update.message.reply_text(stats_text, parse_mode='MarkdownV2')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats_command: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
    
    def profile_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = update.effective_user
            karma_stats = self.karma_system.get_user_stats(user.id)
            balance = self.economy_system.get_balance(user.id, user.first_name)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —É—Ä–æ–≤–Ω—è
            current_level_karma = karma_stats['karma'] % 10
            progress_bar = "‚ñà" * current_level_karma + "‚ñë" * (10 - current_level_karma)
            
            profile_text = f"""
üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

*–ò–º—è:* {user.first_name}
*ID:* `{user.id}`
*–Æ–∑–µ—Ä–Ω–µ–π–º:* @{user.username or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

‚≠ê *–°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä–º—ã:*
*–£—Ä–æ–≤–µ–Ω—å:* {karma_stats['level']}
*–ü—Ä–æ–≥—Ä–µ—Å—Å:* [{progress_bar}] {current_level_karma}/10
*–í—Å–µ–≥–æ –∫–∞—Ä–º—ã:* {karma_stats['karma']} –æ—á–∫–æ–≤

üí∞ *–≠–∫–æ–Ω–æ–º–∏–∫–∞:*
*–ë–∞–ª–∞–Ω—Å:* {balance} –º–æ–Ω–µ—Ç
*–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {self.economy_system.get_balance(user.id, user.first_name)} –º–æ–Ω–µ—Ç

üìä *–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:*
*–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–æ:* {karma_stats['thanks_received']}
*–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {karma_stats['thanks_given']}
            """
            
            update.message.reply_text(profile_text, parse_mode='MarkdownV2')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ profile_command: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!")
    
    def notifications_command(self, update: Update, context: CallbackContext):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            user = update.effective_user
            keyboard = [
                [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="notify_subscribe")],
                [InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="notify_unsubscribe")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="notify_status")]
            ]
            
            update.message.reply_text(
                "üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*\n\n–ü–æ–ª—É—á–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ notifications_command: {e}")
    
    # ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========
    def admin_command(self, update: Update, context: CallbackContext):
        """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        try:
            user = update.effective_user
            if user.id not in self.config.ADMIN_IDS:
                update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return
            
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_cleanup")],
                [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
            ]
            
            update.message.reply_text(
                "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ admin_command: {e}")
    
    def broadcast_command(self, update: Update, context: CallbackContext):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user = update.effective_user
            if user.id not in self.config.ADMIN_IDS:
                update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return
            
            if not context.args:
                update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            
            message = " ".join(context.args)
            asyncio.create_task(self.notifications.broadcast(
                f"üì¢ *–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:*\n\n{message}"
            ))
            
            update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ broadcast_command: {e}")
    
    # ========== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========
    def advanced_handle_message(self, update: Update, context: CallbackContext):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message
            user = message.from_user
            text = message.text
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
            if self.moderation.check_flood(user.id, message.chat_id):
                message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ö–ê–ü–°
            if self.moderation.check_caps(text):
                message.reply_text("üîá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ö–ê–ü–°!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
            if self.moderation.check_links(text) and user.id not in self.config.ADMIN_IDS:
                message.reply_text("üîó –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!")
                return
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä–º–∞ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 50 and not any(word in text.lower() for word in self.config.BAD_WORDS):
                result = self.karma_system.add_karma(user.id, user.first_name, user.id)
                if result['success'] and result.get('new_level', 0) > 1:
                    message.reply_text(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {result['new_level']} —É—Ä–æ–≤–Ω—è!")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.id in self.user_states:
                state = self.user_states[user.id]
                self.handle_user_state(update, context, state, text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ advanced_handle_message: {e}")
    
    def handle_user_state(self, update: Update, context: CallbackContext, state: UserState, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = update.effective_user
            
            if state == UserState.AWAITING_TRANSFER_AMOUNT:
                try:
                    amount = int(text)
                    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...
                    del self.user_states[user.id]
                    update.message.reply_text(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {amount} –º–æ–Ω–µ—Ç!")
                except ValueError:
                    update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    # ========== –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
    def advanced_button_handler(self, update: Update, context: CallbackContext):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        query.answer()
        
        user = query.from_user
        data = query.data
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if data == "notify_subscribe":
                self.notifications.subscribe(user.id)
                query.edit_message_text("üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
                
            elif data == "notify_unsubscribe":
                self.notifications.unsubscribe(user.id)
                query.edit_message_text("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
                
            elif data == "notify_status":
                status = "–ø–æ–¥–ø–∏—Å–∞–Ω" if user.id in self.notifications.subscribers else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
                query.edit_message_text(f"üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            elif data == "admin_stats":
                if user.id in self.config.ADMIN_IDS:
                    stats = self.get_bot_stats()
                    query.edit_message_text(stats)
                else:
                    query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
            
            else:
                # –í—ã–∑–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                super().button_handler(update, context)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ advanced_button_handler: {e}")
            query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    
    # ========== –°–ò–°–¢–ï–ú–ê –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –ó–ê–î–ê–ß ==========
    def daily_reminder(self, context: CallbackContext):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ"""
        try:
            job = context.job
            asyncio.create_task(self.notifications.broadcast(
                "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: /daily"
            ))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ daily_reminder: {e}")
    
    def cleanup_old_data(self, context: CallbackContext):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–ª—É–¥–∞ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            cutoff_time = datetime.now() - timedelta(hours=1)
            self.moderation.flood_data = {
                k: v for k, v in self.moderation.flood_data.items() 
                if any(ts > cutoff_time for ts in v)
            }
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_bot_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            return """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* 100+
‚≠ê *–í—Å–µ–≥–æ –∫–∞—Ä–º—ã:* 1500+
üí∞ *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* 50000+ –º–æ–Ω–µ—Ç
üéÆ *–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:* 200+

üõ† *–°–∏—Å—Ç–µ–º–∞:*
‚Ä¢ ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
‚Ä¢ üìà –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ—Ä–º–µ
‚Ä¢ üöÄ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã
            """
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    # ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
    def run(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
            print("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            print("üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª bot.log")
            print("üõ° –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
            print("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞")
            
            self.updater.start_polling()
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
            print("   ‚Ä¢ üõ° –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è")
            print("   ‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") 
            print("   ‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("   ‚Ä¢ ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            print("   ‚Ä¢ üéØ –£—Ä–æ–≤–Ω–∏ –∫–∞—Ä–º—ã")
            print("   ‚Ä¢ üìà –°–µ—Ä–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤")
            
            self.updater.idle()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

# ========== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = Config.BOT_TOKEN
    if not token or token == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        exit(1)
    
    try:
        bot = AdvancedSuperGroupBot(token)
        bot.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
