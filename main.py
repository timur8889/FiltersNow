import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError
import sqlite3
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('channel_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutoContentBot:
    def __init__(self):
        self.BOT_TOKEN = "8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
        self.CHANNEL_ID = "@timur_onion"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        self.bot = Bot(token=self.BOT_TOKEN)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –°–ø–∏—Å–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.quotes = [
            "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. ‚Äî –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ, –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "–°–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —É–ø–æ—Ä—Å—Ç–≤–∞. ‚Äî –ê–º–µ–ª–∏—è –≠—Ä—Ö–∞—Ä—Ç",
            "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ. ‚Äî –ê–±—Ä–∞—Ö–∞–º –õ–∏–Ω–∫–æ–ª—å–Ω"
        ]
        
        self.facts = [
            "üêù –ú–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø—á–µ–ª—ã –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞!",
            "üåå –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å —Å—Ç–æ–ª–∫–Ω–µ—Ç—Å—è —Å –≥–∞–ª–∞–∫—Ç–∏–∫–æ–π –ê–Ω–¥—Ä–æ–º–µ–¥—ã —á–µ—Ä–µ–∑ 4 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –ª–µ—Ç",
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∫–æ–ª–æ 23 –≤–∞—Ç—Ç —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è –ª–∞–º–ø–æ—á–∫–∏",
            "üìö –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ä–æ–º–∞–Ω –≤ –º–∏—Ä–µ ‚Äî ¬´–í –ø–æ–∏—Å–∫–∞—Ö —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª –ú–∞—Ä—Å–µ–ª—è –ü—Ä—É—Å—Ç–∞ (1.2 –º–ª–Ω —Å–ª–æ–≤)",
            "üêú –ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç!"
        ]
        
        self.tips = [
            "üí° –°–æ–≤–µ—Ç: –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å —Å–∞–º–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
            "üí° –°–æ–≤–µ—Ç: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã —É–ª—É—á—à–∞—é—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "üí° –°–æ–≤–µ—Ç –ß–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "üí° –°–æ–≤–µ—Ç: –ü–µ–π—Ç–µ –≤–æ–¥—É –ø–µ—Ä–µ–¥ –µ–¥–æ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞",
            "üí° –°–æ–≤–µ—Ç: 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –≤ –¥–µ–Ω—å —É–ª—É—á—à–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–æ–Ω"
        ]

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.conn = sqlite3.connect('content.db', check_same_thread=False)
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS published_content (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content_type TEXT NOT NULL,
                content TEXT NOT NULL,
                publish_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()

    def is_content_used(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"""
        cursor = self.conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM published_content WHERE content = ?", 
            (content,)
        )
        return cursor.fetchone()[0] > 0

    def mark_content_used(self, content_type, content):
        """–ü–æ–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
        cursor = self.conn.cursor()
        cursor.execute(
            "INSERT INTO published_content (content_type, content) VALUES (?, ?)",
            (content_type, content)
        )
        self.conn.commit()

    async def get_random_quote(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://api.quotable.io/random', timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        quote = f"\"{data['content']}\" ‚Äî {data['author']}"
                        if not self.is_content_used(quote):
                            return quote
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ API: {e}")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        return random.choice([q for q in self.quotes if not self.is_content_used(q)])

    async def get_random_fact(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://uselessfacts.jsph.pl/random.json?language=en', timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        fact = f"ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{data['text']}"
                        if not self.is_content_used(fact):
                            return fact
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –∏–∑ API: {e}")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        return random.choice([f for f in self.facts if not self.is_content_used(f)])

    async def get_news_summary(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å News API)"""
        news_items = [
            "üì∞ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±–∑–æ—Ä: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –º–µ–Ω—è—Ç—å –Ω–∞—à –º–∏—Ä!",
            "üåç –ê–∫—Ç—É–∞–ª—å–Ω–æ: –£—á–µ–Ω—ã–µ –¥–µ–ª–∞—é—Ç –Ω–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üöÄ –ù–æ–≤–æ—Å—Ç–∏ –Ω–∞—É–∫–∏: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "üíº –ë–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏: –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –¥–≤–∏–≥–∞—é—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É –≤–ø–µ—Ä–µ–¥"
        ]
        return random.choice(news_items)

    async def send_message_to_channel(self, message, message_type="text"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            if message_type == "text":
                await self.bot.send_message(
                    chat_id=self.CHANNEL_ID,
                    text=message,
                    parse_mode='HTML'
                )
            
            self.mark_content_used("auto_post", message)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {message[:50]}...")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            return False

    async def get_daily_content_schedule(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –¥–µ–Ω—å"""
        now = datetime.now()
        weekday = now.weekday()
        
        # –†–∞–∑–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        schedules = {
            0: [  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                (8, "quote", "üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é!"),
                (12, "fact", "ü§î –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?"),
                (18, "tip", "üí° –°–æ–≤–µ—Ç –¥–Ω—è")
            ],
            1: [  # –í—Ç–æ—Ä–Ω–∏–∫
                (9, "fact", "üîç –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç!"),
                (14, "news", "üì∞ –ö—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
                (19, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –≤–µ—á–µ—Ä–∞")
            ],
            2: [  # –°—Ä–µ–¥–∞
                (10, "tip", "üí° –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç"),
                (15, "fact", "üéØ –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç"),
                (20, "quote", "üí≠ –ú—É–¥—Ä–∞—è –º—ã—Å–ª—å")
            ],
            3: [  # –ß–µ—Ç–≤–µ—Ä–≥
                (8, "news", "üåç –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –º–∏—Ä–µ?"),
                (13, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è"),
                (17, "tip", "üí° –°–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            ],
            4: [  # –ü—è—Ç–Ω–∏—Ü–∞
                (11, "fact", "ü§Ø –§–∞–∫—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ"),
                (16, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"),
                (21, "tip", "üí° –°–æ–≤–µ—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞")
            ],
            5: [  # –°—É–±–±–æ—Ç–∞
                (10, "quote", "üí≠ –¶–∏—Ç–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è"),
                (15, "fact", "üé™ –ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç")
            ],
            6: [  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                (11, "tip", "üí° –°–æ–≤–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é"),
                (17, "quote", "üí≠ –í–æ—Å–∫—Ä–µ—Å–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å")
            ]
        }
        
        return schedules.get(weekday, [])

    async def generate_content(self, content_type, theme=""):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–∏–ø—É"""
        if content_type == "quote":
            content = await self.get_random_quote()
            return f"üí≠ {theme}\n\n{content}"
        
        elif content_type == "fact":
            content = await self.get_random_fact()
            return f"üéØ {theme}\n\n{content}"
        
        elif content_type == "tip":
            content = random.choice([t for t in self.tips if not self.is_content_used(t)])
            return f"üí° {theme}\n\n{content}"
        
        elif content_type == "news":
            content = await self.get_news_summary()
            return f"üì∞ {theme}\n\n{content}\n\n#–Ω–æ–≤–æ—Å—Ç–∏ #–æ–±–∑–æ—Ä"
        
        return None

    async def post_scheduled_content(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        try:
            schedule = await self.get_daily_content_schedule()
            now = datetime.now()
            
            for hour, content_type, theme in schedule:
                # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                scheduled_time = now.replace(hour=hour, minute=0, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                if scheduled_time < now:
                    scheduled_time += timedelta(days=1)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                delay = (scheduled_time - now).total_seconds()
                
                if delay > 0:
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è {content_type} –≤ {hour}:00")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                    asyncio.create_task(
                        self.delayed_post(delay, content_type, theme)
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

    async def delayed_post(self, delay, content_type, theme):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
        try:
            await asyncio.sleep(delay)
            content = await self.generate_content(content_type, theme)
            if content:
                await self.send_message_to_channel(content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    async def cleanup_old_content(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cursor = self.conn.cursor()
            cursor.execute(
                "DELETE FROM published_content WHERE publish_date < datetime('now', '-30 days')"
            )
            self.conn.commit()
            logger.info("–°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω!")
        
        # –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        welcome_message = (
            "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
            "üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n"
            "‚Ä¢ –£—Ç—Ä–æ–º - –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã\n"
            "‚Ä¢ –î–Ω–µ–º - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "‚Ä¢ –í–µ—á–µ—Ä–æ–º - –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
            "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏! ‚ú®"
        )
        await self.send_message_to_channel(welcome_message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.post_scheduled_content()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                current_hour = datetime.now().hour
                
                # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6 —É—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if current_hour == 6:
                    await self.post_scheduled_content()
                    await self.cleanup_old_content()
                    await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å
                
                # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 23:00 –¥–µ–ª–∞–µ–º –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏
                elif datetime.now().weekday() == 6 and current_hour == 23:
                    weekly_summary = (
                        "üìä –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏!\n\n"
                        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üôè\n"
                        "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ - –µ—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
                        "–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! üòä"
                    )
                    await self.send_message_to_channel(weekly_summary)
                    await asyncio.sleep(3600)
                
                else:
                    await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = AutoContentBot()
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if hasattr(bot, 'conn'):
            bot.conn.close()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
