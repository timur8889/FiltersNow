import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    ContextTypes, ConversationHandler, CallbackQueryHandler, JobQueue
)
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from io import BytesIO
import json
pip install python-telegram-bot matplotlib pillow
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = "8278600298:AAFA-R0ql-dibAoBruxgwitHTx_LLx61OdM"

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECTING_ACTION, CHOOSING_FILTER_TYPE, ADDING_FILTER, UPLOADING_PHOTO = range(4)

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ROLES = {
    'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'technician': '–¢–µ—Ö–Ω–∏–∫'
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('filters_advanced.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.executescript('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        role TEXT DEFAULT 'user',
        created_date TEXT
    );
    
    CREATE TABLE IF NOT EXISTS filter_types (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        lifespan_days INTEGER,
        description TEXT,
        created_by INTEGER
    );
    
    CREATE TABLE IF NOT EXISTS filter_changes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        filter_type_id INTEGER,
        change_date TEXT,
        next_change_date TEXT,
        photo_file_id TEXT,
        notes TEXT,
        FOREIGN KEY (filter_type_id) REFERENCES filter_types (id)
    );
    
    CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        filter_type_id INTEGER,
        notification_date TEXT,
        sent BOOLEAN DEFAULT FALSE
    );
''')

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
default_filter_types = [
    ('–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä', 30, '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –ø–µ—Å–∫–∞ –∏ —Ä–∂–∞–≤—á–∏–Ω—ã'),
    ('–£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä', 180, '–£–¥–∞–ª–µ–Ω–∏–µ —Ö–ª–æ—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π'),
    ('–û–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å', 365, '–ú–µ–º–±—Ä–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Å–∞'),
    ('–ü–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä', 180, '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–æ–¥—ã')
]

for filter_type in default_filter_types:
    try:
        cursor.execute(
            "INSERT OR IGNORE INTO filter_types (name, lifespan_days, description) VALUES (?, ?, ?)",
            filter_type
        )
    except sqlite3.IntegrityError:
        pass

conn.commit()

class FilterBot:
    def __init__(self):
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self._add_user(user)
        
        keyboard = [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ]
        
        if self._is_admin(user.id):
            keyboard.append(['üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'])
        
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–º–µ–Ω—É —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        return SELECTING_ACTION
    
    def _add_user(self, user):
        cursor.execute(
            """INSERT OR REPLACE INTO users 
            (user_id, username, first_name, created_date) 
            VALUES (?, ?, ?, ?)""",
            (user.id, user.username, user.first_name, datetime.now().isoformat())
        )
        conn.commit()
    
    def _is_admin(self, user_id):
        cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 'admin'
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return SELECTING_ACTION
        
        keyboard = [
            [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="manage_types")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
            [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=markup
        )
        return SELECTING_ACTION
    
    async def add_filter_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cursor.execute("SELECT id, name, lifespan_days FROM filter_types")
        filter_types = cursor.fetchall()
        
        keyboard = []
        for filter_id, name, lifespan in filter_types:
            keyboard.append([
                InlineKeyboardButton(
                    f"{name} ({lifespan} –¥–Ω–µ–π)", 
                    callback_data=f"select_filter_{filter_id}"
                )
            ])
        
        markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã:",
            reply_markup=markup
        )
        return CHOOSING_FILTER_TYPE
    
    async def filter_type_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        filter_type_id = int(query.data.split('_')[-1])
        context.user_data['current_filter_type'] = filter_type_id
        
        cursor.execute(
            "SELECT name, lifespan_days FROM filter_types WHERE id = ?", 
            (filter_type_id,)
        )
        filter_name, lifespan = cursor.fetchone()
        
        context.user_data['current_lifespan'] = lifespan
        
        await query.edit_message_text(
            f"üìù –ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞: {filter_name}\n"
            f"‚è± –°—Ä–æ–∫ —Å–ª—É–∂–±—ã: {lifespan} –¥–Ω–µ–π\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        )
        return UPLOADING_PHOTO
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        photo_file = await update.message.photo[-1].get_file()
        context.user_data['photo_file_id'] = photo_file.file_id
        
        await update.message.reply_text(
            "üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        )
        return ADDING_FILTER
    
    async def skip_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['photo_file_id'] = None
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
        return ADDING_FILTER
    
    async def save_filter_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        notes = update.message.text if update.message.text != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else ""
        filter_type_id = context.user_data['current_filter_type']
        lifespan = context.user_data['current_lifespan']
        photo_file_id = context.user_data.get('photo_file_id')
        
        change_date = datetime.now()
        next_change_date = change_date + timedelta(days=lifespan)
        
        cursor.execute(
            """INSERT INTO filter_changes 
            (user_id, filter_type_id, change_date, next_change_date, photo_file_id, notes) 
            VALUES (?, ?, ?, ?, ?, ?)""",
            (user_id, filter_type_id, change_date.isoformat(), 
             next_change_date.isoformat(), photo_file_id, notes)
        )
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–º–µ–Ω–µ
        notification_date = next_change_date - timedelta(days=7)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π
        cursor.execute(
            "INSERT INTO notifications (user_id, filter_type_id, notification_date) VALUES (?, ?, ?)",
            (user_id, filter_type_id, notification_date.isoformat())
        )
        
        conn.commit()
        
        cursor.execute("SELECT name FROM filter_types WHERE id = ?", (filter_type_id,))
        filter_name = cursor.fetchone()[0]
        
        response = (
            f"‚úÖ –ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ '{filter_name}' –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞: {next_change_date.strftime('%d.%m.%Y')}\n"
            f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 7 –¥–Ω–µ–π –¥–æ –∑–∞–º–µ–Ω—ã"
        )
        
        if photo_file_id:
            await update.message.reply_photo(
                photo=photo_file_id,
                caption=response
            )
        else:
            await update.message.reply_text(response)
        
        return await self.start(update, context)
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute('''
            SELECT ft.name, COUNT(fc.id), MAX(fc.change_date)
            FROM filter_changes fc
            JOIN filter_types ft ON fc.filter_type_id = ft.id
            WHERE fc.user_id = ?
            GROUP BY ft.name
        ''', (user_id,))
        
        stats = cursor.fetchall()
        
        if not stats:
            await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–º–µ–Ω–∞—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return SELECTING_ACTION
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –ø–æ —Ç–∏–ø–∞–º
        names = [stat[0] for stat in stats]
        counts = [stat[1] for stat in stats]
        
        ax1.bar(names, counts, color=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'])
        ax1.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –ø–æ —Ç–∏–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤')
        ax1.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –∑–∞–º–µ–Ω
        cursor.execute('''
            SELECT ft.name, fc.change_date 
            FROM filter_changes fc
            JOIN filter_types ft ON fc.filter_type_id = ft.id
            WHERE fc.user_id = ?
            ORDER BY fc.change_date
        ''', (user_id,))
        
        changes = cursor.fetchall()
        
        dates = [datetime.fromisoformat(change[1]) for change in changes]
        types = [change[0] for change in changes]
        
        colors = {'–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä': 'red', '–£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä': 'blue', 
                 '–û–±—Ä–∞—Ç–Ω—ã–π –æ—Å–º–æ—Å': 'green', '–ü–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä': 'orange'}
        
        for i, (date, filter_type) in enumerate(zip(dates, types)):
            ax2.scatter(date, i % 5, color=colors.get(filter_type, 'gray'), label=filter_type if i == 0 else "")
        
        ax2.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax2.xaxis.set_major_locator(mdates.MonthLocator())
        ax2.set_title('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ–Ω')
        ax2.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=150)
        buffer.seek(0)
        plt.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for name, count, last_change in stats:
            last_date = datetime.fromisoformat(last_change).strftime('%d.%m.%Y')
            stats_text += f"‚Ä¢ {name}: {count} –∑–∞–º–µ–Ω\n  –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_date}\n"
        
        await update.message.reply_photo(
            photo=buffer,
            caption=stats_text
        )
        
        return SELECTING_ACTION
    
    async def notification_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        cursor.execute('''
            SELECT ft.name, fc.next_change_date 
            FROM filter_changes fc
            JOIN filter_types ft ON fc.filter_type_id = ft.id
            WHERE fc.user_id = ? AND fc.next_change_date > ?
            ORDER BY fc.next_change_date
        ''', (user_id, datetime.now().isoformat()))
        
        upcoming = cursor.fetchall()
        
        if not upcoming:
            await update.message.reply_text("‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–º–µ–Ω–µ–Ω—ã –≤–æ–≤—Ä–µ–º—è!")
            return SELECTING_ACTION
        
        notification_text = "üîî –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–º–µ–Ω—ã:\n\n"
        for filter_name, next_change in upcoming:
            next_date = datetime.fromisoformat(next_change)
            days_left = (next_date - datetime.now()).days
            notification_text += f"‚Ä¢ {filter_name}: —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π ({next_date.strftime('%d.%m.%Y')})\n"
        
        keyboard = [[InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")]]
        markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(notification_text, reply_markup=markup)
        return SELECTING_ACTION
    
    async def check_notifications(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        now = datetime.now()
        
        cursor.execute('''
            SELECT n.id, u.user_id, ft.name, fc.next_change_date
            FROM notifications n
            JOIN users u ON n.user_id = u.user_id
            JOIN filter_types ft ON n.filter_type_id = ft.id
            JOIN filter_changes fc ON n.filter_type_id = fc.filter_type_id AND n.user_id = fc.user_id
            WHERE n.notification_date <= ? AND n.sent = FALSE
        ''', (now.isoformat(),))
        
        notifications = cursor.fetchall()
        
        for notification_id, user_id, filter_name, next_change in notifications:
            next_date = datetime.fromisoformat(next_change)
            days_left = (next_date - now).days
            
            message = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞!\n"
                f"–§–∏–ª—å—Ç—Ä: {filter_name}\n"
                f"–°—Ä–æ–∫ –∑–∞–º–µ–Ω—ã: {next_date.strftime('%d.%m.%Y')}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
            )
            
            try:
                await context.bot.send_message(chat_id=user_id, text=message)
                
                # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                cursor.execute(
                    "UPDATE notifications SET sent = TRUE WHERE id = ?",
                    (notification_id,)
                )
                conn.commit()
                
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "admin_stats":
            await self.show_admin_stats(query)
        elif query.data == "disable_notifications":
            await self.disable_notifications(query)
        
        return SELECTING_ACTION
    
    async def show_admin_stats(self, query):
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM filter_changes")
        change_count = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT ft.name, COUNT(fc.id) 
            FROM filter_changes fc 
            JOIN filter_types ft ON fc.filter_type_id = ft.id 
            GROUP BY ft.name
        ''')
        changes_by_type = cursor.fetchall()
        
        stats_text = (
            "üëë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
            f"üîß –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: {change_count}\n\n"
            "–ó–∞–º–µ–Ω—ã –ø–æ —Ç–∏–ø–∞–º:\n"
        )
        
        for filter_name, count in changes_by_type:
            stats_text += f"‚Ä¢ {filter_name}: {count}\n"
        
        await query.edit_message_text(stats_text)
    
    async def disable_notifications(self, query):
        user_id = query.from_user.id
        cursor.execute("DELETE FROM notifications WHERE user_id = ?", (user_id,))
        conn.commit()
        await query.edit_message_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    
    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        job_queue = self.application.job_queue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
        job_queue.run_daily(
            self.check_notifications,
            time=datetime.strptime("10:00", "%H:%M").time(),
            name="daily_notifications"
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É$'), self.add_filter_start)],
            states={
                CHOOSING_FILTER_TYPE: [
                    CallbackQueryHandler(self.filter_type_selected, pattern='^select_filter_')
                ],
                UPLOADING_PHOTO: [
                    MessageHandler(filters.PHOTO, self.handle_photo),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.skip_photo)
                ],
                ADDING_FILTER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_filter_change)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.start)],
            map_to_parent={SELECTING_ACTION: SELECTING_ACTION}
        )
        
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(conv_handler)
        self.application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), self.show_statistics))
        self.application.add_handler(MessageHandler(filters.Regex('^üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$'), self.notification_settings))
        self.application.add_handler(MessageHandler(filters.Regex('^üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å$'), self.admin_panel))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        self.setup_jobs()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        self.application.run_polling()

if __name__ == '__main__':
    bot = FilterBot()
    bot.run()
