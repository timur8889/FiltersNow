import logging
import sqlite3
import os
import asyncio
import shutil
import traceback
import re
from datetime import datetime, timedelta
from contextlib import contextmanager
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '5024165375'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
    exit(1)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_LIFETIMES = {
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl10": 180,
    "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π sl20": 180,
    "–≥–µ–π–∑–µ—Ä": 365,
    "–∞–∫–≤–∞—Ñ–æ—Ä": 365,
    "—É–≥–æ–ª—å–Ω—ã–π": 90,
    "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π": 180,
    "–ø—Ä–µ—Å—Ç–∏–∂": 365,
    "–∫—Ä–∏—Å—Ç–∞–ª–ª": 365
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = sqlite3.connect('filters.db')
    conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
    try:
        yield conn
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def get_user_filters(user_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM filters WHERE user_id = ? ORDER BY expiry_date", (user_id,))
        return [dict(row) for row in cur.fetchall()]

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –í–ê–õ–ò–î–ê–¶–ò–Ø –í–í–û–î–ê ==========
def validate_date(date_str: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    date_str = date_str.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    date_str = re.sub(r'[^\d\.\-]', '', date_str)
    
    formats = ['%d.%m.%y', '%d.%m.%Y', '%d-%m-%y', '%d-%m-%Y']
    
    for fmt in formats:
        try:
            date_obj = datetime.strptime(date_str, fmt).date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º +1 –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∞—Å–∞)
            today = datetime.now().date()
            if date_obj > today + timedelta(days=1):
                raise ValueError("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (–º–∞–∫—Å–∏–º—É–º 5 –ª–µ—Ç –Ω–∞–∑–∞–¥)
            if date_obj < today - timedelta(days=5*365):
                raise ValueError("–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
                
            return date_obj
        except ValueError:
            continue
    
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì")

def validate_lifetime(days_str: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã"""
    try:
        days = int(days_str)
        if days <= 0:
            raise ValueError("–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        if days > 2000:  # –ú–∞–∫—Å–∏–º—É–º ~5.5 –ª–µ—Ç
            raise ValueError("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã")
        return days
    except ValueError:
        raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")

def validate_filter_name(name: str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    name = name.strip()
    if not name:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    if len(name) > 100:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
    if re.search(r'[^\w\s\-\.]', name, re.UNICODE):
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    return name

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø ==========
def get_multiple_filters_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª")
    )
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥
    keyboard.row(
        types.KeyboardButton("‚ö° –£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂"),
        types.KeyboardButton("üßΩ –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä")
    )
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard.row(
        types.KeyboardButton("üì¶ –ù–∞–±–æ—Ä: –ö—É—Ö–Ω—è + –í–∞–Ω–Ω–∞—è"),
        types.KeyboardButton("üè† –ù–∞–±–æ—Ä: –ü–æ–ª–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞")
    )
    
    # –ü—è—Ç—ã–π —Ä—è–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    keyboard.row(
        types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"),
        types.KeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
    )
    
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    
    return keyboard

def get_quick_sets_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    
    keyboard.row(types.KeyboardButton("üè† –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã"))
    keyboard.row(types.KeyboardButton("üç≥ –ë–∞–∑–æ–≤—ã–π –∫—É—Ö–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä"))
    keyboard.row(types.KeyboardButton("üöø –ù–∞–±–æ—Ä –¥–ª—è –≤–∞–Ω–Ω–æ–π"))
    keyboard.row(types.KeyboardButton("‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä"))
    
    keyboard.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    
    return keyboard

def get_add_filter_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä"),
        types.KeyboardButton("üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    )
    keyboard.row(types.KeyboardButton("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–±–æ—Ä—ã"))
    keyboard.row(types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==========
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã"),
        types.KeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
    )
    keyboard.row(
        types.KeyboardButton("‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    )
    return keyboard

def get_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
        types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
    )
    keyboard.row(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10"),
        types.KeyboardButton("üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20")
    )
    keyboard.row(
        types.KeyboardButton("üíß –ì–µ–π–∑–µ—Ä"),
        types.KeyboardButton("üíß –ê–∫–≤–∞—Ñ–æ—Ä")
    )
    keyboard.row(types.KeyboardButton("üìù –î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_location_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üè† –ö—É—Ö–Ω—è"))
    keyboard.row(types.KeyboardButton("üöø –í–∞–Ω–Ω–∞—è"))
    keyboard.row(types.KeyboardButton("üè¢ –û—Ñ–∏—Å"))
    keyboard.row(types.KeyboardButton("üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.row(
        types.KeyboardButton("3Ô∏è‚É£ 90 –¥–Ω–µ–π"),
        types.KeyboardButton("6Ô∏è‚É£ 180 –¥–Ω–µ–π"),
        types.KeyboardButton("1Ô∏è‚É£ 365 –¥–Ω–µ–π")
    )
    keyboard.row(types.KeyboardButton("üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    keyboard.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_edit_field_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.row(
        types.KeyboardButton("üîß –¢–∏–ø"),
        types.KeyboardButton("üìç –ú–µ—Å—Ç–æ")
    )
    keyboard.row(
        types.KeyboardButton("üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã"),
        types.KeyboardButton("‚è±Ô∏è –°—Ä–æ–∫ —Å–ª—É–∂–±—ã")
    )
    keyboard.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"))
    return keyboard

def get_confirmation_keyboard(filter_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{filter_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    return keyboard

def get_reset_confirmation_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
    )
    return keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    filter_type TEXT,
                    location TEXT,
                    last_change DATE,
                    expiry_date DATE,
                    lifetime_days INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        cur.execute('''CREATE INDEX IF NOT EXISTS idx_user_id ON filters(user_id)''')
        cur.execute('''CREATE INDEX IF NOT EXISTS idx_expiry_date ON filters(expiry_date)''')
        conn.commit()

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        backup_dir = "backups"
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"filters_backup_{timestamp}.db")
        
        shutil.copy2('filters.db', backup_file)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
        backups = sorted([f for f in os.listdir(backup_dir) if f.startswith("filters_backup")])
        for old_backup in backups[:-7]:
            os.remove(os.path.join(backup_dir, old_backup))
            logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class MultipleFiltersStates(StatesGroup):
    waiting_filters_list = State()
    waiting_location = State()
    waiting_change_date = State()
    waiting_lifetime = State()

class EditFilterStates(StatesGroup):
    waiting_filter_selection = State()
    waiting_field_selection = State()
    waiting_new_value = State()

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def parse_date(date_str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    return validate_date(date_str)

def format_date_nice(date):
    return date.strftime('%d.%m.%y')

def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180

def get_status_icon_and_text(days_until_expiry):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    if days_until_expiry <= 0:
        return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù"
    elif days_until_expiry <= 7:
        return "üü°", "–°–†–û–ß–ù–û –ó–ê–ú–ï–ù–ò–¢–¨"
    elif days_until_expiry <= 30:
        return "üü†", "–°–ö–û–†–û –ó–ê–ú–ï–ù–ò–¢–¨"
    else:
        return "‚úÖ", "–í –ù–û–†–ú–ï"

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –§–û–ù–ì–û–í–´–ï –ó–ê–î–ê–ß–ò –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========
async def check_expired_filters():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        with get_db_connection() as conn:
            cur = conn.cursor()
            
            # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                          FROM filters 
                          WHERE expiry_date BETWEEN date('now') AND date('now', '+7 days')''')
            expiring_filters = cur.fetchall()
            
            # –§–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
            cur.execute('''SELECT DISTINCT user_id, filter_type, location, expiry_date 
                          FROM filters 
                          WHERE expiry_date BETWEEN date('now', '-30 days') AND date('now', '-1 day')''')
            expired_filters = cur.fetchall()
        
        notified_users = set()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞
        for user_id, filter_type, location, expiry_date in expiring_filters:
            try:
                days_until_expiry = (datetime.strptime(str(expiry_date), '%Y-%m-%d').date() - datetime.now().date()).days
                expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                
                await bot.send_message(
                    user_id,
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
                    f"üîß {filter_type}\n"
                    f"üìç {location}\n"
                    f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date_nice}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n\n"
                    f"‚ö†Ô∏è <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</i>",
                    parse_mode='HTML'
                )
                notified_users.add(user_id)
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        for user_id, filter_type, location, expiry_date in expired_filters:
            if user_id not in notified_users:  # –ù–µ —Å–ø–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    days_expired = (datetime.now().date() - datetime.strptime(str(expiry_date), '%Y-%m-%d').date()).days
                    expiry_date_nice = format_date_nice(datetime.strptime(str(expiry_date), '%Y-%m-%d').date())
                    
                    await bot.send_message(
                        user_id,
                        f"üö® <b>–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
                        f"üîß {filter_type}\n"
                        f"üìç {location}\n"
                        f"üìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫: {expiry_date_nice}\n"
                        f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –¥–Ω–µ–π: {days_expired}\n\n"
                        f"‚ùå <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞!</i>",
                        parse_mode='HTML'
                    )
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {exception}\n{traceback.format_exc()}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            ADMIN_ID,
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n"
            f"–¢–∏–ø: {type(exception).__name__}\n"
            f"–û—à–∏–±–∫–∞: {str(exception)[:1000]}"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    return True

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def schedule_daily_check():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    while True:
        try:
            await check_expired_filters()
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 3:00
            if datetime.now().hour == 3:
                backup_database()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
        
        # –û–∂–∏–¥–∞–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60 * 60)

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    backup_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(schedule_daily_check())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# ========== –£–õ–£–ß–®–ï–ù–ò–Ø: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –° –ö–ù–û–ü–ö–ê–ú–ò –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø ==========

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</i>\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "‚Ä¢ ‚è≥ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –∑–∞–º–µ–Ω—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π\n"
        "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back(message: types.Message):
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def cmd_management(message: types.Message):
    await message.answer(
        "üõ†Ô∏è <b>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await message.answer(
        "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        "üí° <i>–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ</i>",
        parse_mode='HTML',
        reply_markup=get_add_filter_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text in ["üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä", "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤", "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–±–æ—Ä—ã"])
async def process_add_type(message: types.Message, state: FSMContext):
    if message.text == "üîß –û–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä":
        await FilterStates.waiting_filter_type.set()
        await message.answer(
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</i>",
            parse_mode='HTML',
            reply_markup=get_filter_type_keyboard()
        )
    elif message.text == "üì¶ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await MultipleFiltersStates.waiting_filters_list.set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        async with state.proxy() as data:
            data['selected_filters'] = []
            data['filters_list'] = []
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</b>\n\n"
            "üí° <i>–ú–æ–∂–Ω–æ:</i>\n"
            "‚Ä¢ –ù–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä\n"
            "‚Ä¢ –í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ –ù–∞–∂–∞—Ç—å '‚úÖ –ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ\n\n"
            "üìù <b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n"
            "<i>–ü–æ–∫–∞ –ø—É—Å—Ç–æ</i>",
            parse_mode='HTML',
            reply_markup=get_multiple_filters_keyboard()
        )
    elif message.text == "üöÄ –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–±–æ—Ä—ã":
        await MultipleFiltersStates.waiting_filters_list.set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        async with state.proxy() as data:
            data['selected_filters'] = []
            data['filters_list'] = []
        
        await message.answer(
            "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞–±–æ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üí´ <i>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</i>\n\n"
            "üè† <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
            "üç≥ <b>–ë–∞–∑–æ–≤—ã–π –∫—É—Ö–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä</b> - –º–∏–Ω–∏–º—É–º –¥–ª—è –∫—É—Ö–Ω–∏\n"
            "üöø <b>–ù–∞–±–æ—Ä –¥–ª—è –≤–∞–Ω–Ω–æ–π</b> - —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã\n"
            "‚ö° <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä</b> - –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç\n\n"
            "üí° <i>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</i>",
            parse_mode='HTML',
            reply_markup=get_quick_sets_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(state=MultipleFiltersStates.waiting_filters_list)
async def process_multiple_filters_selection(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'selected_filters' not in data:
            data['selected_filters'] = []
        if 'filters_list' not in data:
            data['filters_list'] = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not data['selected_filters']:
            await message.answer(
                "‚ùå <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç!</b>\n\n"
                "üí° <i>–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        data['filters_list'] = data['selected_filters'].copy()
        await MultipleFiltersStates.next()
        
        await message.answer(
            f"‚úÖ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"üì¶ <b>–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(data['filters_list'])}\n\n"
            f"üîß <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n" + "\n".join([f"‚Ä¢ {f}" for f in data['filters_list']]) + "\n\n"
            f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n\n"
            f"üí° <i>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</i>",
            parse_mode='HTML',
            reply_markup=get_location_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
    if message.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫":
        data['selected_filters'] = []
        await message.answer(
            "üîÑ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—á–∏—â–µ–Ω!</b>\n\n"
            "üí´ <i>–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ</i>",
            parse_mode='HTML',
            reply_markup=get_multiple_filters_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É":
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_multiple_filters_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
    predefined_filters = []
    if message.text == "üì¶ –ù–∞–±–æ—Ä: –ö—É—Ö–Ω—è + –í–∞–Ω–Ω–∞—è":
        predefined_filters = ["–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10", "–ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂", "–£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂"]
    elif message.text == "üè† –ù–∞–±–æ—Ä: –ü–æ–ª–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞":
        predefined_filters = ["–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10", "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20", "–ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂", "–ê–∫–≤–∞—Ñ–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª", "–£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂"]
    elif message.text == "üè† –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã":
        predefined_filters = ["–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10", "–ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂", "–£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂"]
    elif message.text == "üç≥ –ë–∞–∑–æ–≤—ã–π –∫—É—Ö–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä":
        predefined_filters = ["–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10", "–£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂"]
    elif message.text == "üöø –ù–∞–±–æ—Ä –¥–ª—è –≤–∞–Ω–Ω–æ–π":
        predefined_filters = ["–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"]
    elif message.text == "‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä":
        predefined_filters = ["–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10", "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20", "–ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂", "–ê–∫–≤–∞—Ñ–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª", "–£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"]
    
    if predefined_filters:
        data['selected_filters'].extend(predefined_filters)
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        data['selected_filters'] = list(dict.fromkeys(data['selected_filters']))
        
        await message.answer(
            f"‚úÖ <b>–ù–∞–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(predefined_filters)}\n"
            f"üìä –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ: {len(data['selected_filters'])}",
            parse_mode='HTML',
            reply_markup=get_multiple_filters_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    filter_mapping = {
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL10",
        "üîß –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20": "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π SL20",
        "üíß –ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂": "–ì–µ–π–∑–µ—Ä –ü—Ä–µ—Å—Ç–∏–∂",
        "üíß –ê–∫–≤–∞—Ñ–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª": "–ê–∫–≤–∞—Ñ–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª",
        "‚ö° –£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂": "–£–≥–æ–ª—å–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂",
        "üßΩ –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä": "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"
    }
    
    if message.text in filter_mapping:
        filter_name = filter_mapping[message.text]
        if filter_name not in data['selected_filters']:
            data['selected_filters'].append(filter_name)
            await message.answer(
                f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {filter_name}\n\n"
                f"üìä –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ: {len(data['selected_filters'])}",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        else:
            await message.answer(
                f"‚ÑπÔ∏è <b>–§–∏–ª—å—Ç—Ä —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ:</b> {filter_name}",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã)
    if message.text and message.text not in ["‚úÖ –ì–æ—Ç–æ–≤–æ", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filter_text = message.text
        additional_filters = []
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç—ã–º
        if ',' in filter_text:
            additional_filters = [f.strip() for f in filter_text.split(',') if f.strip()]
        else:
            # –ò–ª–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
            additional_filters = [f.strip() for f in filter_text.split('\n') if f.strip()]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        added_count = 0
        for new_filter in additional_filters:
            if new_filter and new_filter not in data['selected_filters']:
                data['selected_filters'].append(new_filter)
                added_count += 1
        
        if added_count > 0:
            await message.answer(
                f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {added_count}\n\n"
                f"üìä –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ: {len(data['selected_filters'])}",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        else:
            await message.answer(
                "‚ÑπÔ∏è <b>–ù–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                "üí° <i>–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ</i>",
                parse_mode='HTML',
                reply_markup=get_multiple_filters_keyboard()
            )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    if data['selected_filters']:
        filters_text = "\n".join([f"‚Ä¢ {f}" for f in data['selected_filters']])
        status_text = f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(data['selected_filters'])}\n\n{filters_text}"
    else:
        status_text = "üìù <b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>\n\n<i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫</i>"
    
    await message.answer(
        f"üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        f"{status_text}\n\n"
        f"üí° <i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'</i>",
        parse_mode='HTML',
        reply_markup=get_multiple_filters_keyboard()
    )

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é) ==========

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìù –î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    try:
        filter_name = validate_filter_name(message.text)
        
        async with state.proxy() as data:
            data['filter_type'] = filter_name
            data['lifetime'] = get_lifetime_by_type(filter_name)

        await FilterStates.next()
        await message.answer(
            "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</i>",
            parse_mode='HTML',
            reply_markup=get_location_keyboard()
        )
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            f"üí° <i>{str(e)}</i>",
            parse_mode='HTML',
            reply_markup=get_filter_type_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ, –∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@dp.message_handler(state=[FilterStates.waiting_location, MultipleFiltersStates.waiting_location])
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    if message.text == "üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ":
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</b>\n\n"
            "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è, –í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –ü–æ–¥ —Ä–∞–∫–æ–≤–∏–Ω–æ–π, –ì–æ—Å—Ç–∏–Ω–∞—è, –û—Ñ–∏—Å, –ë–∞–ª–∫–æ–Ω, –ì–∞—Ä–∞–∂ –∏ —Ç.–¥.</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    current_state = await state.get_state()
    
    if current_state == "FilterStates:waiting_location":
        # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        async with state.proxy() as data:
            data['location'] = message.text

        await FilterStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã</b>\n\n"
            f"üîß <i>–§–∏–ª—å—Ç—Ä:</i> {data['filter_type']}\n"
            f"üìç <i>–ú–µ—Å—Ç–æ:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        async with state.proxy() as data:
            data['location'] = message.text

        await MultipleFiltersStates.next()
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            f"üìç <i>–ú–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</i> {data['location']}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:</b>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—Ç—ã –∑–∞–º–µ–Ω—ã
@dp.message_handler(state=[FilterStates.waiting_change_date, MultipleFiltersStates.waiting_change_date])
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì
        change_date = parse_date(message.text)
        
        current_state = await state.get_state()
        
        if current_state == "FilterStates:waiting_change_date":
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            async with state.proxy() as data:
                data['change_date'] = change_date
                
            await FilterStates.next()
            await message.answer(
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
                f"üìÖ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫:</i> {data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            async with state.proxy() as data:
                data['change_date'] = change_date
                
            await MultipleFiltersStates.next()
            await message.answer(
                f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
                f"üìÖ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫:</i> {data['lifetime']} –¥–Ω–µ–π\n\n"
                f"üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b>",
                parse_mode='HTML',
                reply_markup=get_lifetime_keyboard()
            )
        
    except ValueError as e:
        today_nice = format_date_nice(datetime.now().date())
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üìù <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì</i>\n"
            f"<i>–ü—Ä–∏–º–µ—Ä: {today_nice}</i>",
            parse_mode='HTML',
            reply_markup=get_cancel_keyboard()
        )

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
@dp.message_handler(state=[FilterStates.waiting_lifetime, MultipleFiltersStates.waiting_lifetime])
async def process_lifetime(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    try:
        current_state = await state.get_state()
        
        if current_state == "FilterStates:waiting_lifetime":
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            async with state.proxy() as data:
                change_date = data['change_date']
                filter_type = data['filter_type']
                location = data['location']
                
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await message.answer(
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    lifetime = validate_lifetime(message.text)
                
                expiry_date = change_date + timedelta(days=lifetime)
                
                with get_db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute('''INSERT INTO filters 
                                (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                                VALUES (?, ?, ?, ?, ?, ?)''',
                               (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                    conn.commit()

                days_until_expiry = (expiry_date - datetime.now().date()).days
                status_icon, status_text = get_status_icon_and_text(days_until_expiry)
                
                change_date_nice = format_date_nice(change_date)
                expiry_date_nice = format_date_nice(expiry_date)
                
                await message.answer(
                    f"{status_icon} <b>–§–ò–õ–¨–¢–† –î–û–ë–ê–í–õ–ï–ù!</b>\n\n"
                    f"üîß <b>–¢–∏–ø:</b> {filter_type}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                    f"üìÖ <b>–ó–∞–º–µ–Ω–µ–Ω:</b> {change_date_nice}\n"
                    f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n"
                    f"üìÖ <b>–ì–æ–¥–µ–Ω –¥–æ:</b> {expiry_date_nice}\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_until_expiry}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                await state.finish()
                
        else:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            async with state.proxy() as data:
                change_date = data['change_date']
                location = data['location']
                filters_list = data['filters_list']
                
                if message.text.startswith("3Ô∏è‚É£") or message.text.startswith("6Ô∏è‚É£") or message.text.startswith("1Ô∏è‚É£"):
                    lifetime = int(message.text.split()[1])
                elif message.text == "üìÖ –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
                    await message.answer(
                        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b>\n"
                        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 120, 200, 400 –∏ —Ç.–¥.</i>",
                        parse_mode='HTML',
                        reply_markup=get_cancel_keyboard()
                    )
                    return
                else:
                    lifetime = validate_lifetime(message.text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                with get_db_connection() as conn:
                    cur = conn.cursor()
                    
                    added_count = 0
                    results = []
                    
                    for filter_type in filters_list:
                        expiry_date = change_date + timedelta(days=lifetime)
                        
                        cur.execute('''INSERT INTO filters 
                                    (user_id, filter_type, location, last_change, expiry_date, lifetime_days) 
                                    VALUES (?, ?, ?, ?, ?, ?)''',
                                   (message.from_user.id, filter_type, location, change_date, expiry_date, lifetime))
                        added_count += 1
                        
                        days_until_expiry = (expiry_date - datetime.now().date()).days
                        results.append({
                            'type': filter_type,
                            'expiry_date': expiry_date,
                            'days_until_expiry': days_until_expiry
                        })
                    
                    conn.commit()
                
                change_date_nice = format_date_nice(change_date)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                response = f"‚úÖ <b>–£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û {added_count} –§–ò–õ–¨–¢–†–û–í!</b>\n\n"
                response += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
                response += f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã:</b> {change_date_nice}\n"
                response += f"‚è±Ô∏è <b>–°—Ä–æ–∫ —Å–ª—É–∂–±—ã:</b> {lifetime} –¥–Ω–µ–π\n\n"
                
                response += "<b>üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
                for i, result in enumerate(results, 1):
                    expiry_date_nice = format_date_nice(result['expiry_date'])
                    status_icon, _ = get_status_icon_and_text(result['days_until_expiry'])
                    response += f"{status_icon} {result['type']} (–¥–æ {expiry_date_nice})\n"
                
                await message.answer(
                    response,
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                await state.finish()
            
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å—Ä–æ–∫–µ —Å–ª—É–∂–±—ã!</b>\n\n"
            f"üí° <i>{str(e)}</i>\n\n"
            f"üî¢ <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º</i>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 90, 180, 365</i>",
            parse_mode='HTML',
            reply_markup=get_lifetime_keyboard()
        )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    filters = get_user_filters(message.from_user.id)

    if not filters:
        await message.answer(
            "üì≠ <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ú® –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    response = "üìã <b>–í–ê–®–ò –§–ò–õ–¨–¢–†–´</b>\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        status_icon, status_text = get_status_icon_and_text(days_until_expiry)
        
        last_change_nice = format_date_nice(datetime.strptime(str(f['last_change']), '%Y-%m-%d').date())
        expiry_date_nice = format_date_nice(expiry_date)
        
        response += (
            f"{status_icon} <b>–§–ò–õ–¨–¢–† #{f['id']}</b>\n"
            f"   üîß {f['filter_type']}\n"
            f"   üìç {f['location']}\n"
            f"   üìÖ –ó–∞–º–µ–Ω–µ–Ω: {last_change_nice}\n"
            f"   ‚è±Ô∏è –°—Ä–æ–∫: {f['lifetime_days']} –¥–Ω.\n"
            f"   üóìÔ∏è –ì–æ–¥–µ–Ω –¥–æ: {expiry_date_nice}\n"
            f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_until_expiry} –¥–Ω.\n"
            f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        )

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "‚è≥ –°—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    filters = get_user_filters(message.from_user.id)

    if not filters:
        await message.answer(
            "üì≠ <b>–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
            "üí´ <i>–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤</i>",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    warning_filters = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f['expiry_date']), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        expiry_date_nice = format_date_nice(expiry_date)
        
        if days_until_expiry <= 0:
            expired_filters.append(f"üî¥ {f['filter_type']} ({f['location']}) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω. –Ω–∞–∑–∞–¥ (–¥–æ {expiry_date_nice})")
        elif days_until_expiry <= 7:
            expiring_soon.append(f"üü° {f['filter_type']} ({f['location']}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω. (–¥–æ {expiry_date_nice})")
        elif days_until_expiry <= 30:
            warning_filters.append(f"üü† {f['filter_type']} ({f['location']}) - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω. (–¥–æ {expiry_date_nice})")

    response = "‚è≥ <b>–ö–û–ù–¢–†–û–õ–¨ –°–†–û–ö–û–í</b>\n\n"
    
    if expired_filters:
        response += "üö® <b>–ü–†–û–°–†–û–ß–ï–ù–´:</b>\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "‚ö†Ô∏è <b>–°–†–û–ß–ù–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(expiring_soon) + "\n\n"
    
    if warning_filters:
        response += "üîî <b>–°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:</b>\n" + "\n".join(warning_filters) + "\n\n"
    
    if not expired_filters and not expiring_soon and not warning_filters:
        response += "‚úÖ <b>–í–°–ï –§–ò–õ–¨–¢–†–´ –í –ù–û–†–ú–ï!</b>\n\n"
        response += "üí´ <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30+ –¥–Ω–µ–π</i>"

    await message.answer(response, parse_mode='HTML', reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "üåü <b>–§–∏–ª—å—Ç—Ä-–¢—Ä–µ–∫–µ—Ä</b> ü§ñ\n\n"
        "üíß <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not API_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        exit(1)
    
    init_db()
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º startup
    executor.start_polling(
        dp, 
        skip_updates=True,
        on_startup=on_startup
   
