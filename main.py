import logging
import sqlite3
import gspread
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8278600298:AAGPjUhyU5HxXOaLRvu-FSRldBW_UCmwOME'
ADMIN_ID = 5024165375

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
SERVICE_ACCOUNT_FILE = 'service_account.json'  # –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
SPREADSHEET_NAME = '–£—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤'  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤ –¥–Ω—è—Ö)
DEFAULT_LIFETIMES = {
    "—É–≥–æ–ª—å–Ω—ã–π": 180,
    "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π": 90,
    "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Å–∞": 365,
    "—É–º—è–≥—á–∏—Ç–µ–ª—å": 180,
    "–ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä": 180,
    "–ø—Ä–µ-—Ñ–∏–ª—å—Ç—Ä": 90
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_google_sheets():
    try:
        creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        try:
            spreadsheet = client.open(SPREADSHEET_NAME)
        except gspread.SpreadsheetNotFound:
            spreadsheet = client.create(SPREADSHEET_NAME)
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
            spreadsheet.share(None, perm_type='anyone', role='reader')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        worksheet = spreadsheet.sheet1
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
        if not worksheet.get('A1'):
            worksheet.update('A1:F1', [['ID', 'User ID', '–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞', '–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã', '–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '–û—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–Ω–µ–π']])
            worksheet.format('A1:F1', {'textFormat': {'bold': True}})
        
        return worksheet
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS filters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                filter_type TEXT,
                last_change DATE,
                expiry_date DATE,
                lifetime_days INTEGER)''')
    conn.commit()
    conn.close()

# States
class FilterStates(StatesGroup):
    waiting_filter_type = State()
    waiting_change_date = State()
    waiting_lifetime = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"))
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"))
    keyboard.add(types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"))
    keyboard.add(types.KeyboardButton("üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏"))
    keyboard.add(types.KeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets"))
    return keyboard

def get_cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_lifetime_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("90 –¥–Ω–µ–π"),
        types.KeyboardButton("180 –¥–Ω–µ–π"),
        types.KeyboardButton("365 –¥–Ω–µ–π")
    )
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

def get_filter_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("–£–≥–æ–ª—å–Ω—ã–π"),
        types.KeyboardButton("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Å–∞"),
        types.KeyboardButton("–£–º—è–≥—á–∏—Ç–µ–ª—å")
    )
    keyboard.add(types.KeyboardButton("–î—Ä—É–≥–æ–π —Ç–∏–ø"))
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
def sync_to_google_sheets():
    try:
        worksheet = init_google_sheets()
        if not worksheet:
            return None
        
        conn = sqlite3.connect('filters.db')
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, filter_type, last_change, expiry_date, lifetime_days FROM filters")
        filters = cur.fetchall()
        conn.close()
        
        if not filters:
            return worksheet
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = []
        today = datetime.now().date()
        
        for f in filters:
            expiry_date = datetime.strptime(str(f[4]), '%Y-%m-%d').date()
            days_until_expiry = (expiry_date - today).days
            
            data.append([
                f[0],  # ID
                f[1],  # User ID
                f[2],  # –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
                str(f[3]),  # –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã
                str(f[4]),  # –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏
                days_until_expiry  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–Ω–µ–π
            ])
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        if len(worksheet.get_all_values()) > 1:
            worksheet.delete_rows(2, len(worksheet.get_all_values()))
        
        if data:
            worksheet.update(f'A2:F{len(data)+1}', data)
        
        return worksheet
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ä–æ–∫–∏ —Å–ª—É–∂–±—ã –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤!\n"
        "üìä –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Google Sheets\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞
def get_lifetime_by_type(filter_type):
    filter_type_lower = filter_type.lower()
    for key, days in DEFAULT_LIFETIMES.items():
        if key in filter_type_lower:
            return days
    return 180  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await FilterStates.waiting_filter_type.set()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=get_filter_type_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_filter_type)
async def process_filter_type(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–æ–π —Ç–∏–ø":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞:", reply_markup=get_cancel_keyboard())
        return
    
    async with state.proxy() as data:
        data['filter_type'] = message.text
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –ø–æ —Ç–∏–ø—É
        data['lifetime'] = get_lifetime_by_type(message.text)

    await FilterStates.next()
    await message.answer(
        f"üìÖ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–ª—è '{message.text}': {data['lifetime']} –¥–Ω–µ–π\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):",
        reply_markup=get_cancel_keyboard()
    )

@dp.message_handler(state=FilterStates.waiting_change_date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        change_date = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        async with state.proxy() as data:
            data['change_date'] = change_date
            
        await FilterStates.next()
        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã {data['lifetime']} –¥–Ω–µ–π?\n"
            f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:",
            reply_markup=get_lifetime_keyboard()
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")

@dp.message_handler(state=FilterStates.waiting_lifetime)
async def process_lifetime(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            change_date = data['change_date']
            filter_type = data['filter_type']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
            if message.text.endswith("–¥–Ω–µ–π"):
                lifetime = int(message.text.split()[0])
            else:
                lifetime = int(message.text)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            expiry_date = change_date + timedelta(days=lifetime)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            conn = sqlite3.connect('filters.db')
            cur = conn.cursor()
            cur.execute('''INSERT INTO filters 
                        (user_id, filter_type, last_change, expiry_date, lifetime_days) 
                        VALUES (?, ?, ?, ?, ?)''',
                       (message.from_user.id, filter_type, change_date, expiry_date, lifetime))
            conn.commit()
            conn.close()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
            sync_to_google_sheets()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–æ–∫–∞
            days_until_expiry = (expiry_date - datetime.now().date()).days
            status_icon = "üîî" if days_until_expiry <= 30 else "‚úÖ"
            
            await message.answer(
                f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìä –¢–∏–ø: {filter_type}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã: {change_date}\n"
                f"‚è∞ –°—Ä–æ–∫ —Å–ª—É–∂–±—ã: {lifetime} –¥–Ω–µ–π\n"
                f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {expiry_date} {status_icon}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}",
                reply_markup=get_main_keyboard()
            )
            await state.finish()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, last_change, expiry_date, lifetime_days FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=get_main_keyboard())
        return

    response = "üìã –í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    today = datetime.now().date()
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[3]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if days_until_expiry <= 0:
            status_icon = "‚ùå –ü–†–û–°–†–û–ß–ï–ù"
        elif days_until_expiry <= 7:
            status_icon = "üî¥ –°–†–û–ß–ù–û"
        elif days_until_expiry <= 30:
            status_icon = "üü° –°–ö–û–†–û"
        else:
            status_icon = "‚úÖ –ù–û–†–ú–ê"
        
        response += (f"üÜî {f[0]}\n"
                    f"üìä –¢–∏–ø: {f[1]}\n"
                    f"üìÖ –ó–∞–º–µ–Ω–µ–Ω: {f[2]}\n"
                    f"‚è∞ –°—Ä–æ–∫: {f[4]} –¥–Ω–µ–π\n"
                    f"üìÖ –ì–æ–¥–µ–Ω –¥–æ: {f[3]}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_until_expiry}\n"
                    f"üì¢ –°—Ç–∞—Ç—É—Å: {status_icon}\n\n")

    await message.answer(response, reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
@dp.message_handler(lambda message: message.text == "üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏")
@dp.message_handler(commands=['check'])
async def cmd_check(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT filter_type, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer("üì≠ –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", reply_markup=get_main_keyboard())
        return

    today = datetime.now().date()
    expired_filters = []
    expiring_soon = []
    
    for f in filters:
        expiry_date = datetime.strptime(str(f[1]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - today).days
        
        if days_until_expiry <= 0:
            expired_filters.append(f"{f[0]} - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω {abs(days_until_expiry)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        elif days_until_expiry <= 30:
            expiring_soon.append(f"{f[0]} - –æ—Å—Ç–∞–ª–æ—Å—å {days_until_expiry} –¥–Ω–µ–π")

    response = "üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
    
    if expired_filters:
        response += "‚ùå –ü–†–û–°–†–û–ß–ï–ù–´:\n" + "\n".join(expired_filters) + "\n\n"
    
    if expiring_soon:
        response += "üü° –°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:\n" + "\n".join(expiring_soon) + "\n\n"
    
    if not expired_filters and not expiring_soon:
        response += "‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ!\n"

    await message.answer(response, reply_markup=get_main_keyboard())

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
@dp.message_handler(lambda message: message.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets")
@dp.message_handler(commands=['export'])
async def cmd_export(message: types.Message):
    try:
        worksheet = sync_to_google_sheets()
        
        if worksheet:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = worksheet.spreadsheet
            url = f"https://docs.google.com/spreadsheets/d/{spreadsheet.id}"
            
            await message.answer(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets!\n\n"
                f"üìä –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:\n{url}\n\n"
                f"–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏.",
                reply_markup=get_main_keyboard(),
                disable_web_page_preview=True
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–≤–∏—Å–∞.",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_keyboard()
        )

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message_handler(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
@dp.message_handler(commands=['delete'])
async def cmd_delete(message: types.Message):
    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    cur.execute("SELECT id, filter_type, expiry_date FROM filters WHERE user_id = ?", 
                (message.from_user.id,))
    filters = cur.fetchall()
    conn.close()

    if not filters:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_main_keyboard())
        return

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for f in filters:
        expiry_date = datetime.strptime(str(f[2]), '%Y-%m-%d').date()
        days_until_expiry = (expiry_date - datetime.now().date()).days
        
        status = "‚ùå" if days_until_expiry <= 0 else "üü°" if days_until_expiry <= 30 else "‚úÖ"
        
        keyboard.add(types.InlineKeyboardButton(
            f"{status} {f[1]} (–¥–æ {f[2]})",
            callback_data=f"delete_{f[0]}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞", state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_'))
async def process_delete(callback_query: types.CallbackQuery):
    filter_id = callback_query.data.split('_')[1]

    conn = sqlite3.connect('filters.db')
    cur = conn.cursor()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    cur.execute("SELECT filter_type, expiry_date FROM filters WHERE id = ? AND user_id = ?",
                (filter_id, callback_query.from_user.id))
    filter_info = cur.fetchone()
    
    if filter_info:
        cur.execute("DELETE FROM filters WHERE id = ? AND user_id = ?",
                    (filter_id, callback_query.from_user.id))
        conn.commit()
        conn.close()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
        sync_to_google_sheets()
        
        await callback_query.message.edit_text(
            f"‚úÖ –§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω:\nüìä {filter_info[0]}\nüìÖ –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–ª: {filter_info[1]}"
        )
    else:
        await callback_query.answer("–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:",
        reply_markup=get_main_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    worksheet = init_google_sheets()
    if worksheet:
        logging.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        sync_to_google_sheets()
    else:
        logging.warning("Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
    
    executor.start_polling(dp, skip_updates=True)
{
  "type": "service_account",
  "project_id": "decent-surf-474418-h6",
  "private_key_id": "234b66a011af6018c407e4fb9f6d475df265b8ad",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDCKKUPfQJtGiEB\nCvgg64kDPWxe91legC1/eWFBLOueL/acs+PqYMwfFhFDdg16OadS2sXEsmgjR0Mm\nw3xRVMghHqioQIYqSs2D/4Y4QxHbNRKoY8sqMv2gbjlOPQWizOp0Mr2ZsbUjK6QW\nrG4PLJ21RsyKsK6hitf2UiSs7ysEapMFLmABDC4spE75fpfDpkJUkkbHdqXv4EO3\nki7mQ7H1CrgxLxwS/QMAdceSltQxhlbaAskj1t6A2NlusS3TSKGBBoZDYee8lcLE\n4jHICFNSCgOG5wjItJT8JdZdy1WA6YyP2AcbzKAjZv9sZzDCqfxzvPt3Dowqdj7t\na0MNPCdVAgMBAAECggEABcYJToIZpIk+ilY7Va3wskDNLFpvn7tGXxWKxPzjJB4/\nV56T0aA/lvxkLAeNKWF12SVknyTtACuPfXjFBXLKIWNU1u1Vmq6vGNSW4a0WPANX\n2DELgBLpxC+y6Dbb/YuEEfYrpC/gIo5wKopwcBFpaSlp+K/TVD4ZjkYYDW/D7YrO\ndSeg6e6dfUtgVUlDie9wwXT9yvdr0hHNO24pzwL6xJ1Iqo3FdGtNNzYueMfENznW\nMOlv4YpV1Y4cmip7aiMgrpTY5KKzEbcl6OWUrvRRgA18nlDhQrZQgQHY6CLHhjXS\nu1jnSUWIJt1z8KnfXrVm6gcbnsJjJoHQBNJYCowXiwKBgQDzelGNuWOmOIFz4UI+\ncvf+q9qI3kFhaWhrfh9OFRHMGIGZ/Z8bV69H/U+Gh0KNFQZJ06CWAQEsEkAks7+d\noHjOsvpUsOX8XPS/dNLTcJW+C3DhZNnakPvwlmrFODeqltnpI8T0LrbTCGDeSBDc\nL83yV7lJJIB4x3IbyQFVHsrT6wKBgQDMJPsoHbqEEYjoAylYsqgWTy9VtCdv5bt6\nRWT3Y2Ii3buiEKaS6Tlq5welFJSqujxNNKvgYb/+xFacZF2pmeFtefkVgc+c8Mac\nA3pfhOuHR+naltpr5rpBe/53XpW0X6YenbYH+nExyP9TBZRk1HA98MAGwtLVPsP2\n1Yy8cdRhvwKBgFc2Yk4EsQgSR3RtpJ/f6KsFfdL24a515lxSof4DGAvmX038hehy\nYSvFNZ43hwQoGseJEYWJuJTDuMwswp9AouVPQNHjR4488cI+o2HvewPG71kdGdfr\nhQMprfcU6wOk40tab6sTrJMs9h3I7JkiWn/LImhrtcUNk/cV6e9Gh1qfAoGAD6MV\nifEdBFjDf+IeHKkyruLJ4Wq3Sp7ySV9faIO4VKtfX/6eg8pRl5qyvzZgXON/Evrh\n34IdTsqDR994PTGITvZ02ezjlkXrMLAjg4WO9QHRK+k6OeGmirWQvFwGY5agBuBV\nvS611PZseFOJFmAfaN80FlB+Dc+M+y9IZHbjqckCgYBx/ti3nCK/WVyJMjcmX8VY\nRJ5vpahsOsz30UMSmh7JqjZIsk1RV3mpJ+8E4FabPPfE0/yar3BsijRK8FWbnaE0\nHbPS/WtnUuqtjcall5DhXurhEGFMkGZ/4pCeyYj6Nl4HWn0AjF33uMb1XF99iOfd\nsEMN7pC6s34Zh9Tbt8QuQg==\n-----END PRIVATE KEY-----\n",
  "client_email": "timurka@decent-surf-474418-h6.iam.gserviceaccount.com",
  "client_id": "113848664495921437290",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/timurka%40decent-surf-474418-h6.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
